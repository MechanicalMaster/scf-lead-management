This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.idx/
  dev.nix
app/
  (dashboard)/
    configuration/
      ai-rules/
        page.tsx
      escalation-rules/
        page.tsx
    layout.tsx
  api/
    leads/
      results/
        route.ts
      template/
        route.ts
  dashboard/
    page.tsx
  lead-details/
    [id]/
      page.tsx
  login/
    page.tsx
  masters/
    anchor-master/
      page.tsx
    email-template-master/
      metadata.ts
      page.tsx
    error-code-master/
      page.tsx
    hierarchy/
      page.tsx
    holiday-master/
      page.tsx
    pincode-branch/
      page.tsx
    rm-branch/
      page.tsx
  new-leads/
    page.tsx
  program-review/
    page.tsx
  psm-leads/
    page.tsx
  reports/
    page.tsx
  rm-inbox/
    page.tsx
  rm-leads/
    page.tsx
  smartfin-update/
    metadata.ts
    page.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  SCFleadmanagement/
    masters/
      anchor-master.tsx
      email-template-master.tsx
      error-code-master.tsx
      hierarchy-master.tsx
      holiday-master.tsx
      master-layout.tsx
      pincode-branch-master.tsx
      rm-branch-master.tsx
    content.tsx
    dashboard.tsx
    edit-lead-modal.tsx
    layout.tsx
    lead-details.tsx
    list-01.tsx
    list-02.tsx
    list-03.tsx
    login-form.tsx
    new-leads.tsx
    program-review-leads.tsx
    psm-leads.tsx
    reports.tsx
    rm-inbox.tsx
    rm-leads.tsx
    sidebar.tsx
    smartfin-update.tsx
    top-nav.tsx
  ui/
    accordion.tsx
    alert-dialog.tsx
    alert.tsx
    aspect-ratio.tsx
    avatar.tsx
    badge.tsx
    breadcrumb.tsx
    button.tsx
    calendar.tsx
    card.tsx
    carousel.tsx
    chart.tsx
    checkbox.tsx
    collapsible.tsx
    command.tsx
    context-menu.tsx
    dialog.tsx
    drawer.tsx
    dropdown-menu.tsx
    form.tsx
    hover-card.tsx
    input-otp.tsx
    input.tsx
    label.tsx
    menubar.tsx
    navigation-menu.tsx
    pagination.tsx
    popover.tsx
    progress.tsx
    radio-group.tsx
    resizable.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    sidebar.tsx
    skeleton.tsx
    slider.tsx
    sonner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    toast.tsx
    toaster.tsx
    toggle-group.tsx
    toggle.tsx
    tooltip.tsx
    use-mobile.tsx
    use-toast.ts
  app-provider.tsx
  auth-provider.tsx
  client-side-auth-wrapper.tsx
  route-guard.tsx
  theme-provider.tsx
  theme-toggle.tsx
hooks/
  use-mobile.tsx
  use-toast.ts
lib/
  ai-service.ts
  constants.ts
  db-init.ts
  db.ts
  dbUtils.ts
  downloadTemplate.ts
  lead-utils.ts
  lead-workflow-examples.ts
  lead-workflow.ts
  smartfin-api.ts
  utils.ts
public/
  placeholder-logo.svg
  placeholder.svg
styles/
  globals.css
.env.local copy.example
.gitignore
components.json
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/masters/email-template-master/metadata.ts">
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: "Email Template Master - SCF Lead Management",
  description: "View and manage email templates used throughout the system",
};
</file>

<file path="app/masters/email-template-master/page.tsx">
"use client"

import dynamic from "next/dynamic";
import { Loader2, RefreshCw } from "lucide-react";
import Layout from "@/components/SCFleadmanagement/layout";
import { Suspense, useState } from "react";
import { Button } from "@/components/ui/button";
import { resetDatabase } from "@/lib/db-init";

// Dynamically import the EmailTemplateMaster component to ensure it's only loaded client-side
const EmailTemplateMaster = dynamic(
  () => import("@/components/SCFleadmanagement/masters/email-template-master"),
  {
    loading: () => (
      <div className="flex items-center justify-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
      </div>
    ),
    ssr: false,
  }
);

export default function EmailTemplateMasterPage() {
  const [resetting, setResetting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleResetDatabase = async () => {
    if (confirm("⚠️ WARNING: This will completely reset ALL data in the application. This action cannot be undone. Are you sure you want to continue?")) {
      setResetting(true);
      try {
        await resetDatabase();
        window.location.reload();
      } catch (err: any) {
        console.error("Error resetting database:", err);
        setError(err.message || "Failed to reset database");
        setResetting(false);
      }
    }
  };

  return (
    <Layout>
      <div className="mb-4">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold">Email Template Master</h1>
          <Button 
            variant="destructive" 
            size="sm" 
            onClick={handleResetDatabase}
            disabled={resetting}
          >
            {resetting ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                Resetting Database...
              </>
            ) : (
              <>
                <RefreshCw className="h-4 w-4 mr-2" />
                Reset All Data
              </>
            )}
          </Button>
        </div>
        {error && (
          <div className="bg-red-50 text-red-600 p-3 rounded-md border border-red-200 mt-2">
            {error}
          </div>
        )}
      </div>
      <Suspense fallback={<div>Loading...</div>}>
        <EmailTemplateMaster />
      </Suspense>
    </Layout>
  );
}
</file>

<file path="components/SCFleadmanagement/masters/email-template-master.tsx">
"use client"

import { useState, useEffect } from "react"
import { MasterService } from "@/lib/db"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import MasterLayout from "@/components/SCFleadmanagement/masters/master-layout"
import type { EmailTemplateMaster } from "@/lib/db"
import { Loader2, ChevronLeft, ChevronRight, Search, Eye, RefreshCw } from "lucide-react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/components/ui/dialog"
import { safeDbOperation } from "@/lib/db-init"
import { resetDatabase } from "@/lib/db-init"

export default function EmailTemplateMasterComponent() {
  const [templates, setTemplates] = useState<EmailTemplateMaster[]>([])
  const [loading, setLoading] = useState<boolean>(true)
  const [error, setError] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState<number>(1)
  const [itemsPerPage] = useState<number>(10)
  const [totalRecords, setTotalRecords] = useState<number>(0)
  const [searchTerm, setSearchTerm] = useState<string>("")
  const [selectedTemplate, setSelectedTemplate] = useState<EmailTemplateMaster | null>(null)
  const [dialogOpen, setDialogOpen] = useState<boolean>(false)
  const [resetting, setResetting] = useState<boolean>(false)

  // Load templates when component mounts or page changes
  useEffect(() => {
    const fetchTemplates = async () => {
      setLoading(true)
      setError(null)
      
      try {
        const offset = (currentPage - 1) * itemsPerPage
        
        // Use safeDbOperation to handle potential database errors
        const result = await safeDbOperation(
          async () => MasterService.getRecords(
            'email_template_master',
            {}, // No filters initially
            undefined, // No specific sort field
            itemsPerPage,
            offset
          ),
          { success: false, data: [] }
        )

        if (result.success && result.data) {
          setTemplates(result.data as EmailTemplateMaster[])
          
          // Get total count
          const countResult = await safeDbOperation(
            async () => MasterService.getTotalRecords('email_template_master'),
            { success: false }
          )
          
          if (countResult.success && countResult.count !== undefined) {
            setTotalRecords(countResult.count)
          }
        } else {
          setError("Failed to fetch templates")
        }
      } catch (err) {
        console.error("Error fetching templates:", err)
        setError("An error occurred while fetching templates")
      } finally {
        setLoading(false)
      }
    }

    fetchTemplates()
  }, [currentPage, itemsPerPage])

  // Handle search
  const handleSearch = async () => {
    setLoading(true)
    setError(null)
    setCurrentPage(1) // Reset to first page when searching
    
    try {
      let result;
      
      if (searchTerm.trim() === "") {
        // If search is cleared, get all templates
        result = await safeDbOperation(
          async () => MasterService.getRecords(
            'email_template_master',
            {},
            undefined,
            itemsPerPage,
            0
          ),
          { success: false, data: [] }
        )
      } else {
        // Search in templateName or category fields
        result = await safeDbOperation(
          async () => MasterService.getRecords(
            'email_template_master',
            { templateName: searchTerm },
            undefined,
            itemsPerPage,
            0
          ),
          { success: false, data: [] }
        )
      }

      if (result.success && result.data) {
        setTemplates(result.data as EmailTemplateMaster[])
      } else {
        setError("Search failed")
      }
    } catch (err) {
      console.error("Error searching templates:", err)
      setError("An error occurred during search")
    } finally {
      setLoading(false)
    }
  }

  // Pagination handlers
  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1)
    }
  }

  const handleNextPage = () => {
    if (currentPage < Math.ceil(totalRecords / itemsPerPage)) {
      setCurrentPage(currentPage + 1)
    }
  }

  // Format recipient arrays for display
  const formatRecipients = (recipients: string[] | undefined) => {
    if (!recipients || recipients.length === 0) return "-";
    return recipients.join(", ");
  }

  // Handle view template details
  const handleViewTemplate = (template: EmailTemplateMaster) => {
    setSelectedTemplate(template);
    setDialogOpen(true);
  }

  // Add a handler to reset the database
  const handleResetDatabase = async () => {
    if (confirm("This will reset the database and reload the page. Are you sure?")) {
      setResetting(true)
      try {
        await resetDatabase()
        // Reload the page after reset
        window.location.reload()
      } catch (err) {
        console.error("Error resetting database:", err)
        setError("Failed to reset database")
        setResetting(false)
      }
    }
  }

  return (
    <MasterLayout
      title="Email Template Master"
      description="View and manage email templates used throughout the system"
      storeName="email_template_master"
    >
      <div className="space-y-4">
        <div className="flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2">
          <div className="flex w-full sm:w-auto space-x-2">
            <div className="flex-1 sm:w-64">
              <Label htmlFor="search" className="sr-only">
                Search
              </Label>
              <div className="relative">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
                <Input
                  id="search"
                  type="search"
                  placeholder="Search by template name..."
                  className="pl-8"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      handleSearch()
                    }
                  }}
                />
              </div>
            </div>
            <Button onClick={handleSearch}>Search</Button>
          </div>
        </div>

        {error && (
          <div className="bg-red-50 text-red-600 p-4 rounded-md border border-red-200">
            <div className="flex flex-col sm:flex-row justify-between items-center">
              <p>{error}</p>
              <Button 
                variant="destructive" 
                size="sm" 
                onClick={handleResetDatabase} 
                className="mt-2 sm:mt-0"
                disabled={resetting}
              >
                {resetting ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Resetting...
                  </>
                ) : (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2" />
                    Reset Database
                  </>
                )}
              </Button>
            </div>
            <p className="text-xs mt-2">
              If you're seeing a schema error, you might need to reset the database
            </p>
          </div>
        )}

        <div className="border rounded-md">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Template Name</TableHead>
                <TableHead>Category</TableHead>
                <TableHead>To</TableHead>
                <TableHead>CC</TableHead>
                <TableHead>Active</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={6} className="text-center py-10">
                    <div className="flex justify-center items-center">
                      <Loader2 className="h-6 w-6 animate-spin text-gray-500 dark:text-gray-400" />
                      <span className="ml-2">Loading templates...</span>
                    </div>
                  </TableCell>
                </TableRow>
              ) : templates.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={6} className="text-center py-10 text-gray-500 dark:text-gray-400">
                    No templates found
                  </TableCell>
                </TableRow>
              ) : (
                templates.map((template) => (
                  <TableRow key={template.id}>
                    <TableCell className="font-medium">{template.templateName}</TableCell>
                    <TableCell>{template.category || "-"}</TableCell>
                    <TableCell>{formatRecipients(template.toRecipients)}</TableCell>
                    <TableCell>{formatRecipients(template.ccRecipients)}</TableCell>
                    <TableCell>{template.isActive ? "Yes" : "No"}</TableCell>
                    <TableCell>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={() => handleViewTemplate(template)}
                        className="flex items-center"
                      >
                        <Eye className="h-4 w-4 mr-1" />
                        View Body
                      </Button>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </div>

        {/* Pagination */}
        <div className="flex justify-between items-center">
          <div className="text-sm text-gray-500 dark:text-gray-400">
            Showing {templates.length > 0 ? (currentPage - 1) * itemsPerPage + 1 : 0} to{" "}
            {Math.min(currentPage * itemsPerPage, totalRecords)} of {totalRecords} templates
          </div>
          <div className="flex space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={handlePrevPage}
              disabled={currentPage === 1 || loading}
            >
              <ChevronLeft className="h-4 w-4 mr-1" />
              Previous
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={handleNextPage}
              disabled={currentPage >= Math.ceil(totalRecords / itemsPerPage) || loading}
            >
              Next
              <ChevronRight className="h-4 w-4 ml-1" />
            </Button>
          </div>
        </div>
      </div>

      {/* Template Details Dialog */}
      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>
              {selectedTemplate?.templateName || "Email Template"}
            </DialogTitle>
            <DialogDescription>
              {selectedTemplate?.description || "Email template details"}
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 mt-4">
            <div className="grid grid-cols-1 gap-3">
              <div>
                <h4 className="text-sm font-medium mb-1">Subject</h4>
                <div className="p-2 border rounded bg-gray-50 dark:bg-gray-900">
                  {selectedTemplate?.subject || "No subject"}
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <h4 className="text-sm font-medium mb-1">To Recipients</h4>
                  <div className="p-2 border rounded bg-gray-50 dark:bg-gray-900">
                    {formatRecipients(selectedTemplate?.toRecipients)}
                  </div>
                </div>
                
                <div>
                  <h4 className="text-sm font-medium mb-1">CC Recipients</h4>
                  <div className="p-2 border rounded bg-gray-50 dark:bg-gray-900">
                    {formatRecipients(selectedTemplate?.ccRecipients)}
                  </div>
                </div>
              </div>
              
              <div>
                <h4 className="text-sm font-medium mb-1">Email Body</h4>
                <div 
                  className="p-3 border rounded bg-white dark:bg-gray-900 max-h-80 overflow-y-auto"
                  dangerouslySetInnerHTML={{ __html: selectedTemplate?.body || "No content" }}
                />
              </div>
            </div>
          </div>
          
          <div className="mt-4 flex justify-end">
            <DialogClose asChild>
              <Button>Close</Button>
            </DialogClose>
          </div>
        </DialogContent>
      </Dialog>
    </MasterLayout>
  )
}
</file>

<file path=".idx/dev.nix">
{pkgs}: {
  channel = "stable-24.05";
  packages = [
    pkgs.nodejs_20
  ];
  idx.extensions = [
    
  ];
  idx.previews = {
    previews = {
      web = {
        command = [
          "npm"
          "run"
          "dev"
          "--"
          "--port"
          "$PORT"
          "--hostname"
          "0.0.0.0"
        ];
        manager = "web";
      };
    };
  };
}
</file>

<file path="app/(dashboard)/configuration/ai-rules/page.tsx">
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Plus, Trash2 } from "lucide-react"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"

interface AIRule {
  id: string
  identifier: string
  flag: string
  aiSummary: string
  isActive: boolean
  emailTemplate: string
  triggerCondition: string
  confidenceThreshold: number
}

export default function AIRules() {
  const [rules, setRules] = useState<AIRule[]>([
    {
      id: "1",
      identifier: "Lead Summary",
      flag: "New Lead",
      aiSummary: "Generate a concise summary of the lead details including key business metrics and potential opportunities.",
      isActive: true,
      emailTemplate: "lead-summary",
      triggerCondition: "On Lead Creation",
      confidenceThreshold: 85,
    },
  ])

  const addNewRule = () => {
    const newRule: AIRule = {
      id: Date.now().toString(),
      identifier: "",
      flag: "",
      aiSummary: "",
      isActive: true,
      emailTemplate: "",
      triggerCondition: "",
      confidenceThreshold: 85,
    }
    setRules([...rules, newRule])
  }

  const deleteRule = (id: string) => {
    setRules(rules.filter(rule => rule.id !== id))
  }

  const updateRule = (id: string, field: keyof AIRule, value: any) => {
    setRules(rules.map(rule => 
      rule.id === id ? { ...rule, [field]: value } : rule
    ))
  }

  return (
    <main className="flex-1 ml-0 pt-16 px-4 md:px-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">AI Rules</h1>
        <Button onClick={addNewRule} className="gap-2">
          <Plus className="h-4 w-4" />
          Add Rule
        </Button>
      </div>

      <Card className="border-0 shadow-none bg-transparent">
        <CardHeader className="px-0">
          <CardTitle>AI Configuration Rules</CardTitle>
          <CardDescription>
            Configure AI rules for automated email generation and content processing
          </CardDescription>
        </CardHeader>
        <CardContent className="px-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Identifier</TableHead>
                <TableHead>Flag</TableHead>
                <TableHead>AI Summary</TableHead>
                <TableHead>Template</TableHead>
                <TableHead>Trigger</TableHead>
                <TableHead>Confidence</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="w-[100px]">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {rules.map((rule) => (
                <TableRow key={rule.id}>
                  <TableCell>
                    <Input
                      value={rule.identifier}
                      onChange={(e) => updateRule(rule.id, "identifier", e.target.value)}
                      placeholder="Enter identifier"
                    />
                  </TableCell>
                  <TableCell>
                    <Select
                      value={rule.flag}
                      onValueChange={(value) => updateRule(rule.id, "flag", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select flag" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="New Lead">New Lead</SelectItem>
                        <SelectItem value="Follow Up">Follow Up</SelectItem>
                        <SelectItem value="Document Request">Document Request</SelectItem>
                        <SelectItem value="Approval">Approval</SelectItem>
                        <SelectItem value="Rejection">Rejection</SelectItem>
                      </SelectContent>
                    </Select>
                  </TableCell>
                  <TableCell>
                    <Textarea
                      value={rule.aiSummary}
                      onChange={(e) => updateRule(rule.id, "aiSummary", e.target.value)}
                      placeholder="Enter AI summary instructions"
                      className="min-h-[80px]"
                    />
                  </TableCell>
                  <TableCell>
                    <Select
                      value={rule.emailTemplate}
                      onValueChange={(value) => updateRule(rule.id, "emailTemplate", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select template" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="lead-summary">Lead Summary</SelectItem>
                        <SelectItem value="follow-up">Follow Up</SelectItem>
                        <SelectItem value="document-request">Document Request</SelectItem>
                        <SelectItem value="approval-notice">Approval Notice</SelectItem>
                        <SelectItem value="rejection-notice">Rejection Notice</SelectItem>
                      </SelectContent>
                    </Select>
                  </TableCell>
                  <TableCell>
                    <Select
                      value={rule.triggerCondition}
                      onValueChange={(value) => updateRule(rule.id, "triggerCondition", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select trigger" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="On Lead Creation">On Lead Creation</SelectItem>
                        <SelectItem value="Status Change">Status Change</SelectItem>
                        <SelectItem value="Document Upload">Document Upload</SelectItem>
                        <SelectItem value="Manual Trigger">Manual Trigger</SelectItem>
                      </SelectContent>
                    </Select>
                  </TableCell>
                  <TableCell>
                    <Input
                      type="number"
                      value={rule.confidenceThreshold}
                      onChange={(e) => updateRule(rule.id, "confidenceThreshold", parseInt(e.target.value))}
                      min={0}
                      max={100}
                      className="w-20"
                    />
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      <Switch
                        checked={rule.isActive}
                        onCheckedChange={(checked) => updateRule(rule.id, "isActive", checked)}
                      />
                      <Label>{rule.isActive ? "Active" : "Inactive"}</Label>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => deleteRule(rule.id)}
                      className="text-red-500 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-950/20"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>

          <div className="mt-6 flex justify-end gap-4">
            <Button variant="outline">Cancel</Button>
            <Button>Save Changes</Button>
          </div>
        </CardContent>
      </Card>
    </main>
  )
}
</file>

<file path="app/(dashboard)/layout.tsx">
"use client"

import Sidebar from "@/components/SCFleadmanagement/sidebar"

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-[#0F0F12] flex">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        {children}
      </div>
    </div>
  )
}
</file>

<file path="app/api/leads/results/route.ts">
import { NextResponse } from 'next/server';

export async function GET() {
  // In a real application, this would generate an Excel file with results
  // For now, we'll just return a dummy text file
  const dummyContent = 'This would be an Excel file with lead upload results';
  
  return new NextResponse(dummyContent, {
    headers: {
      'Content-Type': 'text/plain',
      'Content-Disposition': 'attachment; filename="lead_upload_results.xlsx"',
    },
  });
}
</file>

<file path="app/api/leads/template/route.ts">
import { NextResponse } from 'next/server';

export async function GET() {
  // In a real application, this would generate an Excel file
  // For now, we'll just return a dummy text file
  const dummyContent = 'This would be an Excel template for lead uploads';
  
  return new NextResponse(dummyContent, {
    headers: {
      'Content-Type': 'text/plain',
      'Content-Disposition': 'attachment; filename="lead_upload_template.xlsx"',
    },
  });
}
</file>

<file path="app/dashboard/page.tsx">
import Dashboard from "@/components/SCFleadmanagement/dashboard"
import Layout from "@/components/SCFleadmanagement/layout"

export default function DashboardPage() {
  return (
    <Layout>
      <Dashboard />
    </Layout>
  )
}
</file>

<file path="app/login/page.tsx">
import LoginForm from "@/components/SCFleadmanagement/login-form"

export default function LoginPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-r from-slate-100 to-slate-200 dark:from-gray-900 dark:to-gray-800 p-4">
      <div className="relative w-full max-w-md">
        {/* Background pattern */}
        <div className="absolute inset-0 bg-white dark:bg-[#1F1F23] rounded-2xl shadow-xl overflow-hidden">
          <div className="absolute inset-0 opacity-10">
            <div className="absolute -top-40 -right-40 w-80 h-80 rounded-full bg-blue-500"></div>
            <div className="absolute -bottom-40 -left-40 w-80 h-80 rounded-full bg-blue-600"></div>
            <div className="grid grid-cols-10 grid-rows-10 gap-4 absolute inset-0">
              {Array.from({ length: 20 }).map((_, i) => (
                <div 
                  key={i}
                  className="w-2 h-2 rounded-full bg-blue-500"
                  style={{
                    left: `${Math.random() * 100}%`,
                    top: `${Math.random() * 100}%`,
                    opacity: Math.random() * 0.5 + 0.2
                  }}
                />
              ))}
            </div>
          </div>
        </div>
        
        {/* Content */}
        <div className="relative bg-white dark:bg-[#1F1F23] rounded-2xl shadow-xl overflow-hidden p-8">
          <div className="mb-8 flex flex-col items-center">
            <div className="h-14 w-14 rounded-full bg-blue-600 flex items-center justify-center mb-4">
              <span className="font-bold text-2xl text-white">SCF</span>
            </div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              Lead Management
            </h1>
          </div>
          
          <LoginForm />
          
          <div className="mt-8 text-center text-xs text-gray-500 dark:text-gray-400">
            © 2025 Yes Bank SCF Division. All rights reserved.
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/masters/anchor-master/page.tsx">
import AnchorMaster from "@/components/SCFleadmanagement/masters/anchor-master"
import Layout from "@/components/SCFleadmanagement/layout"

export default function AnchorMasterPage() {
  return (
    <Layout>
      <AnchorMaster />
    </Layout>
  )
}
</file>

<file path="app/masters/error-code-master/page.tsx">
import ErrorCodeMasterComponent from "@/components/SCFleadmanagement/masters/error-code-master"
import Layout from "@/components/SCFleadmanagement/layout"

export default function ErrorCodeMasterPage() {
  return (
    <Layout>
      <ErrorCodeMasterComponent />
    </Layout>
  )
}
</file>

<file path="app/masters/hierarchy/page.tsx">
import HierarchyMaster from "@/components/SCFleadmanagement/masters/hierarchy-master"
import Layout from "@/components/SCFleadmanagement/layout"

export default function HierarchyMasterPage() {
  return (
    <Layout>
      <HierarchyMaster />
    </Layout>
  )
}
</file>

<file path="app/masters/holiday-master/page.tsx">
import HolidayMaster from "@/components/SCFleadmanagement/masters/holiday-master"
import Layout from "@/components/SCFleadmanagement/layout"

export default function HolidayMasterPage() {
  return (
    <Layout>
      <HolidayMaster />
    </Layout>
  )
}
</file>

<file path="app/masters/pincode-branch/page.tsx">
import PincodeBranchMaster from "@/components/SCFleadmanagement/masters/pincode-branch-master"
import Layout from "@/components/SCFleadmanagement/layout"

export default function PincodeBranchMasterPage() {
  return (
    <Layout>
      <PincodeBranchMaster />
    </Layout>
  )
}
</file>

<file path="app/masters/rm-branch/page.tsx">
import RMBranchMaster from "@/components/SCFleadmanagement/masters/rm-branch-master"
import Layout from "@/components/SCFleadmanagement/layout"

export default function RMBranchMasterPage() {
  return (
    <Layout>
      <RMBranchMaster />
    </Layout>
  )
}
</file>

<file path="app/new-leads/page.tsx">
import NewLeads from "@/components/SCFleadmanagement/new-leads"
import Layout from "@/components/SCFleadmanagement/layout"

export default function NewLeadsPage() {
  return (
    <Layout>
      <NewLeads />
    </Layout>
  )
}
</file>

<file path="app/program-review/page.tsx">
"use client"

import dynamic from "next/dynamic";
import { Loader2 } from "lucide-react";
import Layout from "@/components/SCFleadmanagement/layout";
import { Suspense } from "react";

// Dynamically import the ProgramReviewLeads component to ensure it's only loaded client-side
const ProgramReviewLeads = dynamic(
  () => import("@/components/SCFleadmanagement/program-review-leads"),
  {
    loading: () => (
      <div className="flex items-center justify-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
      </div>
    ),
    ssr: false,
  }
);

export default function ProgramReviewPage() {
  return (
    <Layout>
      <Suspense fallback={<div>Loading...</div>}>
        <ProgramReviewLeads />
      </Suspense>
    </Layout>
  );
}
</file>

<file path="app/psm-leads/page.tsx">
import PSMLeads from "@/components/SCFleadmanagement/psm-leads"
import Layout from "@/components/SCFleadmanagement/layout"

export default function PSMLeadsPage() {
  return (
    <Layout>
      <PSMLeads />
    </Layout>
  )
}
</file>

<file path="app/reports/page.tsx">
import Reports from "@/components/SCFleadmanagement/reports"
import Layout from "@/components/SCFleadmanagement/layout"

export default function ReportsPage() {
  return (
    <Layout>
      <Reports />
    </Layout>
  )
}
</file>

<file path="app/smartfin-update/metadata.ts">
import type { Metadata } from 'next';

export const metadata: Metadata = {
  title: "Smartfin Status Update - SCF Lead Management",
  description: "Upload and view Smartfin application status updates",
};
</file>

<file path="app/smartfin-update/page.tsx">
"use client"

import dynamic from "next/dynamic";
import { Loader2 } from "lucide-react";
import Layout from "@/components/SCFleadmanagement/layout";
import { Suspense } from "react";

// Dynamically import the SmartfinStatusUpdateComponent to ensure it's only loaded client-side
const SmartfinStatusUpdate = dynamic(
  () => import("@/components/SCFleadmanagement/smartfin-update"),
  {
    loading: () => (
      <div className="flex items-center justify-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-gray-500" />
      </div>
    ),
    ssr: false,
  }
);

export default function SmartfinStatusUpdatePage() {
  return (
    <Layout>
      <Suspense fallback={<div>Loading...</div>}>
        <SmartfinStatusUpdate />
      </Suspense>
    </Layout>
  );
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="components/SCFleadmanagement/masters/error-code-master.tsx">
"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { MasterService } from "@/lib/db"
import type { ErrorCodeMaster } from "@/lib/db"
import { ChevronLeft, ChevronRight } from "lucide-react"
import MasterLayout from "./master-layout"

export default function ErrorCodeMasterComponent() {
  const [errorCodes, setErrorCodes] = useState<ErrorCodeMaster[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage] = useState(10)
  const [totalRecords, setTotalRecords] = useState(0)

  useEffect(() => {
    // Load error codes from IndexedDB
    const loadErrorCodes = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Get total records count
        const countResult = await MasterService.getTotalRecords('error_codes');
        if (countResult.success && countResult.count !== undefined) {
          setTotalRecords(countResult.count);
        } else {
          setError("Failed to load record count");
          return;
        }
        
        // Get paginated records
        const result = await MasterService.getRecords(
          'error_codes', 
          {}, 
          undefined, 
          itemsPerPage, 
          (currentPage - 1) * itemsPerPage
        );
        
        if (result.success && result.data) {
          // Type assertion to ensure correct type
          setErrorCodes(result.data as ErrorCodeMaster[]);
        } else {
          setError("Failed to load error codes data");
        }
      } catch (err) {
        console.error("Error loading error codes:", err);
        setError("An unexpected error occurred");
      } finally {
        setLoading(false);
      }
    };

    loadErrorCodes();
  }, [currentPage, itemsPerPage]);
  
  // Pagination handlers
  const totalPages = Math.ceil(totalRecords / itemsPerPage);
  const handleNextPage = () => setCurrentPage(prev => Math.min(prev + 1, totalPages));
  const handlePrevPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));

  return (
    <MasterLayout 
      title="Error Code Master" 
      description="Manage error codes for the application"
      storeName="error_codes"
    >
      {loading ? (
        <div className="flex justify-center py-8">
          <div className="text-center">
            <div className="inline-block animate-spin h-8 w-8 border-4 border-gray-300 dark:border-gray-700 rounded-full border-t-blue-600 dark:border-t-blue-500"></div>
            <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">Loading error codes...</p>
          </div>
        </div>
      ) : error ? (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900/30 rounded-md p-4 my-4">
          <p className="text-red-800 dark:text-red-300">{error}</p>
          <Button 
            variant="outline" 
            size="sm" 
            className="mt-2"
            onClick={() => window.location.reload()}
          >
            Reload
          </Button>
        </div>
      ) : (
        <>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="bg-muted">
                  <TableHead>Error Code</TableHead>
                  <TableHead>Description</TableHead>
                  <TableHead>Module</TableHead>
                  <TableHead>Severity</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {errorCodes.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={4} className="text-center py-6 text-gray-500 dark:text-gray-400">
                      No error codes available. Use the Upload tab to add data.
                    </TableCell>
                  </TableRow>
                ) : (
                  errorCodes.map((errorCode, idx) => (
                    <TableRow key={errorCode.id || idx}>
                      <TableCell className="font-medium">{errorCode.errorCode}</TableCell>
                      <TableCell>{errorCode.description}</TableCell>
                      <TableCell>{errorCode.module}</TableCell>
                      <TableCell>
                        <span
                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            errorCode.severity === 'Error'
                              ? "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300"
                              : errorCode.severity === 'Warning'
                              ? "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300"
                              : "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300"
                          }`}
                        >
                          {errorCode.severity}
                        </span>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
          
          {/* Pagination UI */}
          {totalRecords > 0 && (
            <div className="flex items-center justify-between mt-4 text-sm">
              <p className="text-gray-500 dark:text-gray-400">
                Showing {(currentPage - 1) * itemsPerPage + 1} - {Math.min(currentPage * itemsPerPage, totalRecords)} of {totalRecords} records
              </p>
              <div className="flex items-center space-x-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handlePrevPage} 
                  disabled={currentPage === 1}
                  className="h-8 w-8 p-0"
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <span className="text-gray-500 dark:text-gray-400">
                  Page {currentPage} of {totalPages}
                </span>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handleNextPage} 
                  disabled={currentPage === totalPages || totalRecords === 0}
                  className="h-8 w-8 p-0"
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
            </div>
          )}
        </>
      )}
    </MasterLayout>
  )
}
</file>

<file path="components/SCFleadmanagement/content.tsx">
import { Calendar, CreditCard, Wallet } from "lucide-react"
import List01 from "./list-01"
import List02 from "./list-02"
import List03 from "./list-03"

export default function () {
  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white dark:bg-[#0F0F12] rounded-xl p-6 flex flex-col border border-gray-200 dark:border-[#1F1F23]">
          <h2 className="text-lg font-bold text-gray-900 dark:text-white mb-4 text-left flex items-center gap-2 ">
            <Wallet className="w-3.5 h-3.5 text-zinc-900 dark:text-zinc-50" />
            Accounts
          </h2>
          <div className="flex-1">
            <List01 className="h-full" />
          </div>
        </div>
        <div className="bg-white dark:bg-[#0F0F12] rounded-xl p-6 flex flex-col border border-gray-200 dark:border-[#1F1F23]">
          <h2 className="text-lg font-bold text-gray-900 dark:text-white mb-4 text-left flex items-center gap-2">
            <CreditCard className="w-3.5 h-3.5 text-zinc-900 dark:text-zinc-50" />
            Recent Transactions
          </h2>
          <div className="flex-1">
            <List02 className="h-full" />
          </div>
        </div>
      </div>

      <div className="bg-white dark:bg-[#0F0F12] rounded-xl p-6 flex flex-col items-start justify-start border border-gray-200 dark:border-[#1F1F23]">
        <h2 className="text-lg font-bold text-gray-900 dark:text-white mb-4 text-left flex items-center gap-2">
          <Calendar className="w-3.5 h-3.5 text-zinc-900 dark:text-zinc-50" />
          Upcoming Events
        </h2>
        <List03 />
      </div>
    </div>
  )
}
</file>

<file path="components/SCFleadmanagement/layout.tsx">
"use client"

import type { ReactNode } from "react"
import Sidebar from "./sidebar"
import TopNav from "./top-nav"
import { useTheme } from "next-themes"
import { useEffect, useState } from "react"
import RouteGuard from "@/components/route-guard"

interface LayoutProps {
  children: ReactNode
}

export default function Layout({ children }: LayoutProps) {
  const { theme } = useTheme()
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null
  }

  return (
    <RouteGuard>
      <div className={`flex h-screen ${theme === "dark" ? "dark" : ""}`}>
        <Sidebar />
        <div className="w-full flex flex-1 flex-col">
          <header className="h-16 border-b border-gray-200 dark:border-[#1F1F23]">
            <TopNav />
          </header>
          <main className="flex-1 overflow-auto p-6 bg-white dark:bg-[#0F0F12]">{children}</main>
        </div>
      </div>
    </RouteGuard>
  )
}
</file>

<file path="components/SCFleadmanagement/list-01.tsx">
import { cn } from "@/lib/utils"
import { ArrowUpRight, ArrowDownLeft, Wallet, SendHorizontal, QrCode, Plus, ArrowRight, CreditCard } from "lucide-react"

interface AccountItem {
  id: string
  title: string
  description?: string
  balance: string
  type: "savings" | "checking" | "investment" | "debt"
}

interface List01Props {
  totalBalance?: string
  accounts?: AccountItem[]
  className?: string
}

const ACCOUNTS: AccountItem[] = [
  {
    id: "1",
    title: "Main Savings",
    description: "Personal savings",
    balance: "$8,459.45",
    type: "savings",
  },
  {
    id: "2",
    title: "Checking Account",
    description: "Daily expenses",
    balance: "$2,850.00",
    type: "checking",
  },
  {
    id: "3",
    title: "Investment Portfolio",
    description: "Stock & ETFs",
    balance: "$15,230.80",
    type: "investment",
  },
  {
    id: "4",
    title: "Credit Card",
    description: "Pending charges",
    balance: "$1,200.00",
    type: "debt",
  },
  {
    id: "5",
    title: "Savings Account",
    description: "Emergency fund",
    balance: "$3,000.00",
    type: "savings",
  },
]

export default function List01({ totalBalance = "$26,540.25", accounts = ACCOUNTS, className }: List01Props) {
  return (
    <div
      className={cn(
        "w-full max-w-xl mx-auto",
        "bg-white dark:bg-zinc-900/70",
        "border border-zinc-100 dark:border-zinc-800",
        "rounded-xl shadow-sm backdrop-blur-xl",
        className,
      )}
    >
      {/* Total Balance Section */}
      <div className="p-4 border-b border-zinc-100 dark:border-zinc-800">
        <p className="text-xs text-zinc-600 dark:text-zinc-400">Total Balance</p>
        <h1 className="text-2xl font-semibold text-zinc-900 dark:text-zinc-50">{totalBalance}</h1>
      </div>

      {/* Accounts List */}
      <div className="p-3">
        <div className="flex items-center justify-between mb-2">
          <h2 className="text-xs font-medium text-zinc-900 dark:text-zinc-100">Your Accounts</h2>
        </div>

        <div className="space-y-1">
          {accounts.map((account) => (
            <div
              key={account.id}
              className={cn(
                "group flex items-center justify-between",
                "p-2 rounded-lg",
                "hover:bg-zinc-100 dark:hover:bg-zinc-800/50",
                "transition-all duration-200",
              )}
            >
              <div className="flex items-center gap-2">
                <div
                  className={cn("p-1.5 rounded-lg", {
                    "bg-emerald-100 dark:bg-emerald-900/30": account.type === "savings",
                    "bg-blue-100 dark:bg-blue-900/30": account.type === "checking",
                    "bg-purple-100 dark:bg-purple-900/30": account.type === "investment",
                  })}
                >
                  {account.type === "savings" && (
                    <Wallet className="w-3.5 h-3.5 text-emerald-600 dark:text-emerald-400" />
                  )}
                  {account.type === "checking" && <QrCode className="w-3.5 h-3.5 text-blue-600 dark:text-blue-400" />}
                  {account.type === "investment" && (
                    <ArrowUpRight className="w-3.5 h-3.5 text-purple-600 dark:text-purple-400" />
                  )}
                  {account.type === "debt" && <CreditCard className="w-3.5 h-3.5 text-red-600 dark:text-red-400" />}
                </div>
                <div>
                  <h3 className="text-xs font-medium text-zinc-900 dark:text-zinc-100">{account.title}</h3>
                  {account.description && (
                    <p className="text-[11px] text-zinc-600 dark:text-zinc-400">{account.description}</p>
                  )}
                </div>
              </div>

              <div className="text-right">
                <span className="text-xs font-medium text-zinc-900 dark:text-zinc-100">{account.balance}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Updated footer with four buttons */}
      <div className="p-2 border-t border-zinc-100 dark:border-zinc-800">
        <div className="grid grid-cols-4 gap-2">
          <button
            type="button"
            className={cn(
              "flex items-center justify-center gap-2",
              "py-2 px-3 rounded-lg",
              "text-xs font-medium",
              "bg-zinc-900 dark:bg-zinc-50",
              "text-zinc-50 dark:text-zinc-900",
              "hover:bg-zinc-800 dark:hover:bg-zinc-200",
              "shadow-sm hover:shadow",
              "transition-all duration-200",
            )}
          >
            <Plus className="w-3.5 h-3.5" />
            <span>Add</span>
          </button>
          <button
            type="button"
            className={cn(
              "flex items-center justify-center gap-2",
              "py-2 px-3 rounded-lg",
              "text-xs font-medium",
              "bg-zinc-900 dark:bg-zinc-50",
              "text-zinc-50 dark:text-zinc-900",
              "hover:bg-zinc-800 dark:hover:bg-zinc-200",
              "shadow-sm hover:shadow",
              "transition-all duration-200",
            )}
          >
            <SendHorizontal className="w-3.5 h-3.5" />
            <span>Send</span>
          </button>
          <button
            type="button"
            className={cn(
              "flex items-center justify-center gap-2",
              "py-2 px-3 rounded-lg",
              "text-xs font-medium",
              "bg-zinc-900 dark:bg-zinc-50",
              "text-zinc-50 dark:text-zinc-900",
              "hover:bg-zinc-800 dark:hover:bg-zinc-200",
              "shadow-sm hover:shadow",
              "transition-all duration-200",
            )}
          >
            <ArrowDownLeft className="w-3.5 h-3.5" />
            <span>Top-up</span>
          </button>
          <button
            type="button"
            className={cn(
              "flex items-center justify-center gap-2",
              "py-2 px-3 rounded-lg",
              "text-xs font-medium",
              "bg-zinc-900 dark:bg-zinc-50",
              "text-zinc-50 dark:text-zinc-900",
              "hover:bg-zinc-800 dark:hover:bg-zinc-200",
              "shadow-sm hover:shadow",
              "transition-all duration-200",
            )}
          >
            <ArrowRight className="w-3.5 h-3.5" />
            <span>More</span>
          </button>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/SCFleadmanagement/list-02.tsx">
import { cn } from "@/lib/utils"
import {
  ArrowUpRight,
  ArrowDownLeft,
  Wallet,
  ShoppingCart,
  CreditCard,
  type LucideIcon,
  ArrowRight,
} from "lucide-react"

interface Transaction {
  id: string
  title: string
  amount: string
  type: "incoming" | "outgoing"
  category: string
  icon: LucideIcon
  timestamp: string
  status: "completed" | "pending" | "failed"
}

interface List02Props {
  transactions?: Transaction[]
  className?: string
}

const categoryStyles = {
  shopping: "bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100",
  food: "bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100",
  transport: "bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100",
  entertainment: "bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100",
}

const TRANSACTIONS: Transaction[] = [
  {
    id: "1",
    title: "Apple Store Purchase",
    amount: "$999.00",
    type: "outgoing",
    category: "shopping",
    icon: ShoppingCart,
    timestamp: "Today, 2:45 PM",
    status: "completed",
  },
  {
    id: "2",
    title: "Salary Deposit",
    amount: "$4,500.00",
    type: "incoming",
    category: "transport",
    icon: Wallet,
    timestamp: "Today, 9:00 AM",
    status: "completed",
  },
  {
    id: "3",
    title: "Netflix Subscription",
    amount: "$15.99",
    type: "outgoing",
    category: "entertainment",
    icon: CreditCard,
    timestamp: "Yesterday",
    status: "pending",
  },
  {
    id: "4",
    title: "Apple Store Purchase",
    amount: "$999.00",
    type: "outgoing",
    category: "shopping",
    icon: ShoppingCart,
    timestamp: "Today, 2:45 PM",
    status: "completed",
  },
  {
    id: "5",
    title: "Supabase Subscription",
    amount: "$15.99",
    type: "outgoing",
    category: "entertainment",
    icon: CreditCard,
    timestamp: "Yesterday",
    status: "pending",
  },
  {
    id: "6",
    title: "Vercel Subscription",
    amount: "$15.99",
    type: "outgoing",
    category: "entertainment",
    icon: CreditCard,
    timestamp: "Yesterday",
    status: "pending",
  },
]

export default function List02({ transactions = TRANSACTIONS, className }: List02Props) {
  return (
    <div
      className={cn(
        "w-full max-w-xl mx-auto",
        "bg-white dark:bg-zinc-900/70",
        "border border-zinc-100 dark:border-zinc-800",
        "rounded-xl shadow-sm backdrop-blur-xl",
        className,
      )}
    >
      <div className="p-4">
        <div className="flex items-center justify-between mb-3">
          <h2 className="text-sm font-semibold text-zinc-900 dark:text-zinc-100">
            Recent Activity
            <span className="text-xs font-normal text-zinc-600 dark:text-zinc-400 ml-1">(23 transactions)</span>
          </h2>
          <span className="text-xs text-zinc-600 dark:text-zinc-400">This Month</span>
        </div>

        <div className="space-y-1">
          {transactions.map((transaction) => (
            <div
              key={transaction.id}
              className={cn(
                "group flex items-center gap-3",
                "p-2 rounded-lg",
                "hover:bg-zinc-100 dark:hover:bg-zinc-800/50",
                "transition-all duration-200",
              )}
            >
              <div
                className={cn(
                  "p-2 rounded-lg",
                  "bg-zinc-100 dark:bg-zinc-800",
                  "border border-zinc-200 dark:border-zinc-700",
                )}
              >
                <transaction.icon className="w-4 h-4 text-zinc-900 dark:text-zinc-100" />
              </div>

              <div className="flex-1 flex items-center justify-between min-w-0">
                <div className="space-y-0.5">
                  <h3 className="text-xs font-medium text-zinc-900 dark:text-zinc-100">{transaction.title}</h3>
                  <p className="text-[11px] text-zinc-600 dark:text-zinc-400">{transaction.timestamp}</p>
                </div>

                <div className="flex items-center gap-1.5 pl-3">
                  <span
                    className={cn(
                      "text-xs font-medium",
                      transaction.type === "incoming"
                        ? "text-emerald-600 dark:text-emerald-400"
                        : "text-red-600 dark:text-red-400",
                    )}
                  >
                    {transaction.type === "incoming" ? "+" : "-"}
                    {transaction.amount}
                  </span>
                  {transaction.type === "incoming" ? (
                    <ArrowDownLeft className="w-3.5 h-3.5 text-emerald-600 dark:text-emerald-400" />
                  ) : (
                    <ArrowUpRight className="w-3.5 h-3.5 text-red-600 dark:text-red-400" />
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="p-2 border-t border-zinc-100 dark:border-zinc-800">
        <button
          type="button"
          className={cn(
            "w-full flex items-center justify-center gap-2",
            "py-2 px-3 rounded-lg",
            "text-xs font-medium",
            "bg-gradient-to-r from-zinc-900 to-zinc-800",
            "dark:from-zinc-50 dark:to-zinc-200",
            "text-zinc-50 dark:text-zinc-900",
            "hover:from-zinc-800 hover:to-zinc-700",
            "dark:hover:from-zinc-200 dark:hover:to-zinc-300",
            "shadow-sm hover:shadow",
            "transform transition-all duration-200",
            "hover:-translate-y-0.5",
            "active:translate-y-0",
            "focus:outline-none focus:ring-2",
            "focus:ring-zinc-500 dark:focus:ring-zinc-400",
            "focus:ring-offset-2 dark:focus:ring-offset-zinc-900",
          )}
        >
          <span>View All Transactions</span>
          <ArrowRight className="w-3.5 h-3.5" />
        </button>
      </div>
    </div>
  )
}
</file>

<file path="components/SCFleadmanagement/list-03.tsx">
import { cn } from "@/lib/utils"
import {
  Calendar,
  type LucideIcon,
  ArrowRight,
  CheckCircle2,
  Timer,
  AlertCircle,
  PiggyBank,
  TrendingUp,
  CreditCard,
} from "lucide-react"
import React from "react"

interface ListItem {
  id: string
  title: string
  subtitle: string
  icon: LucideIcon
  iconStyle: string
  date: string
  time?: string
  amount?: string
  status: "pending" | "in-progress" | "completed"
  progress?: number
}

interface List03Props {
  items?: ListItem[]
  className?: string
}

const iconStyles = {
  savings: "bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100",
  investment: "bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100",
  debt: "bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100",
}

const statusConfig = {
  pending: {
    icon: Timer,
    class: "text-amber-600 dark:text-amber-400",
    bg: "bg-amber-100 dark:bg-amber-900/30",
  },
  "in-progress": {
    icon: AlertCircle,
    class: "text-blue-600 dark:text-blue-400",
    bg: "bg-blue-100 dark:bg-blue-900/30",
  },
  completed: {
    icon: CheckCircle2,
    class: "text-emerald-600 dark:text-emerald-400",
    bg: "bg-emerald-100 dark:bg-emerald-900/30",
  },
}

const ITEMS: ListItem[] = [
  {
    id: "1",
    title: "Emergency Fund",
    subtitle: "3 months of expenses saved",
    icon: PiggyBank,
    iconStyle: "savings",
    date: "Target: Dec 2024",
    amount: "$15,000",
    status: "in-progress",
    progress: 65,
  },
  {
    id: "2",
    title: "Stock Portfolio",
    subtitle: "Tech sector investment plan",
    icon: TrendingUp,
    iconStyle: "investment",
    date: "Target: Jun 2024",
    amount: "$50,000",
    status: "pending",
    progress: 30,
  },
  {
    id: "3",
    title: "Debt Repayment",
    subtitle: "Student loan payoff plan",
    icon: CreditCard,
    iconStyle: "debt",
    date: "Target: Mar 2025",
    amount: "$25,000",
    status: "in-progress",
    progress: 45,
  },
]

export default function List03({ items = ITEMS, className }: List03Props) {
  return (
    <div className={cn("w-full overflow-x-auto scrollbar-none", className)}>
      <div className="flex gap-3 min-w-full p-1">
        {items.map((item) => (
          <div
            key={item.id}
            className={cn(
              "flex flex-col",
              "w-[280px] shrink-0",
              "bg-white dark:bg-zinc-900/70",
              "rounded-xl",
              "border border-zinc-100 dark:border-zinc-800",
              "hover:border-zinc-200 dark:hover:border-zinc-700",
              "transition-all duration-200",
              "shadow-sm backdrop-blur-xl",
            )}
          >
            <div className="p-4 space-y-3">
              <div className="flex items-start justify-between">
                <div className={cn("p-2 rounded-lg", iconStyles[item.iconStyle as keyof typeof iconStyles])}>
                  <item.icon className="w-4 h-4" />
                </div>
                <div
                  className={cn(
                    "px-2 py-1 rounded-full text-xs font-medium flex items-center gap-1.5",
                    statusConfig[item.status].bg,
                    statusConfig[item.status].class,
                  )}
                >
                  {React.createElement(statusConfig[item.status].icon, { className: "w-3.5 h-3.5" })}
                  {item.status.charAt(0).toUpperCase() + item.status.slice(1)}
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium text-zinc-900 dark:text-zinc-100 mb-1">{item.title}</h3>
                <p className="text-xs text-zinc-600 dark:text-zinc-400 line-clamp-2">{item.subtitle}</p>
              </div>

              {typeof item.progress === "number" && (
                <div className="space-y-1.5">
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-zinc-600 dark:text-zinc-400">Progress</span>
                    <span className="text-zinc-900 dark:text-zinc-100">{item.progress}%</span>
                  </div>
                  <div className="h-1.5 bg-zinc-100 dark:bg-zinc-800 rounded-full overflow-hidden">
                    <div
                      className="h-full bg-zinc-900 dark:bg-zinc-100 rounded-full"
                      style={{ width: `${item.progress}%` }}
                    />
                  </div>
                </div>
              )}

              {item.amount && (
                <div className="flex items-center gap-1.5">
                  <span className="text-sm font-medium text-zinc-900 dark:text-zinc-100">{item.amount}</span>
                  <span className="text-xs text-zinc-600 dark:text-zinc-400">target</span>
                </div>
              )}

              <div className="flex items-center text-xs text-zinc-600 dark:text-zinc-400">
                <Calendar className="w-3.5 h-3.5 mr-1.5" />
                <span>{item.date}</span>
              </div>
            </div>

            <div className="mt-auto border-t border-zinc-100 dark:border-zinc-800">
              <button
                className={cn(
                  "w-full flex items-center justify-center gap-2",
                  "py-2.5 px-3",
                  "text-xs font-medium",
                  "text-zinc-600 dark:text-zinc-400",
                  "hover:text-zinc-900 dark:hover:text-zinc-100",
                  "hover:bg-zinc-100 dark:hover:bg-zinc-800/50",
                  "transition-colors duration-200",
                )}
              >
                View Details
                <ArrowRight className="w-3.5 h-3.5" />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}
</file>

<file path="components/SCFleadmanagement/program-review-leads.tsx">
"use client"

import { useState, useEffect } from "react"
import { Search, ChevronDown, Filter, Download, CalendarIcon, CheckCircle, XCircle, ChevronUp } from "lucide-react"
import { format } from "date-fns"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger 
} from "@/components/ui/dropdown-menu"
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { cn } from "@/lib/utils"
import { Checkbox } from "@/components/ui/checkbox"
import { useRouter } from "next/navigation"
import { useAuth } from "@/components/auth-provider"
import EditLeadModal from "./edit-lead-modal"

import db from "@/lib/db"
import { stageToFlagMap, getLeadWorkflowStateByProcessedLeadId } from "@/lib/lead-workflow"
import { safeDbOperation } from "@/lib/db-init"

// Flag colors for visual distinction
const flagColors: Record<string, string> = {
  "With RM": "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300 border-blue-300 dark:border-blue-900/50",
  "With PSM": "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300 border-purple-300 dark:border-purple-900/50",
  "Dropped": "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300 border-red-300 dark:border-red-900/50",
  "Closed": "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300 border-gray-300 dark:border-gray-900/50",
  "Program Review": "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300 border-amber-300 dark:border-amber-900/50"
};

// Helper to check if we're in a browser environment
const isBrowser = () => typeof window !== "undefined";

interface Lead {
  id: string
  processedLeadId: string
  workflowStateId: string
  dealerName: string
  anchorName: string
  rmName: string
  rmId: string
  psmName: string
  psmId: string
  lastUpdated: string
  ageingBucket: string
  lastActionDate: string
  flag: string
  currentStage: string
}

export default function ProgramReviewLeads() {
  const { user, userRole } = useAuth();
  const [searchTerm, setSearchTerm] = useState("")
  const [sortField, setSortField] = useState<keyof Lead | null>("lastUpdated")
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc")
  const [selectedLead, setSelectedLead] = useState<Lead | null>(null)
  const [isEditModalOpen, setIsEditModalOpen] = useState(false)
  const [actualLeads, setActualLeads] = useState<Lead[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [mounted, setMounted] = useState(false)
  const router = useRouter()

  // Set mounted flag on client side
  useEffect(() => {
    setMounted(true)
  }, [])

  // Fetch leads data for admin review
  useEffect(() => {
    // Skip fetching on server-side or if not mounted
    if (!isBrowser() || !mounted) return;
    
    fetchAdminReviewLeads();
  }, [mounted]);

  const fetchAdminReviewLeads = async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      // Get all workflow states with AdminReviewPending stage
      const workflowStates = await safeDbOperation(() => 
        db.lead_workflow_states
          .where('currentStage')
          .equals('AdminReviewPending')
          .toArray(), 
        []
      );
      
      console.log(`[Program Review] Found ${workflowStates.length} leads in admin review stage`);
      
      // Cache for RM and PSM names to avoid duplicate lookups
      const rmNamesMap = new Map<string, string>();
      const psmNamesMap = new Map<string, string>();
      
      // Process each workflow state to get lead details
      const leadsPromises = workflowStates.map(async (workflowState) => {
        try {
          // Get the processed lead data
          const processedLead = await safeDbOperation(
            () => db.processed_leads.get(workflowState.processedLeadId),
            null
          );
          
          if (!processedLead) {
            console.warn(`[Program Review] Processed lead not found for ${workflowState.processedLeadId}`);
            return null;
          }
          
          // Get RM name from cache or lookup
          let rmName = "Unknown RM";
          let rmId = workflowState.currentAssigneeAdid;
          
          // If the lead is in admin review, the current assignee might be 'system'
          // Use the originalData to find the RM if available
          if (rmId === 'system' && processedLead.assignedRmAdid) {
            rmId = processedLead.assignedRmAdid;
          }
          
          if (rmNamesMap.has(rmId)) {
            rmName = rmNamesMap.get(rmId) || "Unknown RM";
          } else {
            // Try to find RM in hierarchy_master table
            const hierarchyRecord = await safeDbOperation(
              () => db.hierarchy_master
                .where("empAdid")
                .equals(rmId)
                .first(),
              null
            );
            
            if (hierarchyRecord) {
              rmName = hierarchyRecord.fullName || hierarchyRecord.FullName || hierarchyRecord.employeeName || "Unknown RM";
              rmNamesMap.set(rmId, rmName);
            }
          }
          
          // Get PSM name from cache or lookup
          let psmName = "Unknown PSM";
          let psmId = workflowState.psmAdid || "unassigned";
          
          if (psmNamesMap.has(psmId)) {
            psmName = psmNamesMap.get(psmId) || "N/A";
          } else {
            // Try to find PSM in anchor_master table first
            const anchorRecords = await safeDbOperation(
              () => db.anchor_master
                .where("PSMADID")
                .equals(psmId)
                .toArray(),
              []
            );
            
            if (anchorRecords.length > 0) {
              psmName = anchorRecords[0].PSMName || "N/A";
              psmNamesMap.set(psmId, psmName);
            } else {
              // If not found, try the HierarchyMaster table
              const hierarchyRecord = await safeDbOperation(
                () => db.hierarchy_master
                  .where("empAdid")
                  .equals(psmId)
                  .first(),
                null
              );
              
              if (hierarchyRecord) {
                psmName = hierarchyRecord.fullName || hierarchyRecord.FullName || hierarchyRecord.employeeName || "Unknown PSM";
                psmNamesMap.set(psmId, psmName);
              }
            }
          }
          
          // Map flag from current stage
          const flag = stageToFlagMap[workflowState.currentStage] || "Unknown";
          
          // Get dealer name and anchor name from original data
          const dealerName = processedLead.originalData["Name of the Firm"] || "Unknown Dealer";
          const anchorName = processedLead.anchorNameSelected || processedLead.originalData["Name of the Anchor"] || "Unknown Anchor";
          
          // Create a lead object
          return {
            id: processedLead.id,
            processedLeadId: processedLead.id,
            workflowStateId: workflowState.id,
            dealerName,
            anchorName,
            rmName,
            rmId,
            psmName,
            psmId,
            lastUpdated: workflowState.updatedAt,
            ageingBucket: getAgeingBucket(workflowState.updatedAt),
            lastActionDate: formatDate(workflowState.lastCommunicationTimestamp),
            flag,
            currentStage: workflowState.currentStage
          };
        } catch (err) {
          console.error(`[Program Review] Error processing workflow state ${workflowState.id}:`, err);
          return null;
        }
      });
      
      const leads = (await Promise.all(leadsPromises)).filter(lead => lead !== null) as Lead[];
      console.log(`[Program Review] Processed ${leads.length} valid leads`);
      
      setActualLeads(leads);
    } catch (err) {
      console.error("[Program Review] Error fetching admin review leads:", err);
      setError("Failed to load leads for program review. Please try again later.");
    } finally {
      setIsLoading(false);
    }
  };

  // Helper function to format dates
  const formatDate = (dateString: string): string => {
    try {
      return format(new Date(dateString), "dd MMM yyyy");
    } catch {
      return "Invalid Date";
    }
  };

  // Helper function to determine ageing bucket based on date
  const getAgeingBucket = (dateString: string): string => {
    try {
      const date = new Date(dateString);
      const now = new Date();
      const diffTime = Math.abs(now.getTime() - date.getTime());
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      if (diffDays <= 2) return "0-2 Days";
      if (diffDays <= 5) return "3-5 Days";
      if (diffDays <= 10) return "6-10 Days";
      return "10+ Days";
    } catch {
      return "Unknown";
    }
  };

  // Filter and sort leads
  const filteredLeads = actualLeads
    .filter(lead => {
      const searchLower = searchTerm.toLowerCase();
      return (
        lead.dealerName.toLowerCase().includes(searchLower) ||
        lead.anchorName.toLowerCase().includes(searchLower) ||
        lead.rmName.toLowerCase().includes(searchLower) ||
        lead.psmName.toLowerCase().includes(searchLower) ||
        lead.flag.toLowerCase().includes(searchLower)
      );
    })
    .sort((a, b) => {
      if (!sortField) return 0;
      
      const aValue = a[sortField];
      const bValue = b[sortField];
      
      if (sortDirection === "asc") {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

  // Handle opening the edit modal
  const handleEditLead = (lead: Lead) => {
    setSelectedLead(lead);
    setIsEditModalOpen(true);
  };

  // Handle sorting
  const handleSort = (field: keyof Lead) => {
    if (sortField === field) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortField(field);
      setSortDirection("desc");
    }
  };

  // Handle view lead details
  const handleViewDetails = (leadId: string) => {
    router.push(`/lead-details/${leadId}`);
  };

  // Handle modal save
  const handleSave = () => {
    setIsEditModalOpen(false);
    fetchAdminReviewLeads(); // Refresh leads after edit
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col items-start">
        <h1 className="text-2xl font-bold">Program Review</h1>
        <p className="text-sm text-gray-500 dark:text-gray-400">
          Manage leads that require program review
        </p>
      </div>
      
      <div className="flex items-center justify-between">
        <div className="relative w-80">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
          <Input
            type="search"
            placeholder="Search leads..."
            className="pl-9 w-full"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <div className="flex items-center gap-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="gap-1">
                <Filter className="h-4 w-4" />
                Filter
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-48">
              <DropdownMenuItem onClick={() => setSearchTerm("")}>
                Clear Filters
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          <Button variant="outline" size="sm" className="gap-1">
            <Download className="h-4 w-4" />
            Export
          </Button>
          <Button 
            variant="outline" 
            size="sm" 
            className="gap-1"
            onClick={fetchAdminReviewLeads}
          >
            Refresh
          </Button>
        </div>
      </div>

      <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] overflow-hidden shadow-sm">
        {isLoading ? (
          <div className="flex justify-center items-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-800 dark:border-white"></div>
          </div>
        ) : error ? (
          <div className="p-4">
            <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900/30 rounded-md p-4 text-center">
              <p className="text-red-800 dark:text-red-300">{error}</p>
              <Button 
                variant="outline" 
                size="sm" 
                className="mt-2"
                onClick={fetchAdminReviewLeads}
              >
                Try Again
              </Button>
            </div>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="bg-gray-50 dark:bg-[#1F1F23] hover:bg-gray-50 dark:hover:bg-[#1F1F23]">
                  <TableHead className="px-4 py-3 text-left font-medium">
                    <div
                      className="flex items-center cursor-pointer"
                      onClick={() => handleSort("dealerName")}
                    >
                      Dealer Name
                      {sortField === "dealerName" && (
                        sortDirection === "asc" ? 
                          <ChevronUp className="ml-1 h-4 w-4" /> : 
                          <ChevronDown className="ml-1 h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium">
                    <div
                      className="flex items-center cursor-pointer"
                      onClick={() => handleSort("anchorName")}
                    >
                      Anchor
                      {sortField === "anchorName" && (
                        sortDirection === "asc" ? 
                          <ChevronUp className="ml-1 h-4 w-4" /> : 
                          <ChevronDown className="ml-1 h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium">
                    <div
                      className="flex items-center cursor-pointer"
                      onClick={() => handleSort("rmName")}
                    >
                      RM
                      {sortField === "rmName" && (
                        sortDirection === "asc" ? 
                          <ChevronUp className="ml-1 h-4 w-4" /> : 
                          <ChevronDown className="ml-1 h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium">
                    <div
                      className="flex items-center cursor-pointer"
                      onClick={() => handleSort("psmName")}
                    >
                      PSM
                      {sortField === "psmName" && (
                        sortDirection === "asc" ? 
                          <ChevronUp className="ml-1 h-4 w-4" /> : 
                          <ChevronDown className="ml-1 h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium">
                    <div
                      className="flex items-center cursor-pointer"
                      onClick={() => handleSort("lastActionDate")}
                    >
                      Last Action
                      {sortField === "lastActionDate" && (
                        sortDirection === "asc" ? 
                          <ChevronUp className="ml-1 h-4 w-4" /> : 
                          <ChevronDown className="ml-1 h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium">
                    <div
                      className="flex items-center cursor-pointer"
                      onClick={() => handleSort("ageingBucket")}
                    >
                      Ageing
                      {sortField === "ageingBucket" && (
                        sortDirection === "asc" ? 
                          <ChevronUp className="ml-1 h-4 w-4" /> : 
                          <ChevronDown className="ml-1 h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium">
                    <div
                      className="flex items-center cursor-pointer"
                      onClick={() => handleSort("flag")}
                    >
                      Status
                      {sortField === "flag" && (
                        sortDirection === "asc" ? 
                          <ChevronUp className="ml-1 h-4 w-4" /> : 
                          <ChevronDown className="ml-1 h-4 w-4" />
                      )}
                    </div>
                  </TableHead>
                  <TableHead className="px-4 py-3 text-right font-medium">
                    Actions
                  </TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredLeads.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={8} className="text-center py-6 text-gray-500 dark:text-gray-400">
                      No leads requiring program review found
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredLeads.map((lead) => (
                    <TableRow 
                      key={lead.id}
                      className="hover:bg-gray-50 dark:hover:bg-[#1F1F23]/50 cursor-pointer"
                      onClick={() => handleViewDetails(lead.id)}
                    >
                      <TableCell className="px-4 py-3 font-medium text-gray-900 dark:text-white">
                        {lead.dealerName}
                      </TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">
                        {lead.anchorName}
                      </TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">
                        {lead.rmName}
                      </TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">
                        {lead.psmName}
                      </TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">
                        {lead.lastActionDate}
                      </TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">
                        {lead.ageingBucket}
                      </TableCell>
                      <TableCell className="px-4 py-3">
                        <Badge
                          variant="outline"
                          className={cn(
                            "border px-2 py-0.5 text-xs font-medium",
                            flagColors[lead.flag] || "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300"
                          )}
                        >
                          {lead.flag}
                        </Badge>
                      </TableCell>
                      <TableCell className="px-4 py-3 text-right" onClick={(e) => e.stopPropagation()}>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleEditLead(lead);
                          }}
                        >
                          Edit
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
        )}
      </div>

      {selectedLead && (
        <EditLeadModal
          lead={selectedLead}
          isOpen={isEditModalOpen}
          onClose={() => setIsEditModalOpen(false)}
          onSave={handleSave}
        />
      )}
    </div>
  )
}
</file>

<file path="components/SCFleadmanagement/smartfin-update.tsx">
"use client"

import { useState, useEffect } from "react"
import { MasterService } from "@/lib/db"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import MasterLayout from "@/components/SCFleadmanagement/masters/master-layout"
import type { SmartfinStatusUpdate } from "@/lib/db"
import { Loader2, ChevronLeft, ChevronRight, Search } from "lucide-react"
import { SMARTFIN_UPDATE_TEMPLATE_HEADERS } from "@/lib/constants"
import { safeDbOperation } from "@/lib/db-init"

export default function SmartfinStatusUpdateComponent() {
  const [records, setRecords] = useState<SmartfinStatusUpdate[]>([])
  const [loading, setLoading] = useState<boolean>(true)
  const [error, setError] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState<number>(1)
  const [itemsPerPage] = useState<number>(10)
  const [totalRecords, setTotalRecords] = useState<number>(0)
  const [searchTerm, setSearchTerm] = useState<string>("")
  const [lastUploadTimestamp, setLastUploadTimestamp] = useState<string | null>(null)

  // Load records when component mounts or page changes
  useEffect(() => {
    const fetchRecords = async () => {
      setLoading(true)
      setError(null)
      
      try {
        const offset = (currentPage - 1) * itemsPerPage
        
        // Use safeDbOperation to handle potential database errors
        const result = await safeDbOperation(
          async () => MasterService.getRecords(
            'smartfin_status_updates',
            {}, // No filters initially
            undefined, // No specific sort field
            itemsPerPage,
            offset
          ),
          { success: false, data: [] }
        )

        if (result.success && result.data) {
          setRecords(result.data as SmartfinStatusUpdate[])
          
          // Get total count
          const countResult = await safeDbOperation(
            async () => MasterService.getTotalRecords('smartfin_status_updates'),
            { success: false }
          )
          
          if (countResult.success && countResult.count !== undefined) {
            setTotalRecords(countResult.count)
          }
        } else {
          setError("Failed to fetch records")
        }
      } catch (err) {
        console.error("Error fetching records:", err)
        setError("An error occurred while fetching records")
      } finally {
        setLoading(false)
      }
    }

    fetchRecords()
    
    // Check if there's a last upload timestamp in localStorage
    const timestamp = localStorage.getItem('lastUpload_smartfin_status_updates')
    if (timestamp) {
      setLastUploadTimestamp(timestamp)
    }
  }, [currentPage, itemsPerPage])

  // Handle search
  const handleSearch = async () => {
    setLoading(true)
    setError(null)
    setCurrentPage(1) // Reset to first page when searching
    
    try {
      let result;
      
      if (searchTerm.trim() === "") {
        // If search is cleared, get all records
        result = await safeDbOperation(
          async () => MasterService.getRecords(
            'smartfin_status_updates',
            {},
            undefined,
            itemsPerPage,
            0
          ),
          { success: false, data: [] }
        )
      } else {
        // Search in applicationNo, firmName, status, or rmName fields
        // Note: In a real implementation, you would need a better search method,
        // as this simple approach won't work for complex searches across multiple fields
        result = await safeDbOperation(
          async () => MasterService.getRecords(
            'smartfin_status_updates',
            { applicationNo: searchTerm }, // This is just a simple exact match
            undefined,
            itemsPerPage,
            0
          ),
          { success: false, data: [] }
        )
      }

      if (result.success && result.data) {
        setRecords(result.data as SmartfinStatusUpdate[])
      } else {
        setError("Search failed")
      }
    } catch (err) {
      console.error("Error searching records:", err)
      setError("An error occurred during search")
    } finally {
      setLoading(false)
    }
  }

  // Pagination handlers
  const handlePrevPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1)
    }
  }

  const handleNextPage = () => {
    if (currentPage < Math.ceil(totalRecords / itemsPerPage)) {
      setCurrentPage(currentPage + 1)
    }
  }

  // Format dates for display
  const formatDate = (dateString: string) => {
    if (!dateString) return "-"
    try {
      return new Date(dateString).toLocaleDateString()
    } catch (e) {
      return dateString
    }
  }

  return (
    <MasterLayout
      title="Smartfin Status Update"
      description="Upload and view Smartfin application status updates"
      storeName="smartfin_status_updates"
      lastUpdated={
        lastUploadTimestamp 
          ? {
              date: new Date(lastUploadTimestamp).toLocaleString(),
              user: "System"
            }
          : undefined
      }
    >
      <div className="space-y-4">
        <div className="flex flex-col sm:flex-row justify-between items-center space-y-2 sm:space-y-0 sm:space-x-2">
          <div className="flex w-full sm:w-auto space-x-2">
            <div className="flex-1 sm:w-64">
              <Label htmlFor="search" className="sr-only">
                Search
              </Label>
              <div className="relative">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
                <Input
                  id="search"
                  type="search"
                  placeholder="Search by application no, firm name..."
                  className="pl-8"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      handleSearch()
                    }
                  }}
                />
              </div>
            </div>
            <Button onClick={handleSearch}>Search</Button>
          </div>
        </div>

        {error && (
          <div className="bg-red-50 text-red-600 p-3 rounded-md border border-red-200">
            {error}
          </div>
        )}

        <div className="border rounded-md">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Application No</TableHead>
                <TableHead>Created Date</TableHead>
                <TableHead>Firm Name</TableHead>
                <TableHead>Application Type</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Requested Amount</TableHead>
                <TableHead>Sanctioned Amount</TableHead>
                <TableHead>RM Name</TableHead>
                <TableHead>RM TAT</TableHead>
                <TableHead>Total TAT</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={10} className="text-center py-10">
                    <div className="flex justify-center items-center">
                      <Loader2 className="h-6 w-6 animate-spin text-gray-500 dark:text-gray-400" />
                      <span className="ml-2">Loading records...</span>
                    </div>
                  </TableCell>
                </TableRow>
              ) : records.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={10} className="text-center py-10 text-gray-500 dark:text-gray-400">
                    No records found
                  </TableCell>
                </TableRow>
              ) : (
                records.map((record) => (
                  <TableRow key={record.applicationNo}>
                    <TableCell className="font-medium">{record.applicationNo}</TableCell>
                    <TableCell>{formatDate(record.createdDate)}</TableCell>
                    <TableCell>{record.firmName}</TableCell>
                    <TableCell>{record.applicationType}</TableCell>
                    <TableCell>{record.status}</TableCell>
                    <TableCell>{record.requestedAmount}</TableCell>
                    <TableCell>{record.sanctionedAmount}</TableCell>
                    <TableCell>{record.rmName}</TableCell>
                    <TableCell>{record.rmTAT}</TableCell>
                    <TableCell>{record.totalTAT}</TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </div>

        {/* Pagination */}
        <div className="flex justify-between items-center">
          <div className="text-sm text-gray-500 dark:text-gray-400">
            Showing {records.length > 0 ? (currentPage - 1) * itemsPerPage + 1 : 0} to{" "}
            {Math.min(currentPage * itemsPerPage, totalRecords)} of {totalRecords} records
          </div>
          <div className="flex space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={handlePrevPage}
              disabled={currentPage === 1 || loading}
            >
              <ChevronLeft className="h-4 w-4 mr-1" />
              Previous
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={handleNextPage}
              disabled={currentPage >= Math.ceil(totalRecords / itemsPerPage) || loading}
            >
              Next
              <ChevronRight className="h-4 w-4 ml-1" />
            </Button>
          </div>
        </div>
      </div>
    </MasterLayout>
  )
}
</file>

<file path="components/ui/accordion.tsx">
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="components/ui/alert-dialog.tsx">
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="components/ui/aspect-ratio.tsx">
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/ui/calendar.tsx">
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/carousel.tsx">
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="components/ui/chart.tsx">
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="components/ui/checkbox.tsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="components/ui/collapsible.tsx">
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="components/ui/command.tsx">
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="components/ui/context-menu.tsx">
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="components/ui/drawer.tsx">
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="components/ui/form.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="components/ui/hover-card.tsx">
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="components/ui/input-otp.tsx">
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="components/ui/menubar.tsx">
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="components/ui/popover.tsx">
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="components/ui/radio-group.tsx">
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="components/ui/resizable.tsx">
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="components/ui/scroll-area.tsx">
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="components/ui/sheet.tsx">
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="components/ui/sidebar.tsx">
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="components/ui/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="components/ui/sonner.tsx">
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
</file>

<file path="components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="components/ui/toast.tsx">
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="components/ui/toaster.tsx">
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="components/ui/toggle-group.tsx">
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="components/ui/toggle.tsx">
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="components/ui/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="components/ui/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="components/app-provider.tsx">
"use client"

import React, { createContext, useContext, ReactNode } from 'react'

interface AppContextType {
  isAppReady: boolean
}

const defaultContext: AppContextType = {
  isAppReady: false
}

const AppContext = createContext<AppContextType>(defaultContext)

export const useApp = () => useContext(AppContext)

export function AppProvider({ children }: { children: ReactNode }) {
  const [isAppReady, setIsAppReady] = React.useState(false)

  // Mark the app as ready after first render
  React.useEffect(() => {
    setIsAppReady(true)
  }, [])

  return (
    <AppContext.Provider 
      value={{ 
        isAppReady
      }}
    >
      {children}
    </AppContext.Provider>
  )
}
</file>

<file path="components/route-guard.tsx">
"use client"

import { useEffect } from "react"
import { useRouter, usePathname } from "next/navigation"
import { useAuth } from "./auth-provider"

export default function RouteGuard({ children }: { children: React.ReactNode }) {
  const { isAuthenticated, hasAccess, userRole } = useAuth()
  const router = useRouter()
  const pathname = usePathname()

  useEffect(() => {
    // Skip for login page
    if (pathname === "/login") return

    // Redirect to login if not authenticated
    if (!isAuthenticated) {
      router.push("/login")
      return
    }

    // Redirect to appropriate page if current page is not accessible
    if (!hasAccess(pathname)) {
      if (userRole === "rm") {
        router.push("/rm-leads")
      } else {
        router.push("/dashboard")
      }
    }
  }, [isAuthenticated, pathname, router, hasAccess, userRole])

  // Only render children if user has access to this route or it's the login page
  if (pathname === "/login" || (isAuthenticated && hasAccess(pathname))) {
    return <>{children}</>
  }

  // Return null while redirecting
  return null
}
</file>

<file path="components/theme-provider.tsx">
"use client"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import type { ThemeProviderProps } from "next-themes"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</file>

<file path="components/theme-toggle.tsx">
"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

export function ThemeToggle() {
  const [mounted, setMounted] = React.useState(false)
  const { theme, setTheme } = useTheme()

  React.useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null
  }

  return (
    <button
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      className="relative p-2 hover:bg-gray-100 dark:hover:bg-[#1F1F23] rounded-full transition-colors"
    >
      <Sun className="h-5 w-5 text-gray-600 dark:text-gray-300 transition-all dark:hidden" />
      <Moon className="h-5 w-5 text-gray-600 dark:text-gray-300 transition-all hidden dark:block" />
      <span className="sr-only">Toggle theme</span>
    </button>
  )
}
</file>

<file path="hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="lib/downloadTemplate.ts">
import * as XLSX from 'xlsx';

/**
 * Downloads an Excel file with only header columns.
 * @param headers Array of header strings
 * @param filename Name of the file to download (e.g., 'template.xlsx')
 */
export function downloadTemplate(headers: string[], filename: string) {
  // Create a worksheet with headers only (first row)
  const ws = XLSX.utils.aoa_to_sheet([headers]);
  // Create a new workbook and append the worksheet
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'Template');
  // Write the workbook and trigger download
  XLSX.writeFile(wb, filename);
}
</file>

<file path="lib/smartfin-api.ts">
/**
 * Smartfin API Integration - Simulation Functions
 * 
 * This file contains functions that simulate the Smartfin API integration.
 * In a real implementation, these would make actual API calls to the Smartfin service.
 */

import { ProcessedLead } from './db';

/**
 * Simulates uploading a lead to Smartfin
 * @param lead The lead to upload
 * @returns Result of the Smartfin upload operation
 */
export async function uploadLeadToSmartfin(lead: ProcessedLead): Promise<{
  success: boolean;
  smartfinDealerId?: string;
  errorCode?: string;
  errorDescription?: string;
}> {
  // Simulate API call with 80% success rate
  const isSuccess = Math.random() < 0.8;
  
  if (isSuccess) {
    // Generate a Smartfin Dealer ID
    const smartfinDealerId = `SMARTFIN_DEALER_${lead.uploadBatchId}_${lead.originalRowNumber}`;
    
    // Simulate a delay for the API call (100-500ms)
    await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 400));
    
    return {
      success: true,
      smartfinDealerId
    };
  } else {
    // Simulate various error scenarios
    const errorCodes = ["SF001", "SF002", "SF003", "SF004"];
    const errorDescriptions = [
      "Dealer already exists in Smartfin",
      "Invalid dealer data format",
      "Smartfin API connection error",
      "Dealer verification failed"
    ];
    
    const randomIndex = Math.floor(Math.random() * errorCodes.length);
    
    // Simulate a delay for the API call (100-500ms)
    await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 400));
    
    return {
      success: false,
      errorCode: errorCodes[randomIndex],
      errorDescription: errorDescriptions[randomIndex]
    };
  }
}

/**
 * Get Smartfin dealer details - simulated
 * @param dealerId The Smartfin dealer ID
 * @returns Simulated dealer details or error
 */
export async function getSmartfinDealerDetails(dealerId: string): Promise<{
  success: boolean;
  data?: {
    dealerId: string;
    name: string;
    status: string;
    createdAt: string;
  };
  errorCode?: string;
  errorDescription?: string;
}> {
  // Simulate API call with 90% success rate
  const isSuccess = Math.random() < 0.9;
  
  if (isSuccess) {
    // Simulate a delay for the API call (100-300ms)
    await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));
    
    return {
      success: true,
      data: {
        dealerId,
        name: `Dealer ${dealerId.slice(-5)}`,
        status: "Active",
        createdAt: new Date().toISOString()
      }
    };
  } else {
    // Simulate error scenario
    return {
      success: false,
      errorCode: "SF101",
      errorDescription: "Dealer not found in Smartfin"
    };
  }
}
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="public/placeholder-logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>
</file>

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path=".env.local copy.example">
# This is an example .env.local file
# Copy this file to .env.local and replace the values with your actual API keys

# OpenAI API Key for AI summarization features
# Get your API key from https://platform.openai.com/account/api-keys
NEXT_PUBLIC_OPENAI_API_KEY=your_openai_api_key_here
</file>

<file path=".gitignore">
# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="next.config.mjs">
let userConfig = undefined
try {
  userConfig = await import('./v0-user-next.config')
} catch (e) {
  // ignore error
}

/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
  experimental: {
    webpackBuildWorker: true,
    parallelServerBuildTraces: true,
    parallelServerCompiles: true,
  },
}

mergeConfig(nextConfig, userConfig)

function mergeConfig(nextConfig, userConfig) {
  if (!userConfig) {
    return
  }

  for (const key in userConfig) {
    if (
      typeof nextConfig[key] === 'object' &&
      !Array.isArray(nextConfig[key])
    ) {
      nextConfig[key] = {
        ...nextConfig[key],
        ...userConfig[key],
      }
    } else {
      nextConfig[key] = userConfig[key]
    }
  }
}

export default nextConfig
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: ["./pages/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}", "./app/**/*.{ts,tsx}", "./src/**/*.{ts,tsx}", "*.{js,ts,jsx,tsx,mdx}"],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/(dashboard)/configuration/escalation-rules/page.tsx">
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { Input } from "@/components/ui/input"
import { Plus, Trash2 } from "lucide-react"
import { Checkbox } from "@/components/ui/checkbox"

interface EscalationRule {
  id: string
  condition: string
  timeframe: number
  escalationType: "rm" | "cbl" | "rbl" | "psm" | "admin"
  escalationCC: string[]
  startStage: string
  endStage: string
  emailTemplate: string
}

export default function EscalationRules() {
  const [rules, setRules] = useState<EscalationRule[]>([
    {
      id: "1",
      condition: "No Response",
      timeframe: 24,
      escalationType: "rm",
      escalationCC: [],
      startStage: "",
      endStage: "",
      emailTemplate: ""
    },
  ])

  const addNewRule = () => {
    const newRule: EscalationRule = {
      id: Date.now().toString(),
      condition: "",
      timeframe: 24,
      escalationType: "rm",
      escalationCC: [],
      startStage: "",
      endStage: "",
      emailTemplate: ""
    }
    setRules([...rules, newRule])
  }

  const deleteRule = (id: string) => {
    setRules(rules.filter(rule => rule.id !== id))
  }

  const updateRule = (id: string, field: keyof EscalationRule, value: any) => {
    setRules(rules.map(rule => 
      rule.id === id ? { ...rule, [field]: value } : rule
    ))
  }

  return (
    <main className="flex-1 ml-0 pt-16 px-4 md:px-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Escalation Rules</h1>
        <Button onClick={addNewRule} className="gap-2">
          <Plus className="h-4 w-4" />
          Add Rule
        </Button>
      </div>

      <Card className="border-0 shadow-none bg-transparent">
        <CardHeader className="px-0">
          <CardTitle>Lead Escalation Configuration</CardTitle>
          <CardDescription>
            Configure rules for automatic lead escalation based on conditions and timeframes
          </CardDescription>
        </CardHeader>
        <CardContent className="px-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Condition</TableHead>
                <TableHead>Start Stage</TableHead>
                <TableHead>End Stage</TableHead>
                <TableHead>Timeframe (in Hrs)</TableHead>
                <TableHead>Escalate To</TableHead>
                <TableHead>Escalation CC</TableHead>
                <TableHead>Email Template</TableHead>
                <TableHead className="w-[100px]">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {rules.map((rule) => (
                <TableRow key={rule.id}>
                  <TableCell>
                    <Select
                      value={rule.condition}
                      onValueChange={(value) => updateRule(rule.id, "condition", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select condition" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="No Response">No Response</SelectItem>
                        <SelectItem value="Dealer Not Interested">Dealer Not Interested</SelectItem>
                        <SelectItem value="Under Follow-up">Under Follow-up</SelectItem>
                      </SelectContent>
                    </Select>
                  </TableCell>
                  <TableCell>
                    <Select
                      value={rule.startStage}
                      onValueChange={(value) => updateRule(rule.id, "startStage", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Start Stage" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="With RM">With RM</SelectItem>
                        <SelectItem value="Escalation 1">Escalation 1</SelectItem>
                        <SelectItem value="Escalation 2">Escalation 2</SelectItem>
                        <SelectItem value="With PSM">With PSM</SelectItem>
                        <SelectItem value="Resent to RM">Resent to RM</SelectItem>
                        <SelectItem value="WIP in Smartfin">WIP in Smartfin</SelectItem>
                        <SelectItem value="Dropped">Dropped</SelectItem>
                      </SelectContent>
                    </Select>
                  </TableCell>
                  <TableCell>
                    <Select
                      value={rule.endStage}
                      onValueChange={(value) => updateRule(rule.id, "endStage", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="End Stage" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="With RM">With RM</SelectItem>
                        <SelectItem value="Escalation 1">Escalation 1</SelectItem>
                        <SelectItem value="Escalation 2">Escalation 2</SelectItem>
                        <SelectItem value="With PSM">With PSM</SelectItem>
                        <SelectItem value="Resent to RM">Resent to RM</SelectItem>
                        <SelectItem value="WIP in Smartfin">WIP in Smartfin</SelectItem>
                        <SelectItem value="Dropped">Dropped</SelectItem>
                      </SelectContent>
                    </Select>
                  </TableCell>
                  <TableCell>
                    <Input
                      type="number"
                      value={rule.timeframe}
                      onChange={(e) => updateRule(rule.id, "timeframe", parseInt(e.target.value))}
                      className="w-32"
                    />
                  </TableCell>
                  <TableCell>
                    <Select
                      value={rule.escalationType}
                      onValueChange={(value: "rm" | "cbl" | "rbl" | "psm" | "admin") => updateRule(rule.id, "escalationType", value)}
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="rm">RM</SelectItem>
                        <SelectItem value="cbl">CBL</SelectItem>
                        <SelectItem value="rbl">RBL</SelectItem>
                        <SelectItem value="psm">PSM</SelectItem>
                        <SelectItem value="admin">Admin</SelectItem>
                      </SelectContent>
                    </Select>
                  </TableCell>
                  <TableCell>
                    <div className="flex flex-col gap-1">
                      {["rm", "cbl", "rbl", "psm", "admin"].map((role) => (
                        <label key={role} className="flex items-center gap-2 text-sm">
                          <Checkbox
                            checked={rule.escalationCC.includes(role)}
                            onCheckedChange={(checked) => {
                              const newCC = checked
                                ? [...rule.escalationCC, role]
                                : rule.escalationCC.filter((r) => r !== role)
                              updateRule(rule.id, "escalationCC", newCC)
                            }}
                          />
                          {role.toUpperCase()}
                        </label>
                      ))}
                    </div>
                  </TableCell>
                  <TableCell>
                    <Select
                      value={rule.emailTemplate}
                      onValueChange={(value) => updateRule(rule.id, "emailTemplate", value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select Template" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="Reminder Email">Reminder Email</SelectItem>
                        <SelectItem value="Escalation Email">Escalation Email</SelectItem>
                        <SelectItem value="Escalation Email 2">Escalation Email 2</SelectItem>
                        <SelectItem value="No RM Response">No RM Response</SelectItem>
                        <SelectItem value="Lead Dropped">Lead Dropped</SelectItem>
                      </SelectContent>
                    </Select>
                  </TableCell>
                  <TableCell>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => deleteRule(rule.id)}
                      className="text-red-500 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-950/20"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>

          <div className="mt-6 flex justify-end gap-4">
            <Button variant="outline">Cancel</Button>
            <Button>Save Changes</Button>
          </div>
        </CardContent>
      </Card>
    </main>
  )
}
</file>

<file path="app/lead-details/[id]/page.tsx">
"use client"

import dynamic from 'next/dynamic'
import Layout from "@/components/SCFleadmanagement/layout"
import { Suspense } from "react"
import { useParams } from "next/navigation"

// Use dynamic import with SSR disabled to prevent hydration issues
const LeadDetails = dynamic(() => import("@/components/SCFleadmanagement/lead-details"), {
  ssr: false,
})

export default function LeadDetailsPage() {
  const params = useParams();
  const leadId = params.id as string;

  return (
    <Layout>
      <Suspense fallback={<div>Loading lead details...</div>}>
        <LeadDetails leadId={leadId} />
      </Suspense>
    </Layout>
  )
}
</file>

<file path="app/rm-inbox/page.tsx">
"use client"

import dynamic from 'next/dynamic'
import Layout from "@/components/SCFleadmanagement/layout"
import { Suspense } from "react"

// Use dynamic import with SSR disabled to prevent hydration issues
const RMInbox = dynamic(() => import("@/components/SCFleadmanagement/rm-inbox"), {
  ssr: false,
})

export default function RMInboxPage() {
  return (
    <Layout>
      <Suspense fallback={<div>Loading inbox...</div>}>
        <RMInbox />
      </Suspense>
    </Layout>
  )
}
</file>

<file path="app/rm-leads/page.tsx">
"use client"

import dynamic from 'next/dynamic'
import Layout from "@/components/SCFleadmanagement/layout"
import { Suspense } from "react"

// Use dynamic import with SSR disabled to prevent hydration issues
const RMLeads = dynamic(() => import("@/components/SCFleadmanagement/rm-leads"), {
  ssr: false,
})

export default function RMLeadsPage() {
  return (
    <Layout>
      <Suspense fallback={<div>Loading leads...</div>}>
        <RMLeads />
      </Suspense>
    </Layout>
  )
}
</file>

<file path="app/page.tsx">
"use client"

import { useEffect } from "react"
import { useRouter } from "next/navigation"

export default function Home() {
  const router = useRouter()

  useEffect(() => {
    router.push("/dashboard")
  }, [router])

  return null
}
</file>

<file path="components/SCFleadmanagement/dashboard.tsx">
"use client"

import { useState } from "react"
import { 
  ChevronUp, 
  ChevronDown, 
  Users, 
  UserPlus, 
  Clock, 
  AlertCircle, 
  CheckCircle, 
  XCircle,
  TrendingUp,
  TrendingDown,
  Filter
} from "lucide-react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Progress } from "@/components/ui/progress"
import { cn } from "@/lib/utils"
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts"

// Mock data
const leadSummaryData = [
  {
    title: "Total Leads",
    value: 245,
    change: +12.5,
    icon: Users,
    iconColorClass: "text-blue-500 bg-blue-100 dark:bg-blue-900/20",
  },
  {
    title: "New Leads (This Week)",
    value: 38,
    change: +25.2,
    icon: UserPlus,
    iconColorClass: "text-green-500 bg-green-100 dark:bg-green-900/20",
  },
  {
    title: "Pending Action",
    value: 42,
    change: -5.3,
    icon: Clock,
    iconColorClass: "text-amber-500 bg-amber-100 dark:bg-amber-900/20",
  },
  {
    title: "Overdue",
    value: 17,
    change: +10.2,
    icon: AlertCircle,
    iconColorClass: "text-red-500 bg-red-100 dark:bg-red-900/20",
  },
]

const leadStatusData = [
  { name: "New", value: 65, color: "#3b82f6" },
  { name: "Contacted", value: 45, color: "#8b5cf6" },
  { name: "Qualified", value: 40, color: "#f59e0b" },
  { name: "Proposal", value: 35, color: "#6366f1" },
  { name: "Negotiation", value: 30, color: "#f97316" },
  { name: "Closed Won", value: 20, color: "#10b981" },
  { name: "Closed Lost", value: 10, color: "#ef4444" },
]

const leadAgingData = [
  { name: "0-7 days", new: 25, contacted: 15, qualified: 10, proposal: 8 },
  { name: "8-14 days", new: 18, contacted: 12, qualified: 8, proposal: 10 },
  { name: "15-30 days", new: 12, contacted: 10, qualified: 12, proposal: 8 },
  { name: "31-60 days", new: 8, contacted: 6, qualified: 5, proposal: 6 },
  { name: "60+ days", new: 2, contacted: 2, qualified: 5, proposal: 3 },
]

const recentLeads = [
  {
    id: "LD-001",
    dealerId: "DLR-5678",
    anchorId: "ANC-1234",
    rmName: "John Smith",
    psmName: "Alex Williams",
    status: "New",
    lastUpdated: "Mar 28, 2025",
    daysOld: 2,
  },
  {
    id: "LD-002",
    dealerId: "DLR-9012",
    anchorId: "ANC-5678",
    rmName: "Sarah Johnson",
    psmName: "Mike Thompson",
    status: "Contacted",
    lastUpdated: "Mar 27, 2025",
    daysOld: 3,
  },
  {
    id: "LD-003",
    dealerId: "DLR-3456",
    anchorId: "ANC-9012",
    rmName: "Michael Brown",
    psmName: "Lisa Anderson",
    status: "Qualified",
    lastUpdated: "Mar 26, 2025",
    daysOld: 4,
  },
  {
    id: "LD-004",
    dealerId: "DLR-7890",
    anchorId: "ANC-3456",
    rmName: "Emily Davis",
    psmName: "James Wilson",
    status: "Proposal",
    lastUpdated: "Mar 25, 2025",
    daysOld: 5,
  },
  {
    id: "LD-005",
    dealerId: "DLR-1234",
    anchorId: "ANC-7890",
    rmName: "David Wilson",
    psmName: "Sarah Thompson",
    status: "Negotiation",
    lastUpdated: "Mar 24, 2025",
    daysOld: 6,
  },
]

const statusColors: Record<string, string> = {
  New: "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300",
  Contacted: "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300",
  Qualified: "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300",
  Proposal: "bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300",
  Negotiation: "bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300",
  "Closed Won": "bg-emerald-100 text-emerald-800 dark:bg-emerald-900/30 dark:text-emerald-300",
  "Closed Lost": "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300",
}

export default function Dashboard() {
  const [timePeriod, setTimePeriod] = useState("week")

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Dashboard</h1>
        
        <div className="flex items-center gap-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="h-8 gap-1">
                <Filter className="h-3.5 w-3.5" />
                {timePeriod === "week" ? "This Week" : timePeriod === "month" ? "This Month" : "All Time"}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => setTimePeriod("week")}>This Week</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setTimePeriod("month")}>This Month</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setTimePeriod("all")}>All Time</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      {/* Lead Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {leadSummaryData.map((item, index) => (
          <Card key={index}>
            <CardContent className="p-6">
              <div className="flex justify-between items-start">
                <div 
                  className={`p-2 rounded-lg ${item.iconColorClass}`}
                >
                  <item.icon className="h-5 w-5" />
                </div>
                <div className="flex items-center gap-1">
                  {item.change > 0 ? (
                    <>
                      <TrendingUp className="h-4 w-4 text-green-500" />
                      <span className="text-sm font-medium text-green-500">+{item.change}%</span>
                    </>
                  ) : (
                    <>
                      <TrendingDown className="h-4 w-4 text-red-500" />
                      <span className="text-sm font-medium text-red-500">{item.change}%</span>
                    </>
                  )}
                </div>
              </div>
              <div className="mt-3">
                <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">{item.title}</h3>
                <p className="text-2xl font-bold mt-1 text-gray-900 dark:text-white">{item.value}</p>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Lead Status and Aging Analysis */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Status Distribution */}
        <Card className="col-span-1">
          <CardHeader>
            <CardTitle>Lead Status Distribution</CardTitle>
            <CardDescription>
              Distribution of leads by current status
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={leadStatusData}
                    cx="50%"
                    cy="50%"
                    labelLine={true}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="value"
                    label={({ name, percent, midAngle, cx, cy }) => {
                      const radius = 90;
                      // Guard against undefined values
                      if (
                        typeof midAngle !== 'number' ||
                        typeof cx !== 'number' ||
                        typeof cy !== 'number'
                      ) {
                        return null;
                      }
                      const sin = Math.sin(-midAngle * Math.PI / 180);
                      const cos = Math.cos(-midAngle * Math.PI / 180);
                      const sx = cx + (radius + 10) * cos;
                      const sy = cy + (radius + 10) * sin;
                      const textAnchor = cos >= 0 ? 'start' : 'end';
                      
                      return (
                        <text 
                          x={sx} 
                          y={sy} 
                          textAnchor={textAnchor}
                          fill="currentColor"
                          fontSize={12}
                          fontFamily="inherit"
                        >
                          {`${name}: ${(percent * 100).toFixed(0)}%`}
                        </text>
                      );
                    }}
                  >
                    {leadStatusData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip 
                    formatter={(value) => [`${value} leads`, 'Count']}
                    contentStyle={{ fontFamily: 'inherit', fontSize: '12px' }}
                    itemStyle={{ fontFamily: 'inherit' }}
                  />
                  <Legend 
                    formatter={(value) => <span style={{ fontFamily: 'inherit', fontSize: '12px', color: 'inherit' }}>{value}</span>}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Lead Aging */}
        <Card className="col-span-1">
          <CardHeader>
            <CardTitle>Lead Aging</CardTitle>
            <CardDescription>
              Analysis of lead aging by status
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={leadAgingData}
                  margin={{
                    top: 20,
                    right: 30,
                    left: 20,
                    bottom: 5,
                  }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis 
                    dataKey="name" 
                    tick={{ fontFamily: 'inherit', fontSize: 12 }}
                  />
                  <YAxis 
                    tick={{ fontFamily: 'inherit', fontSize: 12 }}
                  />
                  <Tooltip 
                    contentStyle={{ fontFamily: 'inherit', fontSize: '12px' }}
                    itemStyle={{ fontFamily: 'inherit' }}
                  />
                  <Legend 
                    formatter={(value) => <span style={{ fontFamily: 'inherit', fontSize: '12px', color: 'inherit' }}>{value}</span>}
                  />
                  <Bar dataKey="new" stackId="a" name="New" fill="#3b82f6" />
                  <Bar dataKey="contacted" stackId="a" name="Contacted" fill="#8b5cf6" />
                  <Bar dataKey="qualified" stackId="a" name="Qualified" fill="#f59e0b" />
                  <Bar dataKey="proposal" stackId="a" name="Proposal" fill="#6366f1" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Recent Leads */}
      <Card>
        <CardHeader>
          <CardTitle>Recent Leads</CardTitle>
          <CardDescription>
            Latest leads added to the system
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="border-b border-gray-200 dark:border-[#1F1F23]">
                  <th className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Lead ID</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Dealer ID</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Anchor ID</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">RM Name</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">PSM Name</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Status</th>
                  <th className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Aging</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 dark:divide-[#1F1F23]">
                {recentLeads.map((lead) => (
                  <tr key={lead.id} className="hover:bg-gray-50 dark:hover:bg-[#1F1F23] transition-colors">
                    <td className="px-4 py-3 font-medium text-gray-900 dark:text-white">{lead.id}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.dealerId}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.anchorId}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.rmName}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.psmName}</td>
                    <td className="px-4 py-3">
                      <span
                        className={cn(
                          "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium",
                          statusColors[lead.status]
                        )}
                      >
                        {lead.status}
                      </span>
                    </td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">
                      {lead.daysOld} days
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
        <CardFooter className="flex justify-end">
          <Button variant="outline" size="sm">View All Leads</Button>
        </CardFooter>
      </Card>

      {/* Conversion Funnel */}
      <Card>
        <CardHeader>
          <CardTitle>Lead Conversion Funnel</CardTitle>
          <CardDescription>
            Conversion rates across lead stages
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="font-medium">New Leads</span>
                <span className="text-gray-500 dark:text-gray-400">65 leads (100%)</span>
              </div>
              <Progress value={100} className="h-2" />
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="font-medium">Contacted</span>
                <span className="text-gray-500 dark:text-gray-400">45 leads (69%)</span>
              </div>
              <Progress value={69} className="h-2" />
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="font-medium">Qualified</span>
                <span className="text-gray-500 dark:text-gray-400">40 leads (62%)</span>
              </div>
              <Progress value={62} className="h-2" />
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="font-medium">Proposal</span>
                <span className="text-gray-500 dark:text-gray-400">35 leads (54%)</span>
              </div>
              <Progress value={54} className="h-2" />
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="font-medium">Negotiation</span>
                <span className="text-gray-500 dark:text-gray-400">30 leads (46%)</span>
              </div>
              <Progress value={46} className="h-2" />
            </div>
            
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="font-medium">Closed Won</span>
                <span className="text-gray-500 dark:text-gray-400">20 leads (31%)</span>
              </div>
              <Progress value={31} className="h-2" />
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="components/SCFleadmanagement/top-nav.tsx">
"use client"

import { useState } from "react"
import { Bell, Sun, Moon, LogOut, User } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { useAuth } from "@/components/auth-provider"

export default function TopNav() {
  const { theme, setTheme } = useTheme()
  const { userEmail, userRole, logout } = useAuth()
  const [isOpen, setIsOpen] = useState(false)
  
  // Generate initials from email
  const getInitials = (email: string | null) => {
    if (!email) return "U";
    const parts = email.split('@');
    if (parts.length === 0) return "U";
    const name = parts[0];
    return name.substring(0, 2).toUpperCase();
  };

  // Get user role display text
  const getRoleDisplay = () => {
    switch (userRole) {
      case "admin": return "Admin";
      case "rm": return "RM User";
      case "rm-inbox": return "RM Inbox User";
      case "psm": return "PSM User";
      default: return "User";
    }
  };

  return (
    <div className="h-full flex items-center justify-end px-6">
      <div className="flex items-center space-x-4">
        <Button variant="ghost" size="icon" className="relative">
          <Bell className="h-5 w-5 text-gray-600 dark:text-gray-400" />
          <span className="absolute top-0 right-0 h-2 w-2 rounded-full bg-red-500"></span>
        </Button>

        <Button
          variant="ghost"
          size="icon"
          onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
        >
          {theme === "dark" ? (
            <Sun className="h-5 w-5 text-gray-600 dark:text-gray-400" />
          ) : (
            <Moon className="h-5 w-5 text-gray-600 dark:text-gray-400" />
          )}
        </Button>

        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button
              variant="ghost"
              className="relative h-8 w-8 rounded-full"
              onClick={() => setIsOpen(!isOpen)}
            >
              <Avatar className="h-8 w-8">
                <AvatarImage src="/images/avatar.png" alt="Profile" />
                <AvatarFallback>{getInitials(userEmail)}</AvatarFallback>
              </Avatar>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-56 mt-2 p-2">
            <div className="flex items-center px-2 py-4">
              <Avatar className="h-10 w-10 mr-3">
                <AvatarImage src="/images/avatar.png" alt="Profile" />
                <AvatarFallback>{getInitials(userEmail)}</AvatarFallback>
              </Avatar>
              <div>
                <p className="text-sm font-medium">{userEmail}</p>
                <p className="text-xs text-muted-foreground">{getRoleDisplay()}</p>
              </div>
            </div>
            <DropdownMenuItem className="cursor-pointer" onClick={() => logout()}>
              <LogOut className="h-4 w-4 mr-2" />
              Logout
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </div>
  )
}
</file>

<file path="lib/ai-service.ts">
import OpenAI from 'openai';

// Define constants for hardcoded prompts and settings
const PROMPT_SUMMARY_TEMPLATE = "Please provide a concise 2-3 word summary of this RM reply: {reply_text}";
const PROMPT_NEXT_ACTION_TEMPLATE = "Based on this RM reply, determine the appropriate next action. Reply with ONLY one of these options:\n1. \"FollowUp\" if follow-up is needed\n2. \"Dealer Not Interested\" if the dealer is expressing disinterest or rejection\n3. \"Admin Review\" if you're unsure about the next action or if the reply indicates a wrong assignment (e.g., \"This lead is not for me\", \"Please reassign\", \"This is not my territory\")\n\nReply text: {reply_text}";
const DEFAULT_MODEL = "gpt-3.5-turbo";
const API_ENDPOINT = "https://api.openai.com/v1";

// Define the response type for AI analysis
export interface AIAnalysisResult {
  summary: string;
  nextActionPrediction: 'FollowUp' | 'Dealer Not Interested' | 'Admin Review';
  tokensConsumed: number;
}

/**
 * Analyzes the RM reply text and returns a summary and next action prediction
 */
export async function getAiAnalysisForReply(replyText: string): Promise<AIAnalysisResult | null> {
  try {
    console.log(`[AI Service] Starting analysis for reply text (${replyText.length} chars)`);
    
    // Get API key from environment variable
    const apiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY;
    console.log(`[AI Service] API key ${apiKey ? 'found' : 'not found'}`);
    
    if (!apiKey) {
      console.warn('[AI Service] OpenAI API key not configured. Please add NEXT_PUBLIC_OPENAI_API_KEY to your .env.local file.');
      
      // Return a mock result for demonstration purposes
      return {
        summary: "API key needed",
        nextActionPrediction: "FollowUp",
        tokensConsumed: 0
      };
    }
    
    // Initialize OpenAI client
    const openai = new OpenAI({
      apiKey: apiKey,
      baseURL: API_ENDPOINT,
      dangerouslyAllowBrowser: true,
    });
    
    // Prepare prompts
    const summaryPrompt = PROMPT_SUMMARY_TEMPLATE.replace('{reply_text}', replyText);
    const nextActionPrompt = PROMPT_NEXT_ACTION_TEMPLATE.replace('{reply_text}', replyText);
    
    console.log(`[AI Service] Prepared summary prompt: ${summaryPrompt.substring(0, 50)}...`);
    console.log(`[AI Service] Prepared next action prompt: ${nextActionPrompt.substring(0, 50)}...`);
    
    // Get summary from OpenAI
    console.log(`[AI Service] Making API call for summary analysis...`);
    const summaryResponse = await openai.chat.completions.create({
      model: DEFAULT_MODEL,
      messages: [
        { role: 'system', content: 'You are a concise summarization assistant that provides brief, accurate summaries in 2-3 words.' },
        { role: 'user', content: summaryPrompt }
      ],
      max_tokens: 20,
    });
    
    console.log(`[AI Service] Summary response received: ${JSON.stringify(summaryResponse.choices[0]?.message)}`);
    console.log(`[AI Service] Summary tokens used: ${summaryResponse.usage?.total_tokens || 0}`);
    
    // Get next action prediction from OpenAI
    console.log(`[AI Service] Making API call for next action prediction...`);
    const nextActionResponse = await openai.chat.completions.create({
      model: DEFAULT_MODEL,
      messages: [
        { role: 'system', content: 'You are an assistant that analyzes dealer responses. Respond with only "FollowUp", "Dealer Not Interested", or "Admin Review".' },
        { role: 'user', content: nextActionPrompt }
      ],
      max_tokens: 20,
    });
    
    console.log(`[AI Service] Next action response received: ${JSON.stringify(nextActionResponse.choices[0]?.message)}`);
    console.log(`[AI Service] Next action tokens used: ${nextActionResponse.usage?.total_tokens || 0}`);
    
    // Extract responses
    const summary = summaryResponse.choices[0]?.message.content?.trim() || 'No summary available';
    const nextActionRaw = nextActionResponse.choices[0]?.message.content?.trim() || 'FollowUp';
    
    console.log(`[AI Service] Extracted summary: "${summary}"`);
    console.log(`[AI Service] Extracted next action raw: "${nextActionRaw}"`);
    
    // Normalize the next action prediction
    let nextActionPrediction: 'FollowUp' | 'Dealer Not Interested' | 'Admin Review';
    if (nextActionRaw.includes('Not Interested') || nextActionRaw.toLowerCase().includes('not interested')) {
      nextActionPrediction = 'Dealer Not Interested';
    } else if (nextActionRaw.includes('Admin Review') || nextActionRaw.toLowerCase().includes('admin review')) {
      nextActionPrediction = 'Admin Review';
    } else {
      nextActionPrediction = 'FollowUp';
    }
    
    console.log(`[AI Service] Normalized next action: "${nextActionPrediction}"`);
    
    // Calculate tokens consumed
    const totalTokens = 
      (summaryResponse.usage?.total_tokens || 0) + 
      (nextActionResponse.usage?.total_tokens || 0);
    
    console.log(`[AI Service] Total tokens consumed: ${totalTokens}`);
    
    return {
      summary,
      nextActionPrediction,
      tokensConsumed: totalTokens
    };
  } catch (error) {
    console.error('[AI Service] Error in AI analysis:', error);
    
    // Handle specific API errors
    if (error instanceof Error) {
      if (error.message.includes('401') || error.message.includes('invalid_api_key')) {
        console.error('[AI Service] Invalid OpenAI API key. Please check your NEXT_PUBLIC_OPENAI_API_KEY in .env.local');
        
        // Return a specific error result
        return {
          summary: "API key invalid",
          nextActionPrediction: "FollowUp",
          tokensConsumed: 0
        };
      }
    }
    
    return null;
  }
}

/**
 * Maps the AI next action prediction to a workflow stage
 */
export function mapAIDecisionToWorkflowStage(aiDecision: string): string {
  if (aiDecision === 'Dealer Not Interested') {
    return 'Dropped';
  } else if (aiDecision === 'Admin Review') {
    return 'AdminReviewPending';
  } else {
    return 'RM_AwaitingReply';
  }
}
</file>

<file path="lib/constants.ts">
// lib/constants.ts
// Constants used throughout the application

export const LEAD_TEMPLATE_HEADERS = [
  "Sr. No.",
  "Program Type",
  "Type of relationship",
  "Name of the Firm",
  "PAN Number",
  "Contact Person",
  "Mobile No.",
  "Email Address",
  "Address",
  "Pincode",
  "City",
  "RM ADID",
  "No. of months of relationship with Dealer",
  "Tenor (in days)",
  "Sales to Dealer (Actual)(in INR) 2020-21",
  "Sales to Dealer (Actual)(in INR) 2021-22",
  "Sales to Dealer (Actual)(in INR) 2022-23",
  "Projected Sales to Dealer (Projected)(in INR) 2023-24",
  "Dealer Turnover(in INR) 2022-23",
  "Limit Recommended (in INR)",
  "Dealer Payment Track Record",
  "Dealer overdue with anchor (No. of times in last 12 months)"
];

// Common error codes for RM assignment
export const ERROR_CODES = {
  ERR_HDR_INV: { code: "ERR_HDR_INV", description: "Invalid file headers.", module: "Lead Upload", severity: "Error" },
  ERR_PIN_NF: { code: "ERR_PIN_NF", description: "Pincode not found.", module: "RM Assignment", severity: "Error" },
  ERR_BR_NMAP: { code: "ERR_BR_NMAP", description: "Branch not mapped to RM.", module: "RM Assignment", severity: "Error" },
  ERR_RM_NBR: { code: "ERR_RM_NBR", description: "No RM for Branch.", module: "RM Assignment", severity: "Error" },
  INFO_RM_MANUAL: { code: "INFO_RM_MANUAL", description: "RM assigned from Excel.", module: "RM Assignment", severity: "Info" },
  INFO_RM_AUTO: { code: "INFO_RM_AUTO", description: "RM assigned automatically.", module: "RM Assignment", severity: "Info" },
  ERR_ANCHOR_PROG_REQ: { code: "ERR_ANCHOR_PROG_REQ", description: "Anchor and Program must be selected.", module: "Lead Upload", severity: "Error" }
};

// Template headers for Smartfin Status Update
export const SMARTFIN_UPDATE_TEMPLATE_HEADERS = [
  "Application No",
  "Created Date",
  "Firm Name",
  "Application Type",
  "Status",
  "Branch",
  "Requested Amount",
  "Sanctioned Amount",
  "Sanction Date",
  "Program Mapped Date",
  "RM Name",
  "RM TAT",
  "CPA Name",
  "CPA TAT",
  "CM Name",
  "CM TAT",
  "Approval Requested Date",
  "Approval TAT",
  "Total TAT"
];

// Template headers for Email Template Master
export const EMAIL_TEMPLATE_MASTER_HEADERS = [
  "Template Name",
  "Description",
  "Subject",
  "Body",
  "To Recipients",
  "CC Recipients",
  "Category",
  "Is Active"
];
</file>

<file path="lib/lead-workflow-examples.ts">
import { v4 as uuidv4 } from 'uuid';
import { 
  LeadWorkflowState, 
  LeadCommunication,
  createLeadWorkflowState,
  createLeadCommunication,
  updateLeadWorkflowState,
  createLeadAssignmentCommunication,
  createRMReplyCommunication,
  updateWorkflowStateAfterCommunication,
  getLeadWorkflowStateByProcessedLeadId,
  getLeadCommunicationsByProcessedLeadId
} from './lead-workflow';

/**
 * Example: Handling a new lead assignment in NewLeads component
 */
export async function handleNewLeadAssignment(
  processedLeadId: string,
  rmAdid: string,
  rmEmail: string,
  psmAdid: string | undefined
): Promise<void> {
  try {
    console.log(`[Lead Workflow] Starting lead assignment workflow for lead ${processedLeadId}`);
    console.log(`[Lead Workflow] RM: ${rmAdid} (${rmEmail}), PSM: ${psmAdid || 'Unknown'}`);
    
    // 1. Create a workflow state record for the lead
    console.log(`[Lead Workflow] Creating workflow state record...`);
    const workflowState = await createLeadWorkflowState(
      processedLeadId,
      rmAdid,
      psmAdid || 'PSM001'
    );
    console.log(`[Lead Workflow] Created workflow state with ID: ${workflowState.id}`);
    
    // 2. Log an assignment communication
    console.log(`[Lead Workflow] Generating email content and creating communication record...`);
    const communication = await createLeadAssignmentCommunication(
      processedLeadId,
      rmEmail,
      workflowState.id
    );
    console.log(`[Lead Workflow] Created email communication with ID: ${communication.id}`);
    
    // 3. Update the workflow state to reflect the assignment email was sent
    console.log(`[Lead Workflow] Updating workflow state to RM_AwaitingReply...`);
    await updateLeadWorkflowState(workflowState.id, {
      currentStage: 'RM_AwaitingReply',
      nextFollowUpTimestamp: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 days from now
    });
    
    console.log(`[Lead Workflow] Assignment workflow completed successfully for lead ${processedLeadId}`);
  } catch (error) {
    console.error(`[Lead Workflow] ERROR in lead assignment for ${processedLeadId}:`, error);
    throw error;
  }
}

/**
 * Example: Handling an RM reply in RMInbox component
 */
export async function handleRMReply(
  processedLeadId: string,
  rmEmail: string,
  replyContent: string,
  attachments?: { name: string; size: string; url?: string; type: string }[]
): Promise<void> {
  try {
    // 1. Get the current workflow state
    const workflowState = await getLeadWorkflowStateByProcessedLeadId(processedLeadId);
    
    if (!workflowState) {
      throw new Error(`No workflow state found for lead ${processedLeadId}`);
    }
    
    // 2. Create a simulated AI analysis (in real app, call AI service)
    const aiSummary = `Analyzed RM reply: ${replyContent.substring(0, 50)}...`;
    const aiDecision = "Response acknowledged. Continue monitoring.";
    const aiTokensConsumed = 150; // Simulated token count
    
    // 3. Log the RM reply with AI analysis
    const communication = await createRMReplyCommunication(
      processedLeadId,
      rmEmail,
      replyContent,
      aiSummary,
      aiDecision,
      aiTokensConsumed,
      attachments
    );
    
    // 4. Update the workflow state based on AI decision
    // In this example, we're just updating the timestamps, but in a real app
    // you might change the stage based on AI analysis
    await updateWorkflowStateAfterCommunication(
      workflowState.id
    );
    
    console.log(`RM reply processed for lead ${processedLeadId}`);
  } catch (error) {
    console.error('Error processing RM reply:', error);
    throw error;
  }
}

/**
 * Example: Handling a PSM decision in PSMLeads component
 */
export async function handlePSMDecision(
  processedLeadId: string,
  psmAdid: string,
  decision: 'reassign' | 'drop',
  reason: string
): Promise<void> {
  try {
    // 1. Get the current workflow state
    const workflowState = await getLeadWorkflowStateByProcessedLeadId(processedLeadId);
    
    if (!workflowState) {
      throw new Error(`No workflow state found for lead ${processedLeadId}`);
    }
    
    // 2. Create appropriate communication based on decision
    if (decision === 'reassign') {
      await createLeadCommunication({
        processedLeadId,
        communicationType: 'PSMDecision_ReassignToRM',
        title: 'Lead Reassigned to RM by PSM',
        description: reason,
        senderType: 'PSM',
        senderAdidOrEmail: psmAdid,
        recipientAdidOrEmail: workflowState.currentAssigneeAdid,
        relatedWorkflowStateId: workflowState.id
      });
      
      // 3. Update workflow state
      await updateLeadWorkflowState(workflowState.id, {
        currentStage: 'RM_ReassignmentEmailPending',
        lastStageChangeTimestamp: new Date().toISOString()
      });
    } else {
      // Handle drop decision
      await createLeadCommunication({
        processedLeadId,
        communicationType: 'PSMDecision_DropLead',
        title: 'Lead Dropped by PSM',
        description: reason,
        senderType: 'PSM',
        senderAdidOrEmail: psmAdid,
        recipientAdidOrEmail: workflowState.currentAssigneeAdid,
        relatedWorkflowStateId: workflowState.id
      });
      
      // Update workflow state
      await updateLeadWorkflowState(workflowState.id, {
        currentStage: 'Dropped',
        droppedReason: reason,
        lastStageChangeTimestamp: new Date().toISOString()
      });
    }
    
    console.log(`PSM decision (${decision}) processed for lead ${processedLeadId}`);
  } catch (error) {
    console.error('Error processing PSM decision:', error);
    throw error;
  }
}

/**
 * Example: System follow-up/escalation
 */
export async function handleSystemFollowUp(
  processedLeadId: string,
  isEscalation: boolean = false
): Promise<void> {
  try {
    // 1. Get the current workflow state
    const workflowState = await getLeadWorkflowStateByProcessedLeadId(processedLeadId);
    
    if (!workflowState) {
      throw new Error(`No workflow state found for lead ${processedLeadId}`);
    }
    
    // 2. Determine escalation level (if applicable)
    let newEscalationLevel = workflowState.escalationLevel;
    let newStage = workflowState.currentStage;
    
    if (isEscalation) {
      newEscalationLevel += 1;
      
      // Update stage based on escalation level
      if (newEscalationLevel === 1) {
        newStage = 'RM_Escalation1';
      } else if (newEscalationLevel === 2) {
        newStage = 'PSM_ReviewPending';
      }
    }
    
    // 3. Create follow-up/escalation communication
    await createLeadCommunication({
      processedLeadId,
      communicationType: isEscalation ? 'SystemFollowUpEmail' : 'SystemReminderEmail',
      title: isEscalation ? `Escalation Email Sent (Level ${newEscalationLevel})` : 'Follow-up Email Sent',
      description: isEscalation 
        ? `Escalation email sent to ${workflowState.currentAssigneeAdid} due to lack of response.`
        : `Reminder email sent to ${workflowState.currentAssigneeAdid} for lead follow-up.`,
      senderType: 'System',
      senderAdidOrEmail: 'system@scfleadmgmt.com',
      recipientAdidOrEmail: workflowState.currentAssigneeAdid,
      relatedWorkflowStateId: workflowState.id
    });
    
    // 4. Update workflow state
    const nextFollowUpTimestamp = new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(); // 3 days from now
    
    await updateLeadWorkflowState(workflowState.id, {
      currentStage: newStage,
      escalationLevel: newEscalationLevel,
      nextFollowUpTimestamp,
      lastCommunicationTimestamp: new Date().toISOString()
    });
    
    console.log(`System ${isEscalation ? 'escalation' : 'follow-up'} sent for lead ${processedLeadId}`);
  } catch (error) {
    console.error('Error sending system follow-up:', error);
    throw error;
  }
}
</file>

<file path="README.md">
# SCF Lead Management

A modern web application for managing Supply Chain Finance leads, built with Next.js.

## Features

- Role-based access control (Admin and RM roles)
- Dashboard with analytics
- Lead management for RM and PSM teams
- Master data management
- Responsive design for all devices

## Technologies Used

- Next.js 15
- React 19
- TypeScript
- Tailwind CSS
- Shadcn UI Components

## Getting Started

### Prerequisites

- Node.js 18 or higher
- npm or yarn

### Installation

1. Clone the repository
```bash
git clone <repository-url>
cd scf-lead-management
```

2. Install dependencies
```bash
npm install
# or
yarn install
```

3. Run the development server
```bash
npm run dev
# or
yarn dev
```

4. Open [http://localhost:3000](http://localhost:3000) in your browser

### Demo Credentials

- Admin: admin@yesbank.in / password
- RM: rm@yesbank.in / password

## Deployment

This application is configured for easy deployment on Vercel. 

## Lead Email Functionality

The application now includes a simulated email functionality for lead assignments. When a lead is successfully assigned to an RM (either manually or automatically), the system:

1. Creates a workflow state record for the lead
2. Generates a simulated email notification to the RM
3. Logs the communication in the system

### Implementation Details

- The email generation happens in the `handleUpload` function in the `NewLeads` component
- RM email addresses are retrieved or generated based on their ADID
- PSM details are retrieved from the anchor record
- Email content includes dealer details and action items for the RM

### Workflow States

Each lead goes through a workflow with different states:
- `RM_AssignmentEmailPending`: Initial state after lead creation
- `RM_AwaitingReply`: After assignment email is sent
- `RM_Escalation1`: If no response after first reminder
- `PSM_ReviewPending`: If no response after second reminder
- `Dropped`: If lead is dropped by PSM

### Viewing Communications

Lead communications can be viewed in the `LeadDetails` component under the "RM Communications" tab.

### Technical Implementation

- Email generation logic is in `lib/lead-utils.ts`
- Workflow state management is in `lib/lead-workflow.ts`
- Example implementations are in `lib/lead-workflow-examples.ts`
</file>

<file path="components/SCFleadmanagement/masters/rm-branch-master.tsx">
"use client"

import { useState, useEffect } from "react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Search, Filter, ChevronLeft, ChevronRight } from "lucide-react"
import MasterLayout from "./master-layout"
import { MasterService } from "@/lib/db"
import type { RMBranch } from "@/lib/db"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"

// Helper function to safely convert any value to string for search
const safeString = (value: any): string => {
  if (value === null || value === undefined) return '';
  return String(value).toLowerCase();
};

export default function RMBranchMaster() {
  const [searchTerm, setSearchTerm] = useState("")
  const [rmBranchData, setRMBranchData] = useState<RMBranch[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage] = useState(10)
  const [totalRecords, setTotalRecords] = useState(0)

  useEffect(() => {
    // Load RM-Branch data from IndexedDB
    const loadRMBranchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Get total records count
        const countResult = await MasterService.getTotalRecords('rm_branch');
        if (countResult.success && countResult.count !== undefined) {
          setTotalRecords(countResult.count);
        } else {
          setError("Failed to load record count");
          return;
        }
        
        // Get paginated records
        const result = await MasterService.getRecords(
          'rm_branch', 
          {}, 
          undefined, 
          itemsPerPage, 
          (currentPage - 1) * itemsPerPage
        );
        
        if (result.success && result.data) {
          // Type assertion to ensure correct type
          setRMBranchData(result.data as RMBranch[]);
        } else {
          setError("Failed to load RM-Branch data");
        }
      } catch (err) {
        console.error("Error loading RM-Branch data:", err);
        setError("An unexpected error occurred");
      } finally {
        setLoading(false);
      }
    };

    loadRMBranchData();
  }, [currentPage, itemsPerPage]);
  
  // Pagination handlers
  const totalPages = Math.ceil(totalRecords / itemsPerPage);
  const handleNextPage = () => setCurrentPage(prev => Math.min(prev + 1, totalPages));
  const handlePrevPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));

  const searchTermLower = searchTerm.toLowerCase();
  const filteredData = rmBranchData.filter(
    (item) =>
      safeString(item.rmId).includes(searchTermLower) ||
      safeString(item.rmName).includes(searchTermLower) ||
      safeString(item.branchCode).includes(searchTermLower) ||
      safeString(item.branchName).includes(searchTermLower) ||
      safeString(item.region).includes(searchTermLower)
  )

  return (
    <MasterLayout
      title="RM Branch Master"
      description="Manage the mapping between relationship managers and branches"
      storeName="rm_branch"
    >
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-4">
        <div className="relative w-full sm:w-64">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
          <Input
            type="search"
            placeholder="Search by RM, branch..."
            className="pl-9 w-full"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        <div className="flex gap-2">
          <Button variant="outline" size="sm" className="gap-1">
            <Filter className="h-4 w-4" />
            Filter
          </Button>
        </div>
      </div>

      {loading ? (
        <div className="flex justify-center py-8">
          <div className="text-center">
            <div className="inline-block animate-spin h-8 w-8 border-4 border-gray-300 dark:border-gray-700 rounded-full border-t-blue-600 dark:border-t-blue-500"></div>
            <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">Loading RM-Branch data...</p>
          </div>
        </div>
      ) : error ? (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900/30 rounded-md p-4 my-4">
          <p className="text-red-800 dark:text-red-300">{error}</p>
          <Button 
            variant="outline" 
            size="sm" 
            className="mt-2"
            onClick={() => window.location.reload()}
          >
            Reload
          </Button>
        </div>
      ) : (
        <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] overflow-hidden">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="border-b border-gray-200 dark:border-[#1F1F23] bg-gray-50 dark:bg-[#1F1F23]">
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">RM ID</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">RM Name</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Branch Code</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Branch Name</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Region</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Role</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Status</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredData.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={7} className="text-center py-6 text-gray-500 dark:text-gray-400">
                      {rmBranchData.length === 0 
                        ? "No RM-Branch data available. Use the Upload tab to add data." 
                        : "No results found for your search."}
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredData.map((item, idx) => (
                    <TableRow
                      key={item.id || idx}
                      className="border-b border-gray-200 dark:border-[#1F1F23] hover:bg-gray-50 dark:hover:bg-[#1F1F23]/50"
                    >
                      <TableCell className="px-4 py-3 font-medium text-gray-900 dark:text-white">{item.rmId}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.rmName}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.branchCode}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.branchName}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.region}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.role}</TableCell>
                      <TableCell className="px-4 py-3">
                        <span
                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            item.active
                              ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300"
                              : "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300"
                          }`}
                        >
                          {item.active ? "Active" : "Inactive"}
                        </span>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>

          <div className="px-4 py-3 flex flex-col sm:flex-row sm:items-center justify-between border-t border-gray-200 dark:border-[#1F1F23] gap-4">
            <div className="text-sm text-gray-700 dark:text-gray-300">
              Showing <span className="font-medium">{filteredData.length}</span> of{" "}
              <span className="font-medium">{totalRecords}</span> records
            </div>
            
            {totalRecords > itemsPerPage && (
              <div className="flex items-center space-x-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handlePrevPage} 
                  disabled={currentPage === 1}
                  className="h-8 w-8 p-0"
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <span className="text-gray-500 dark:text-gray-400">
                  Page {currentPage} of {totalPages}
                </span>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handleNextPage} 
                  disabled={currentPage === totalPages}
                  className="h-8 w-8 p-0"
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
            )}
          </div>
        </div>
      )}
    </MasterLayout>
  )
}
</file>

<file path="components/SCFleadmanagement/rm-inbox.tsx">
"use client"

import { useState, useEffect } from "react"
import { useAuth } from "@/components/auth-provider"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import db, { LeadCommunication } from "@/lib/db"
import { v4 as uuidv4 } from 'uuid'
import { MessageSquare, ChevronDown, ChevronUp, Send } from "lucide-react"
import Link from "next/link"
import { format } from "date-fns"
import { getRMInboxEmails } from "@/lib/lead-utils"
import { createRMReplyCommunication } from "@/lib/lead-workflow"
import { getAiAnalysisForReply } from "@/lib/ai-service"
import { safeDbOperation } from "@/lib/db-init"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Terminal, AlertCircle } from "lucide-react"

// Check if we're in a browser environment safely
const isBrowser = () => {
  try {
    return typeof window !== 'undefined' && 
           typeof window.document !== 'undefined';
  } catch (e) {
    return false;
  }
};

export default function RMInbox() {
  const { userEmail, user } = useAuth()
  const [communications, setCommunications] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [expandedMessages, setExpandedMessages] = useState<Record<string, boolean>>({})
  const [replyTexts, setReplyTexts] = useState<Record<string, string>>({})
  const [submittingIds, setSubmittingIds] = useState<Record<string, boolean>>({})
  const [mounted, setMounted] = useState(false)
  const [aiConfigStatus, setAiConfigStatus] = useState<'unconfigured' | 'invalid' | 'configured' | 'unknown'>('unknown')

  // Set mounted flag on client side
  useEffect(() => {
    setMounted(true)
  }, [])

  // Fetch communications for the logged-in RM
  useEffect(() => {
    // Skip fetching on server-side or if not mounted
    if (!isBrowser() || !mounted) return;
    
    async function fetchCommunications() {
      if (!userEmail) return;

      try {
        console.log("[RM Inbox Component] Fetching emails for user:", { 
          email: userEmail, 
          id: user?.id || 'Not Available'
        });
        
        // Get the RM ADID - prefer user ID from auth context if available
        // For test accounts, RM1 = "REM0000001"
        const rmAdid = user?.id || "RM1";
        console.log(`[RM Inbox Component] Using RM ADID: ${rmAdid}`);
        
        // Use the utility function to get inbox emails safely
        const inboxEmails = await safeDbOperation(
          () => getRMInboxEmails(rmAdid),
          [] // Empty array as fallback
        );
        
        console.log(`[RM Inbox Component] Retrieved ${inboxEmails.length} emails`);
        
        setCommunications(inboxEmails);
      } catch (err: any) {
        console.error("[RM Inbox Component] Error fetching communications:", err);
        setError("Failed to load your inbox. Please try again later.");
      } finally {
        setLoading(false);
      }
    }

    fetchCommunications();
  }, [userEmail, user, mounted]);

  // Add effect to check AI configuration
  useEffect(() => {
    // Skip on server-side or if not mounted
    if (!isBrowser() || !mounted) return;
    
    // Check if OpenAI API key is configured in environment variables
    const apiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY;
    if (!apiKey) {
      setAiConfigStatus('unconfigured');
    } else {
      setAiConfigStatus('configured');
    }
  }, [mounted]);

  // Skip rendering until mounted to prevent hydration mismatch
  if (!mounted && isBrowser()) {
    return (
      <div className="p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3"></div>
          <div className="h-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
          <div className="h-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
        </div>
      </div>
    );
  }

  // Toggle message expansion
  const toggleMessageExpand = (id: string) => {
    setExpandedMessages(prev => ({
      ...prev,
      [id]: !prev[id]
    }))
  }

  // Handle reply text change
  const handleReplyChange = (id: string, text: string) => {
    setReplyTexts(prev => ({
      ...prev,
      [id]: text
    }))
  }

  // Submit reply
  const submitReply = async (comm: any) => {
    if (!userEmail || !replyTexts[comm.id]) return;
    
    try {
      console.log("[RM Inbox Component] Submitting reply to:", comm);
      setIsSubmitting(comm.id, true);
      
      // Get the processed lead ID (from old or new schema)
      const processedLeadId = comm.processedLeadId || comm.leadId;
      
      if (!processedLeadId) {
        throw new Error("Cannot find lead ID for this communication");
      }
      
      console.log(`[RM Inbox Component] Creating reply for lead: ${processedLeadId}`);
      
      // Get AI analysis for the reply text
      let aiSummary, aiDecision, aiTokensConsumed;
      try {
        const aiAnalysis = await getAiAnalysisForReply(replyTexts[comm.id]);
        if (aiAnalysis) {
          aiSummary = aiAnalysis.summary;
          aiDecision = aiAnalysis.nextActionPrediction;
          aiTokensConsumed = aiAnalysis.tokensConsumed;
          console.log("[RM Inbox Component] AI Analysis:", {
            summary: aiSummary,
            decision: aiDecision,
            tokens: aiTokensConsumed
          });
        }
      } catch (aiError) {
        console.error("[RM Inbox Component] Error getting AI analysis:", aiError);
        // Continue without AI analysis if it fails
      }
      
      // Use the lead workflow function to create a reply
      const reply = await createRMReplyCommunication(
        processedLeadId,
        userEmail,
        replyTexts[comm.id],
        aiSummary,
        aiDecision,
        aiTokensConsumed
      );
      
      console.log("[RM Inbox Component] Reply created successfully:", reply);
      
      // Update local state
      setCommunications(prev => [reply, ...prev]);
      
      // Clear reply text
      setReplyTexts(prev => ({
        ...prev,
        [comm.id]: ''
      }));
      
      // Close the expanded view
      setExpandedMessages(prev => ({
        ...prev,
        [comm.id]: false
      }));
    } catch (err: any) {
      console.error("[RM Inbox Component] Error submitting reply:", err);
      setError("Failed to send your reply. Please try again.");
    } finally {
      setIsSubmitting(comm.id, false);
    }
  }

  // Helper to get lead ID consistently from old or new schema
  const getLeadId = (comm: any) => comm.processedLeadId || comm.leadId

  // Group communications by leadId
  const groupedCommunications = communications.reduce((groups: Record<string, any[]>, comm: any) => {
    // Get the processed lead ID (from old or new schema)
    const leadId = comm.processedLeadId || comm.leadId;
    
    if (!leadId) {
      console.warn("[RM Inbox Component] Communication without lead ID:", comm.id);
      return groups;
    }
    
    if (!groups[leadId]) {
      groups[leadId] = [];
    }
    groups[leadId].push(comm);
    return groups;
  }, {} as Record<string, any[]>);

  // Helper to determine if a message is an assignment (supports both schemas)
  const isAssignment = (comm: any) => 
    comm.messageType === 'assignment' || 
    comm.communicationType === 'LeadAssignmentEmail'

  // Helper to get message content
  const getMessageContent = (comm: any) => 
    comm.content || comm.description || ''

  // Helper to set submission status
  const setIsSubmitting = (id: string, isSubmitting: boolean) => {
    setSubmittingIds(prev => ({
      ...prev,
      [id]: isSubmitting
    }));
  };

  // Helper to check if a reply is submitting
  const isSubmitting = (id: string) => submittingIds[id] || false;

  if (loading) {
    return (
      <div className="p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3"></div>
          <div className="h-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
          <div className="h-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
          <div className="h-24 bg-gray-200 dark:bg-gray-700 rounded"></div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="p-6">
        <div className="bg-red-50 dark:bg-red-900/30 p-4 rounded-md text-red-600 dark:text-red-400">
          {error}
        </div>
      </div>
    )
  }

  return (
    <div className="p-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">RM Inbox</h1>
        <p className="text-gray-600 dark:text-gray-400">
          View and respond to lead assignments and communications
        </p>
      </div>

      {aiConfigStatus === 'unconfigured' && (
        <Alert variant="destructive" className="mb-4">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>AI Configuration Required</AlertTitle>
          <AlertDescription>
            AI analysis features require an OpenAI API key. Please add NEXT_PUBLIC_OPENAI_API_KEY to your .env.local file.
          </AlertDescription>
        </Alert>
      )}

      {Object.keys(groupedCommunications).length === 0 ? (
        <div className="bg-gray-50 dark:bg-gray-800 p-8 rounded-md text-center">
          <MessageSquare className="h-10 w-10 mx-auto mb-4 text-gray-400" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-1">No communications yet</h3>
          <p className="text-gray-600 dark:text-gray-400">
            New lead assignments and communications will appear here
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          {Object.entries(groupedCommunications).map(([leadId, comms]) => {
            // Find the lead assignment message
            const assignmentMsg = comms.find(c => isAssignment(c))
            if (!assignmentMsg) return null

            return (
              <Card key={leadId} className="overflow-hidden">
                <CardHeader className="bg-gray-50 dark:bg-gray-800 py-4">
                  <div className="flex justify-between items-center">
                    <div>
                      <CardTitle className="text-base">Lead ID: {leadId}</CardTitle>
                      <CardDescription>
                        Assigned: {format(new Date(assignmentMsg.timestamp), 'MMM d, yyyy h:mm a')}
                      </CardDescription>
                    </div>
                    <Link 
                      href={`/lead-details/${leadId}`} 
                      className="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300"
                    >
                      View Lead Details
                    </Link>
                  </div>
                </CardHeader>
                
                <CardContent className="p-0">
                  {comms.map((comm) => (
                    <div key={comm.id} className="border-b border-gray-200 dark:border-gray-700 last:border-b-0">
                      <div 
                        className="p-4 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800"
                        onClick={() => toggleMessageExpand(comm.id)}
                      >
                        <div className="flex justify-between items-center">
                          <div className="flex items-center gap-2">
                            <span className={`px-2 py-1 text-xs rounded-full ${
                              isAssignment(comm)
                                ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300' 
                                : 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300'
                            }`}>
                              {isAssignment(comm) ? 'Assignment' : 'Reply'}
                            </span>
                            <span className="text-sm font-medium text-gray-900 dark:text-white">
                              {(comm.sender === 'system' || comm.senderType === 'System') ? 'System' : 'You'}
                            </span>
                            <span className="text-xs text-gray-500">
                              {format(new Date(comm.timestamp), 'MMM d, yyyy h:mm a')}
                            </span>
                          </div>
                          {expandedMessages[comm.id] ? (
                            <ChevronUp className="h-4 w-4 text-gray-500" />
                          ) : (
                            <ChevronDown className="h-4 w-4 text-gray-500" />
                          )}
                        </div>
                        
                        {!expandedMessages[comm.id] && (
                          <div className="mt-1 text-sm text-gray-600 dark:text-gray-400 truncate">
                            {getMessageContent(comm).substring(0, 100)}
                            {getMessageContent(comm).length > 100 ? '...' : ''}
                          </div>
                        )}
                      </div>
                      
                      {expandedMessages[comm.id] && (
                        <div className="p-4 bg-gray-50 dark:bg-gray-800">
                          <div className="text-sm text-gray-800 dark:text-gray-200 whitespace-pre-wrap">
                            {getMessageContent(comm)}
                          </div>
                          
                          {/* Reply section - only show for assignment messages */}
                          {isAssignment(comm) && (
                            <div className="mt-4 space-y-3">
                              <Textarea
                                placeholder="Type your reply here..."
                                value={replyTexts[comm.id] || ''}
                                onChange={(e) => handleReplyChange(comm.id, e.target.value)}
                                className="min-h-[100px]"
                              />
                              <Button 
                                onClick={() => submitReply(comm)} 
                                disabled={!replyTexts[comm.id]?.trim() || isSubmitting(comm.id)}
                                className="flex-shrink-0"
                              >
                                {isSubmitting(comm.id) ? (
                                  <span className="flex items-center">
                                    <span className="h-4 w-4 mr-2 border-2 border-t-transparent border-white rounded-full animate-spin"></span>
                                    Processing...
                                  </span>
                                ) : (
                                  <>
                                    <Send className="h-4 w-4 mr-2" />
                                    Send Reply
                                  </>
                                )}
                              </Button>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  ))}
                </CardContent>
              </Card>
            )
          })}
        </div>
      )}
    </div>
  )
}
</file>

<file path="lib/db-init.ts">
import Dexie from 'dexie';
import db from './db';
import dbUtils from './dbUtils';

// Helper function to migrate old lead communications to new format
async function migrateLeadCommunications() {
  try {
    // First check if we have any records in the lead_communications table
    const recordCount = await db.table('lead_communications').count();
    
    if (recordCount === 0) {
      console.log('No lead communications to migrate');
      return;
    }
    
    console.log(`Found ${recordCount} lead communications, checking for migration needs...`);
    
    // Get all records that need migration (ones with old fields)
    const recordsToMigrate = await db.table('lead_communications')
      .filter(comm => !!comm.leadId || !!comm.messageType || !!comm.sender || !!comm.recipient || !!comm.content || !!comm.rmEmail)
      .toArray();
    
    if (recordsToMigrate.length === 0) {
      console.log('No lead communications need migration');
      return;
    }
    
    console.log(`Migrating ${recordsToMigrate.length} lead communications...`);
    
    // Process each record
    for (const comm of recordsToMigrate) {
      const updates: any = {};
      
      // Map old field names to new field names
      if (comm.leadId) {
        updates.processedLeadId = comm.leadId;
        updates.leadId = null; // Mark for deletion
      }
      
      if (comm.messageType) {
        updates.communicationType = comm.messageType === 'assignment' ? 'LeadAssignmentEmail' : 'RMReply';
        updates.messageType = null; // Mark for deletion
      }
      
      if (comm.content) {
        updates.description = comm.content;
        updates.content = null; // Mark for deletion
      }
      
      if (comm.sender) {
        updates.senderType = comm.sender === 'system' ? 'System' : 'RM';
        updates.sender = null; // Mark for deletion
      }
      
      if (comm.recipient) {
        // Will be handled with rmEmail
        updates.recipient = null; // Mark for deletion
      }
      
      if (comm.rmEmail) {
        // If it's a system sender, the recipient is the RM
        if (updates.senderType === 'System' || comm.sender === 'system') {
          updates.recipientAdidOrEmail = comm.rmEmail;
          updates.senderAdidOrEmail = 'system@scfleadmgmt.com';
        } 
        // If it's an RM sender, the sender is the RM and recipient is the system
        else {
          updates.senderAdidOrEmail = comm.rmEmail;
          updates.recipientAdidOrEmail = 'system@scfleadmgmt.com';
        }
        
        updates.rmEmail = null; // Mark for deletion
      }
      
      // Set title if not present
      if (!comm.title) {
        updates.title = updates.communicationType === 'LeadAssignmentEmail' || comm.messageType === 'assignment' ? 
          'Lead Assignment Email Sent' : 'RM Reply Received';
      }
      
      // Initialize new fields with defaults if they don't exist
      if (!comm.attachments) updates.attachments = [];
      if (!comm.ccEmails) updates.ccEmails = [];
      
      // Update the record
      await db.table('lead_communications').update(comm.id, updates);
      console.log(`Migrated communication ${comm.id}`);
    }
    
    console.log('Lead communications migration complete');
  } catch (error) {
    console.error('Error migrating lead communications:', error);
  }
}

// Better browser detection with fallbacks
const isBrowser = () => {
  try {
    return typeof window !== 'undefined' && 
           typeof window.document !== 'undefined' && 
           typeof window.indexedDB !== 'undefined';
  } catch (e) {
    return false;
  }
};

// Add a schema correction function after the migrateLeadCommunications function

/**
 * Fix schema issues with lead_communications table
 */
async function fixLeadCommunicationsSchema() {
  try {
    // Check if the table exists
    if (!db.tables.some(table => table.name === 'lead_communications')) {
      console.log('lead_communications table does not exist, nothing to fix');
      return;
    }
    
    console.log('Checking lead_communications table schema...');
    
    // First, get all existing communications to backup
    const existingComms = await db.lead_communications.toArray();
    console.log(`Backing up ${existingComms.length} communications before schema fix`);
    
    // If we have a lot of records, process in batches
    const batchSize = 100;
    const commsCopy = [...existingComms];
    
    // Close the database
    await db.close();
    
    // Delete and recreate the database with correct schema
    // Note: This is a drastic approach but effective for fixing schema issues
    const dbName = 'SCFLeadManagement';
    
    await new Promise<void>((resolve, reject) => {
      const deleteRequest = window.indexedDB.deleteDatabase(dbName);
      
      deleteRequest.onerror = (event) => {
        console.error('Error deleting database:', event);
        reject(new Error('Failed to delete database for schema correction'));
      };
      
      deleteRequest.onsuccess = () => {
        console.log('Database deleted successfully for schema correction');
        resolve();
      };
    });
    
    // Reopen the database with the corrected schema
    await db.open();
    console.log('Database reopened with fresh schema');
    
    // Restore the communications data in batches
    if (commsCopy.length > 0) {
      console.log(`Restoring ${commsCopy.length} communications...`);
      
      for (let i = 0; i < commsCopy.length; i += batchSize) {
        const batch = commsCopy.slice(i, i + batchSize);
        await db.lead_communications.bulkAdd(batch);
        console.log(`Restored batch ${i/batchSize + 1} of ${Math.ceil(commsCopy.length/batchSize)}`);
      }
      
      console.log('Communications restored successfully');
    }
    
    return true;
  } catch (error) {
    console.error('Error fixing lead_communications schema:', error);
    return false;
  }
}

// Update the initializeDatabase function to remove AI initialization
export async function initializeDatabase() {
  // Check if we're in a browser environment with indexedDB support
  if (!isBrowser()) {
    console.log('Skipping database initialization on server side');
    return;
  }
  
  // Check if IndexedDB is available
  if (typeof window.indexedDB === 'undefined') {
    console.error('IndexedDB not supported in this browser');
    throw new Error('IndexedDB not supported in this browser');
  }
  
  // Check if IDB is blocked
  const dbOpenRequest = window.indexedDB.open('TestDB', 1);
  
  await new Promise<void>((resolve, reject) => {
    dbOpenRequest.onerror = (event) => {
      console.error('IndexedDB access is blocked or restricted:', event);
      reject(new Error('IndexedDB access is blocked or restricted. Please check your browser privacy settings.'));
    };
    
    dbOpenRequest.onsuccess = () => {
      // Close the test database
      dbOpenRequest.result.close();
      // Delete the test database
      window.indexedDB.deleteDatabase('TestDB');
      resolve();
    };
  });
  
  console.log('Initializing database schemas...');
  
  try {
    // Check the current database version
    const currentVersion = db.verno;
    console.log(`Current database version: ${currentVersion}`);
    
    // Open the database to ensure schema changes are applied
    await db.open();
    console.log(`Database opened. Current version: ${db.verno}`);
    
    // Fix lead_communications schema issues
    const schemaFixed = await fixLeadCommunicationsSchema();
    if (schemaFixed) {
      console.log('Lead communications schema fixed successfully');
    }
    
    // If we've upgraded to version 5 or higher, migrate the data
    if (db.verno >= 5) {
      console.log('Database schema is up to date (version 5 or higher)');
      
      // Migrate lead communications data if needed
      await migrateLeadCommunications();
    } else {
      console.warn(`Database schema is not at version 5 (current: ${db.verno}). Some features may not work correctly.`);
    }
    
    console.log('Database initialization complete.');
  } catch (error) {
    console.error('Error initializing database:', error);
    throw error; // Rethrow to allow the caller to handle it
  }
}

// Wrap database operations in error handlers
export async function safeDbOperation<T>(operation: () => Promise<T>, fallback: T): Promise<T> {
  return new Promise<T>(async (resolve) => {
    if (!isBrowser()) {
      resolve(fallback);
      return;
    }
    
    try {
      // First attempt to execute the operation
      try {
        const result = await operation();
        resolve(result);
        return;
      } catch (error: any) {
        // Check if it's a database closed error
        if (error && error.name === 'DatabaseClosedError') {
          console.warn('Database was closed. Attempting to reopen...');
          
          // Try to reopen the database and retry the operation
          try {
            await db.open();
            console.log('Database reopened successfully');
            const result = await operation();
            resolve(result);
            return;
          } catch (reopenError) {
            console.error('Failed to reopen database:', reopenError);
            // Continue to the general error handler
            throw reopenError;
          }
        }
        
        // Rethrow the error if it's not a database closed error
        throw error;
      }
    } catch (error) {
      console.error('Error in database operation:', error);
      resolve(fallback);
    }
  });
}

// Export a function to be called on app startup
export default function setupDatabase() {
  // Safely initialize the database
  if (isBrowser()) {
    // Use setTimeout to defer initialization until after the component is mounted
    setTimeout(() => {
      initializeDatabase().catch(error => {
        console.error('Database initialization failed:', error);
      });
    }, 0);
  } else {
    console.log('Database setup skipped (server-side)');
  }
}

// Add this function after the initializeDatabase function
export async function resetDatabase() {
  if (!isBrowser()) {
    console.log('Cannot reset database on server side');
    return;
  }
  
  try {
    console.log('Closing database...');
    await db.close();
    
    console.log('Deleting database...');
    await new Promise<void>((resolve, reject) => {
      const deleteRequest = window.indexedDB.deleteDatabase('SCFLeadManagement');
      
      deleteRequest.onerror = (event) => {
        console.error('Error deleting database:', event);
        reject(new Error('Failed to delete database'));
      };
      
      deleteRequest.onsuccess = () => {
        console.log('Database deleted successfully');
        resolve();
      };
    });
    
    // Reopen the database with the fresh schema
    console.log('Reopening database with new schema...');
    await db.open();
    console.log('Database reopened with fresh schema');
    
    // Initialize database with sample data
    await dbUtils.initializeDBIfEmpty();
    console.log('Database initialization complete after reset');
    
    return { success: true };
  } catch (error) {
    console.error('Error resetting database:', error);
    return { success: false, error };
  }
}
</file>

<file path="components/SCFleadmanagement/masters/holiday-master.tsx">
"use client"

import { useState, useEffect } from "react"
import MasterLayout from "./master-layout"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { MasterService } from "@/lib/db"
import type { HolidayMaster } from "@/lib/db"
import { ChevronLeft, ChevronRight } from "lucide-react"

// Helper function to format date values
const formatDate = (dateValue: string | number | null | undefined): string => {
  if (!dateValue) return '';
  
  // If it's already a valid ISO date string (YYYY-MM-DD)
  if (typeof dateValue === 'string' && /^\d{4}-\d{2}-\d{2}$/.test(dateValue)) {
    return dateValue;
  }
  
  // If it's a numeric Excel date (days since 1900-01-01)
  if (typeof dateValue === 'number' || !isNaN(Number(dateValue))) {
    // Convert Excel date to JavaScript Date
    // Excel date system (days since 1900-01-01, with leap year bug)
    try {
      const excelDate = typeof dateValue === 'number' ? dateValue : Number(dateValue);
      const jsDate = new Date(Math.round((excelDate - 25569) * 86400 * 1000));
      return jsDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD
    } catch (e) {
      console.error("Error formatting date:", e);
      return String(dateValue);
    }
  }
  
  // Return as is if we can't parse it
  return String(dateValue);
};

export default function HolidayMasterComponent() {
  const [holidays, setHolidays] = useState<HolidayMaster[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage] = useState(10)
  const [totalRecords, setTotalRecords] = useState(0)

  useEffect(() => {
    // Load holiday data from IndexedDB
    const loadHolidays = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Get total records count
        const countResult = await MasterService.getTotalRecords('holiday_master');
        if (countResult.success && countResult.count !== undefined) {
          setTotalRecords(countResult.count);
        } else {
          setError("Failed to load record count");
          return;
        }
        
        // Get paginated records
        const result = await MasterService.getRecords(
          'holiday_master', 
          {}, 
          undefined, 
          itemsPerPage, 
          (currentPage - 1) * itemsPerPage
        );
        
        if (result.success && result.data) {
          // Type assertion to ensure correct type
          setHolidays(result.data as HolidayMaster[]);
        } else {
          setError("Failed to load holiday data");
        }
      } catch (err) {
        console.error("Error loading holidays:", err);
        setError("An unexpected error occurred");
      } finally {
        setLoading(false);
      }
    };

    loadHolidays();
  }, [currentPage, itemsPerPage]);
  
  // Pagination handlers
  const totalPages = Math.ceil(totalRecords / itemsPerPage);
  const handleNextPage = () => setCurrentPage(prev => Math.min(prev + 1, totalPages));
  const handlePrevPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));

  return (
    <MasterLayout 
      title="Holiday Master" 
      description="Manage holidays for your organization"
      storeName="holiday_master"
    >
      {loading ? (
        <div className="flex justify-center py-8">
          <div className="text-center">
            <div className="inline-block animate-spin h-8 w-8 border-4 border-gray-300 dark:border-gray-700 rounded-full border-t-blue-600 dark:border-t-blue-500"></div>
            <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">Loading holidays...</p>
          </div>
        </div>
      ) : error ? (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900/30 rounded-md p-4 my-4">
          <p className="text-red-800 dark:text-red-300">{error}</p>
          <Button 
            variant="outline" 
            size="sm" 
            className="mt-2"
            onClick={() => window.location.reload()}
          >
            Reload
          </Button>
        </div>
      ) : (
        <>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="bg-muted">
                  <TableHead>Date</TableHead>
                  <TableHead>Name</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Description</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {holidays.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={4} className="text-center py-6 text-gray-500 dark:text-gray-400">
                      No holiday data available. Use the Upload tab to add data.
                    </TableCell>
                  </TableRow>
                ) : (
                  holidays.map((holiday, idx) => (
                    <TableRow key={holiday.id || idx}>
                      <TableCell>{formatDate(holiday.date || holiday.Date)}</TableCell>
                      <TableCell>{holiday.name}</TableCell>
                      <TableCell>{holiday.type || holiday.HolidayType}</TableCell>
                      <TableCell>{holiday.description}</TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
          
          {/* Pagination UI */}
          {totalRecords > 0 && (
            <div className="flex items-center justify-between mt-4 text-sm">
              <p className="text-gray-500 dark:text-gray-400">
                Showing {(currentPage - 1) * itemsPerPage + 1} - {Math.min(currentPage * itemsPerPage, totalRecords)} of {totalRecords} records
              </p>
              <div className="flex items-center space-x-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handlePrevPage} 
                  disabled={currentPage === 1}
                  className="h-8 w-8 p-0"
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <span className="text-gray-500 dark:text-gray-400">
                  Page {currentPage} of {totalPages}
                </span>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handleNextPage} 
                  disabled={currentPage === totalPages || totalRecords === 0}
                  className="h-8 w-8 p-0"
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
            </div>
          )}
        </>
      )}
    </MasterLayout>
  )
}
</file>

<file path="components/SCFleadmanagement/masters/pincode-branch-master.tsx">
"use client"

import { useState, useEffect } from "react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Search, Download, Filter, ChevronLeft, ChevronRight } from "lucide-react"
import MasterLayout from "./master-layout"
import { MasterService } from "@/lib/db"
import type { PincodeBranch } from "@/lib/db"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"

// Helper function to safely convert any value to string for search
const safeString = (value: any): string => {
  if (value === null || value === undefined) return '';
  return String(value).toLowerCase();
};

export default function PincodeBranchMaster() {
  const [searchTerm, setSearchTerm] = useState("")
  const [pincodeData, setPincodeData] = useState<PincodeBranch[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage] = useState(10)
  const [totalRecords, setTotalRecords] = useState(0)

  useEffect(() => {
    // Load pincode-branch data from IndexedDB
    const loadPincodeData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Get total records count
        const countResult = await MasterService.getTotalRecords('pincode_branch');
        if (countResult.success && countResult.count !== undefined) {
          setTotalRecords(countResult.count);
        } else {
          setError("Failed to load record count");
          return;
        }
        
        // Get paginated records
        const result = await MasterService.getRecords(
          'pincode_branch', 
          {}, 
          undefined, 
          itemsPerPage, 
          (currentPage - 1) * itemsPerPage
        );
        
        if (result.success && result.data) {
          // Type assertion to ensure correct type
          setPincodeData(result.data as PincodeBranch[]);
        } else {
          setError("Failed to load pincode-branch data");
        }
      } catch (err) {
        console.error("Error loading pincode-branch data:", err);
        setError("An unexpected error occurred");
      } finally {
        setLoading(false);
      }
    };

    loadPincodeData();
  }, [currentPage, itemsPerPage]);
  
  // Pagination handlers
  const totalPages = Math.ceil(totalRecords / itemsPerPage);
  const handleNextPage = () => setCurrentPage(prev => Math.min(prev + 1, totalPages));
  const handlePrevPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));

  const searchTermLower = searchTerm.toLowerCase();
  const filteredData = pincodeData.filter(
    (item) =>
      safeString(item.Pincode || item.pincode).includes(searchTermLower) ||
      safeString(item.BranchCode || item.branchCode).includes(searchTermLower) ||
      safeString(item.BranchName || item.branchName).includes(searchTermLower) ||
      safeString(item.Cluster).includes(searchTermLower) ||
      safeString(item.Region || item.region).includes(searchTermLower)
  )

  return (
    <MasterLayout
      title="Pincode Branch Master"
      description="Manage the mapping between pincodes and branches"
      storeName="pincode_branch"
    >
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-4">
        <div className="relative w-full sm:w-64">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
          <Input
            type="search"
            placeholder="Search by pincode, branch..."
            className="pl-9 w-full"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        <div className="flex gap-2">
          <Button variant="outline" size="sm" className="gap-1">
            <Filter className="h-4 w-4" />
            Filter
          </Button>
        </div>
      </div>

      {loading ? (
        <div className="flex justify-center py-8">
          <div className="text-center">
            <div className="inline-block animate-spin h-8 w-8 border-4 border-gray-300 dark:border-gray-700 rounded-full border-t-blue-600 dark:border-t-blue-500"></div>
            <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">Loading pincode-branch data...</p>
          </div>
        </div>
      ) : error ? (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900/30 rounded-md p-4 my-4">
          <p className="text-red-800 dark:text-red-300">{error}</p>
          <Button 
            variant="outline" 
            size="sm" 
            className="mt-2"
            onClick={() => window.location.reload()}
          >
            Reload
          </Button>
        </div>
      ) : (
        <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] overflow-hidden">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="border-b border-gray-200 dark:border-[#1F1F23] bg-gray-50 dark:bg-[#1F1F23]">
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Pincode</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Branch Code</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Branch Name</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Cluster</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Region</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredData.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={5} className="text-center py-6 text-gray-500 dark:text-gray-400">
                      {pincodeData.length === 0 
                        ? "No pincode-branch data available. Use the Upload tab to add data." 
                        : "No results found for your search."}
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredData.map((item, idx) => (
                    <TableRow
                      key={item.id || idx}
                      className="border-b border-gray-200 dark:border-[#1F1F23] hover:bg-gray-50 dark:hover:bg-[#1F1F23]/50"
                    >
                      <TableCell className="px-4 py-3 font-medium text-gray-900 dark:text-white">{item.Pincode || item.pincode}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.BranchCode || item.branchCode}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.BranchName || item.branchName}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.Cluster}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.Region || item.region}</TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>

          <div className="px-4 py-3 flex flex-col sm:flex-row sm:items-center justify-between border-t border-gray-200 dark:border-[#1F1F23] gap-4">
            <div className="text-sm text-gray-700 dark:text-gray-300">
              Showing <span className="font-medium">{filteredData.length}</span> of{" "}
              <span className="font-medium">{totalRecords}</span> records
            </div>
            
            {totalRecords > itemsPerPage && (
              <div className="flex items-center space-x-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handlePrevPage} 
                  disabled={currentPage === 1}
                  className="h-8 w-8 p-0"
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <span className="text-gray-500 dark:text-gray-400">
                  Page {currentPage} of {totalPages}
                </span>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handleNextPage} 
                  disabled={currentPage === totalPages}
                  className="h-8 w-8 p-0"
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
            )}
          </div>
        </div>
      )}
    </MasterLayout>
  )
}
</file>

<file path="components/SCFleadmanagement/login-form.tsx">
"use client"

import { useState } from "react"
import { Eye, EyeOff, AlertCircle } from "lucide-react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useAuth, UserRole } from "@/components/auth-provider"

// Dummy users for testing
const USERS = [
  { email: "admin@yesbank.in", password: "password", role: "admin" as UserRole, id: "admin001" },
  { email: "rm@yesbank.in", password: "password", role: "rm" as UserRole, id: "RM001" },
  { email: "rm1@yesbank.in", password: "password", role: "rm-inbox" as UserRole, id: "REM0000001" },
  { email: "rm2@yesbank.in", password: "password", role: "rm-inbox" as UserRole, id: "REM0000002" },
  { email: "rm3@yesbank.in", password: "password", role: "rm-inbox" as UserRole, id: "REM0000003" },
  { email: "psm1@yesbank.in", password: "password", role: "psm" as UserRole, id: "PSM0000001" },
  { email: "psm2@yesbank.in", password: "password", role: "psm" as UserRole, id: "PSM0000002" },
]

export default function LoginForm() {
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [showPassword, setShowPassword] = useState(false)
  const [error, setError] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const router = useRouter()
  const { login } = useAuth()

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    setError("")
    setIsLoading(true)
    
    // Find matching user from dummy users
    const user = USERS.find(
      (u) => u.email.toLowerCase() === email.toLowerCase() && u.password === password
    )
    
    setTimeout(() => {
      if (user) {
        // Login with email, role and ID
        login(user.email, user.role, user.id)
        
        // Redirect based on role
        if (user.role === "rm") {
          router.push("/rm-leads")
        } else if (user.role === "rm-inbox") {
          router.push("/rm-inbox")
        } else {
          router.push("/dashboard")
        }
      } else {
        setError("Invalid email or password")
        setIsLoading(false)
      }
    }, 1000)
  }

  return (
    <div className="w-full space-y-5">
      <div className="mb-4 text-center">
        <h2 className="text-2xl font-semibold text-gray-900 dark:text-white">Sign in to SCF Lead Management</h2>
        <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">
          Test credentials:
          <br />
          Admin: admin@yesbank.in / password
          <br />
          RM: rm@yesbank.in / password
          <br />
          RM Inbox Users: rm1@yesbank.in, rm2@yesbank.in, rm3@yesbank.in / password
          <br />
          PSM Users: psm1@yesbank.in, psm2@yesbank.in / password
        </p>
      </div>
      
      <form onSubmit={handleSubmit} className="space-y-4">
        {error && (
          <div className="p-3 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800/30 rounded-md flex items-center gap-3 text-red-700 dark:text-red-400">
            <AlertCircle className="h-5 w-5 flex-shrink-0" />
            <p className="text-sm">{error}</p>
          </div>
        )}
        
        <div className="space-y-2">
          <Label htmlFor="email">Email</Label>
          <Input
            id="email"
            type="email"
            placeholder="email@yesbank.in"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="h-11"
          />
        </div>
        
        <div className="space-y-2">
          <div className="flex justify-between items-center">
            <Label htmlFor="password">Password</Label>
            <a href="#" className="text-xs text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
              Forgot password?
            </a>
          </div>
          <div className="relative">
            <Input
              id="password"
              type={showPassword ? "text" : "password"}
              placeholder="Enter your password"
              required
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="h-11"
            />
            <button
              type="button"
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
              onClick={() => setShowPassword(!showPassword)}
            >
              {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
            </button>
          </div>
        </div>
        
        <Button type="submit" className="w-full h-11 mt-6" disabled={isLoading}>
          {isLoading ? "Signing in..." : "Sign In"}
        </Button>
      </form>
    </div>
  )
}
</file>

<file path="components/client-side-auth-wrapper.tsx">
"use client"

import { useEffect, useState } from "react"
import { useAuth } from "./auth-provider"
import RouteGuard from "./route-guard"
import { initializeDatabase } from "@/lib/db-init"

export default function ClientSideAuthWrapper({ children }: { children: React.ReactNode }) {
  const { isAuthenticated } = useAuth()
  const [dbInitialized, setDbInitialized] = useState(false)
  const [dbError, setDbError] = useState<string | null>(null)

  // Initialize the database
  useEffect(() => {
    async function initDb() {
      try {
        await initializeDatabase()
        setDbInitialized(true)
        console.log('Database initialized successfully')
      } catch (err: any) {
        console.error('Error initializing database:', err)
        setDbError(err?.message || 'Failed to initialize database')
      }
    }

    initDb()
  }, [])

  // Check if DB initialization failed
  if (dbError) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center p-4 text-center">
        <div className="rounded-lg bg-red-50 p-6 dark:bg-red-900/30">
          <h2 className="mb-2 text-lg font-semibold text-red-700 dark:text-red-300">
            Database Initialization Error
          </h2>
          <p className="text-red-600 dark:text-red-400">{dbError}</p>
          <p className="mt-4 text-sm text-gray-500 dark:text-gray-400">
            Please try refreshing the page or clearing your browser cache.
          </p>
          <button
            onClick={() => window.location.reload()}
            className="mt-4 rounded-md bg-red-100 px-4 py-2 text-sm font-medium text-red-700 hover:bg-red-200 dark:bg-red-800/30 dark:text-red-300 dark:hover:bg-red-800/50"
          >
            Refresh Page
          </button>
        </div>
      </div>
    )
  }

  // Use the existing RouteGuard for auth protection
  return <RouteGuard>{children}</RouteGuard>
}
</file>

<file path="lib/dbUtils.ts">
// lib/dbUtils.ts
// Helper utilities for working with the database

import db, { AnchorMaster, HierarchyMaster, HolidayMaster, PincodeBranch, RMBranch, MasterService, ErrorCodeMaster, SmartfinStatusUpdate, EmailTemplateMaster } from './db';
import { ERROR_CODES } from './constants';

/**
 * Mapping functions to handle field compatibility between UI components and DB fields
 */

// Map Anchor Master from UI to DB
export function mapAnchorUIToDB(uiData: any): AnchorMaster {
  return {
    id: uiData.anchoruuid || uiData.id || Date.now().toString(), // Fallback to ensure ID exists
    anchorname: uiData.anchorname || '',
    programname: uiData.programname || '',
    anchoruuid: uiData.anchoruuid || uiData.id || '',
    programuuid: uiData.programuuid || '',
    segment: uiData.segment || '',
    PSMName: uiData.PSMName || '',
    PSMADID: uiData.PSMADID || '',
    PSMEmail: uiData.PSMEmail || '',
    UDF1: uiData.UDF1 || '',
    UDF2: uiData.UDF2 || ''
  };
}

// Map Hierarchy Master from UI to DB with all required fields
export function mapHierarchyUIToDB(uiData: any): HierarchyMaster {
  return {
    id: uiData.id || Date.now().toString(),
    
    // Required fields with fallbacks
    EmpNo: uiData.EmpNo || uiData['Emp No'] || uiData.empAdid || '',
    EmpADID: uiData.EmpADID || uiData['Emp ADID'] || uiData.empAdid || '',
    FullName: uiData.FullName || uiData['Full Name'] || uiData.fullName || uiData.employeeName || '',
    
    // Optional fields
    OldNo: uiData.OldNo || uiData['Old No'] || '',
    Gender: uiData.Gender || '',
    EmpStatus: uiData.EmpStatus || uiData['Emp Status'] || '',
    FunctionalDesignation: uiData.FunctionalDesignation || uiData['Functional Designation'] || '',
    Cat: uiData.Cat || '',
    Role: uiData.Role || '',
    Team: uiData.Team || '',
    CBLCode: uiData.CBLCode || uiData['CBL Code'] || '',
    CBLCodeADID: uiData.CBLCodeADID || uiData['CBL Code ADID'] || '',
    CBLName: uiData.CBLName || uiData['CBL Name'] || '',
    Cluster: uiData.Cluster || '',
    RBLCode: uiData.RBLCode || uiData['RBL Code'] || '',
    RBLADIDCode: uiData.RBLADIDCode || uiData['RBL ADID Code'] || uiData.rblAdid || '',
    RBLName: uiData.RBLName || uiData['RBL Name'] || uiData.rblName || '',
    Region: uiData.Region || uiData.region || '',
    ZHCode: uiData.ZHCode || uiData['ZH Code'] || '',
    ZHADID: uiData.ZHADID || uiData['ZH ADID'] || uiData.zhAdid || '',
    ZHName: uiData.ZHName || uiData['ZH Name'] || uiData.zhName || '',
    Zone: uiData.Zone || '',
    Vertical: uiData.Vertical || '',
    BranchCode: uiData.BranchCode || uiData['Branch Code'] || '',
    OfficeLocationCode: uiData.OfficeLocationCode || uiData['Office Location Code'] || '',
    Location: uiData.Location || '',
    City: uiData.City || '',
    State: uiData.State || '',
    DateOfJoining: uiData.DateOfJoining || uiData['Date Of Joining'] || '',
    YesEmail: uiData.YesEmail || uiData['Yes Email'] || uiData.yesEmail || '',
    Mobile: uiData.Mobile || uiData.mobile || '',
    ExitMonthResignDate: uiData.ExitMonthResignDate || uiData['Exit Month/Resign date'] || '',
    Remarks: uiData.Remarks || '',
    Segment: uiData.Segment || '',
    
    // Legacy fields for backward compatibility
    employeeName: uiData.employeeName || uiData.FullName || uiData['Full Name'] || '',
    empAdid: uiData.empAdid || uiData.EmpADID || uiData['Emp ADID'] || '',
    fullName: uiData.fullName || uiData.FullName || uiData['Full Name'] || '',
    rblAdid: uiData.rblAdid || uiData.RBLADIDCode || uiData['RBL ADID Code'] || '',
    rblName: uiData.rblName || uiData.RBLName || uiData['RBL Name'] || '',
    region: uiData.region || uiData.Region || '',
    zhAdid: uiData.zhAdid || uiData.ZHADID || uiData['ZH ADID'] || '',
    zhName: uiData.zhName || uiData.ZHName || uiData['ZH Name'] || '',
    yesEmail: uiData.yesEmail || uiData.YesEmail || uiData['Yes Email'] || '',
    mobile: uiData.mobile || uiData.Mobile || ''
  };
}

// Map Holiday Master from UI to DB
export function mapHolidayUIToDB(uiData: any): HolidayMaster {
  return {
    id: uiData.id || Date.now().toString(),
    Date: uiData.Date || uiData.date || '',
    date: uiData.date || uiData.Date || '',
    HolidayType: uiData.HolidayType || uiData.type || '',
    type: uiData.type || uiData.HolidayType || '',
    name: uiData.name || '',
    description: uiData.description || ''
  };
}

// Map Pincode Branch from UI to DB
export function mapPincodeBranchUIToDB(uiData: any): PincodeBranch {
  return {
    id: uiData.id || Date.now().toString(),
    
    // Map new fields
    Pincode: uiData.Pincode || uiData.pincode || '',
    BranchCode: uiData.BranchCode || uiData['Branch Code'] || uiData.branchCode || '',
    BranchName: uiData.BranchName || uiData['Branch Name'] || uiData.branchName || '',
    Cluster: uiData.Cluster || '',
    Region: uiData.Region || uiData.region || '',
    
    // Legacy fields for backward compatibility
    pincode: uiData.pincode || uiData.Pincode || '',
    branchCode: uiData.branchCode || uiData.BranchCode || uiData['Branch Code'] || '',
    branchName: uiData.branchName || uiData.BranchName || uiData['Branch Name'] || '',
    region: uiData.region || uiData.Region || '',
    city: uiData.city || uiData.City || '',
    state: uiData.state || uiData.State || '',
    active: uiData.active !== undefined ? uiData.active : true
  };
}

// Map RM Branch from UI to DB - Fix linter errors by adding missing fields to mapRMBranchUIToDB 
export function mapRMBranchUIToDB(uiData: any): RMBranch {
  return {
    id: uiData.id || Date.now().toString(),
    rmId: uiData.rmId || '',
    rmName: uiData.rmName || '',
    branchCode: uiData.branchCode || '',
    branchName: uiData.branchName || '',
    region: uiData.region || '',
    role: uiData.role || '',
    active: uiData.active !== undefined ? uiData.active : true
  };
}

// Map ErrorCode from UI to DB - Fix linter errors by adding missing fields to mapErrorCodeUIToDB
export function mapErrorCodeUIToDB(uiData: any): ErrorCodeMaster {
  return {
    id: uiData.id || uiData.errorCode || Date.now().toString(),
    errorCode: uiData.errorCode || '',
    description: uiData.description || '',
    module: uiData.module || '',
    severity: uiData.severity || 'Error'
  };
}

// Map Smartfin Status Update from UI/Excel to DB
export function mapSmartfinStatusUpdateUIToDB(uiData: any): SmartfinStatusUpdate {
  // Helper function to convert Excel date formats if needed
  const parseDate = (dateValue: any): string => {
    if (!dateValue) return '';
    
    // If it's a number (Excel date format), convert it
    if (typeof dateValue === 'number') {
      try {
        // Excel dates are number of days since Dec 30, 1899
        const excelDate = dateValue;
        const date = new Date(Math.round((excelDate - 25569) * 86400 * 1000));
        return date.toISOString().split('T')[0]; // Format as YYYY-MM-DD
      } catch (e) {
        console.error("Error converting Excel date:", e);
        return String(dateValue);
      }
    }
    
    // If it's already a string, return as is
    return String(dateValue);
  };

  return {
    applicationNo: String(uiData["Application No"] || ''),
    createdDate: parseDate(uiData["Created Date"]),
    firmName: String(uiData["Firm Name"] || ''),
    applicationType: String(uiData["Application Type"] || ''),
    status: String(uiData["Status"] || ''),
    branch: String(uiData["Branch"] || ''),
    requestedAmount: String(uiData["Requested Amount"] || ''),
    sanctionedAmount: String(uiData["Sanctioned Amount"] || ''),
    sanctionDate: parseDate(uiData["Sanction Date"]),
    programMappedDate: parseDate(uiData["Program Mapped Date"]),
    rmName: String(uiData["RM Name"] || ''),
    rmTAT: String(uiData["RM TAT"] || ''),
    cpaName: String(uiData["CPA Name"] || ''),
    cpaTAT: String(uiData["CPA TAT"] || ''),
    cmName: String(uiData["CM Name"] || ''),
    cmTAT: String(uiData["CM TAT"] || ''),
    approvalRequestedDate: parseDate(uiData["Approval Requested Date"]),
    approvalTAT: String(uiData["Approval TAT"] || ''),
    totalTAT: String(uiData["Total TAT"] || ''),
    uploadTimestamp: new Date().toISOString()
  };
}

// Map Email Template from UI/Excel to DB
export function mapEmailTemplateUIToDB(uiData: any): EmailTemplateMaster {
  // Parse string arrays for recipients
  const parseRecipients = (recipients: string): string[] => {
    if (!recipients) return [];
    // Handle both comma-separated strings and already parsed arrays
    if (Array.isArray(recipients)) return recipients;
    
    return recipients.split(',').map(item => item.trim()).filter(Boolean);
  };

  const now = new Date().toISOString();
  
  return {
    id: uiData.id || Date.now().toString(),
    templateName: String(uiData["Template Name"] || ''),
    description: String(uiData["Description"] || ''),
    subject: String(uiData["Subject"] || ''),
    body: String(uiData["Body"] || ''),
    toRecipients: parseRecipients(uiData["To Recipients"]),
    ccRecipients: parseRecipients(uiData["CC Recipients"]),
    category: String(uiData["Category"] || ''),
    isActive: uiData["Is Active"] === true || uiData["Is Active"] === "true" || uiData["Is Active"] === "Yes" || uiData["Is Active"] === "yes" || uiData["Is Active"] === 1,
    createdAt: uiData.createdAt || now,
    updatedAt: uiData.updatedAt || now
  };
}

/**
 * Initialize the database with sample data if it's empty
 */
export async function initializeDBIfEmpty() {
  try {
    // Check if anchor_master is empty
    const anchorsCount = await db.anchor_master.count();
    if (anchorsCount === 0) {
      // Sample Anchor Master data
      const sampleAnchors: AnchorMaster[] = [
        {
          id: "anc-001",
          anchorname: "ABC Corp",
          programname: "Supply Chain Finance",
          anchoruuid: "anc-001",
          programuuid: "prog-001",
          segment: "Large Corporate",
          PSMName: "John Doe",
          PSMADID: "ADID001",
          PSMEmail: "john.doe@example.com",
          UDF1: "Custom1",
          UDF2: "Custom2"
        },
        {
          id: "anc-002",
          anchorname: "XYZ Industries",
          programname: "Dealer Finance",
          anchoruuid: "anc-002",
          programuuid: "prog-002",
          segment: "Mid-size",
          PSMName: "Jane Smith",
          PSMADID: "ADID002",
          PSMEmail: "jane.smith@example.com",
          UDF1: "Custom3",
          UDF2: "Custom4"
        }
      ];
      
      // Insert sample anchors
      await db.anchor_master.bulkAdd(sampleAnchors);
      console.log("Initialized sample anchor data");
    }
    
    // Check if hierarchy_master is empty
    const hierarchyCount = await db.hierarchy_master.count();
    if (hierarchyCount === 0) {
      // Sample Hierarchy Master data
      const sampleHierarchy: HierarchyMaster[] = [
        {
          id: "EMP001",
          // New required fields
          EmpNo: "EMP001",
          EmpADID: "EMP001",
          FullName: "Vikram Mehta",
          // Optional new fields
          Role: "RM",
          Team: "Sales",
          Region: "North",
          Zone: "North Zone",
          RBLCode: "RBL001",
          RBLADIDCode: "RBL001",
          RBLName: "RBL Name 1",
          ZHADID: "ZH001",
          ZHName: "ZH Name 1",
          YesEmail: "vikram.mehta@example.com",
          Mobile: "9876543210",
          // Legacy fields
          employeeName: "Vikram Mehta",
          empAdid: "EMP001",
          fullName: "Vikram Mehta",
          rblAdid: "RBL001",
          rblName: "RBL Name 1",
          region: "North",
          zhAdid: "ZH001",
          zhName: "ZH Name 1",
          yesEmail: "vikram.mehta@example.com",
          mobile: "9876543210"
        },
        {
          id: "EMP002",
          // New required fields
          EmpNo: "EMP002",
          EmpADID: "EMP002",
          FullName: "Neha Gupta",
          // Optional new fields
          Role: "RM",
          Team: "Support",
          Region: "West",
          Zone: "West Zone",
          RBLCode: "RBL002",
          RBLADIDCode: "RBL002",
          RBLName: "RBL Name 2",
          ZHADID: "ZH002",
          ZHName: "ZH Name 2",
          YesEmail: "neha.gupta@example.com",
          Mobile: "9123456780",
          // Legacy fields
          employeeName: "Neha Gupta",
          empAdid: "EMP002",
          fullName: "Neha Gupta",
          rblAdid: "RBL002",
          rblName: "RBL Name 2",
          region: "West",
          zhAdid: "ZH002",
          zhName: "ZH Name 2",
          yesEmail: "neha.gupta@example.com",
          mobile: "9123456780"
        }
      ];
      
      // Insert sample hierarchy
      await db.hierarchy_master.bulkAdd(sampleHierarchy);
      console.log("Initialized sample hierarchy data");
    }
    
    // Check if holiday_master is empty
    const holidaysCount = await db.holiday_master.count();
    if (holidaysCount === 0) {
      // Sample Holiday Master data
      const sampleHolidays: HolidayMaster[] = [
        {
          id: "hol-001",
          date: "2025-01-01",
          Date: "2025-01-01",
          name: "New Year's Day",
          type: "National",
          HolidayType: "National",
          description: "New Year's Day celebration"
        },
        {
          id: "hol-002",
          date: "2025-01-26",
          Date: "2025-01-26",
          name: "Republic Day",
          type: "National",
          HolidayType: "National",
          description: "National Republic Day"
        }
      ];
      
      // Insert sample holidays
      await db.holiday_master.bulkAdd(sampleHolidays);
      console.log("Initialized sample holiday data");
    }
    
    // Check if error_codes is empty
    const errorCodesCount = await db.error_codes.count();
    if (errorCodesCount === 0) {
      // Initialize error codes from constants
      const errorCodesList: ErrorCodeMaster[] = Object.values(ERROR_CODES).map(ec => ({
        id: ec.code,
        errorCode: ec.code,
        description: ec.description,
        module: ec.module,
        severity: ec.severity as 'Error' | 'Warning' | 'Info'
      }));
      
      // Insert error codes
      await db.error_codes.bulkAdd(errorCodesList);
      console.log("Initialized error codes data");
    }
    
    // Check if pincode_branch is empty
    const pincodeCount = await db.pincode_branch.count();
    if (pincodeCount === 0) {
      // Sample Pincode Branch data
      const samplePincodeBranches: PincodeBranch[] = [
        {
          id: "pin-001",
          // New fields
          Pincode: "400001",
          BranchCode: "BRANCH001",
          BranchName: "Mumbai Main",
          Cluster: "Mumbai Metropolitan",
          Region: "West",
          // Legacy fields
          pincode: "400001",
          branchCode: "BRANCH001",
          branchName: "Mumbai Main",
          city: "Mumbai",
          state: "Maharashtra",
          region: "West",
          active: true
        },
        {
          id: "pin-002",
          // New fields
          Pincode: "110001",
          BranchCode: "BRANCH002",
          BranchName: "Delhi Central",
          Cluster: "Delhi NCR",
          Region: "North",
          // Legacy fields
          pincode: "110001",
          branchCode: "BRANCH002",
          branchName: "Delhi Central",
          city: "New Delhi",
          state: "Delhi",
          region: "North",
          active: true
        }
      ];
      
      // Insert sample pincode branches
      await db.pincode_branch.bulkAdd(samplePincodeBranches);
      console.log("Initialized sample pincode branch data");
    }
    
    // Check if email_template_master is empty
    const emailTemplatesCount = await db.email_template_master.count();
    if (emailTemplatesCount === 0) {
      // Sample Email Template Master data
      const sampleEmailTemplates: EmailTemplateMaster[] = [
        {
          id: "template-001",
          templateName: "Lead Assignment Email",
          description: "Email sent to RM when a new lead is assigned",
          subject: "New Lead Assigned: {{leadId}}",
          body: `<p>Dear {{rmName}},</p>
<p>A new lead has been assigned to you:</p>
<ul>
  <li><strong>Lead ID:</strong> {{leadId}}</li>
  <li><strong>Firm Name:</strong> {{firmName}}</li>
  <li><strong>Program:</strong> {{programName}}</li>
  <li><strong>Contact Person:</strong> {{contactPerson}}</li>
  <li><strong>Contact Email:</strong> {{contactEmail}}</li>
  <li><strong>Contact Phone:</strong> {{contactPhone}}</li>
</ul>
<p>Please review and take appropriate action within 48 hours.</p>
<p>Regards,<br/>SCF Lead Management System</p>`,
          toRecipients: ["{{Lead.RMEmail}}"],
          ccRecipients: ["{{Lead.CBLEmail}}", "{{Lead.RBLEmail}}"],
          category: "Assignment",
          isActive: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        {
          id: "template-002",
          templateName: "Lead Escalation Email",
          description: "Email sent when a lead is escalated due to inactivity",
          subject: "ESCALATION: Lead {{leadId}} Requires Attention",
          body: `<p>Dear {{rmName}},</p>
<p>The following lead has been escalated due to inactivity:</p>
<ul>
  <li><strong>Lead ID:</strong> {{leadId}}</li>
  <li><strong>Firm Name:</strong> {{firmName}}</li>
  <li><strong>Program:</strong> {{programName}}</li>
  <li><strong>Days Since Assignment:</strong> {{daysSinceAssignment}}</li>
</ul>
<p>Please take immediate action.</p>
<p>Regards,<br/>SCF Lead Management System</p>`,
          toRecipients: ["{{Lead.RMEmail}}", "{{Lead.RBLEmail}}"],
          ccRecipients: ["{{Lead.ZHEmail}}"],
          category: "Escalation",
          isActive: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        {
          id: "template-003",
          templateName: "Weekly Summary Notification",
          description: "Weekly summary of lead statuses sent to team managers",
          subject: "Weekly Lead Status Summary: {{weekStartDate}} - {{weekEndDate}}",
          body: `<p>Dear {{managerName}},</p>
<p>Here is the weekly summary of leads for your team:</p>
<ul>
  <li><strong>New Leads:</strong> {{newLeadsCount}}</li>
  <li><strong>Leads in Progress:</strong> {{inProgressLeadsCount}}</li>
  <li><strong>Completed Leads:</strong> {{completedLeadsCount}}</li>
  <li><strong>Overdue Leads:</strong> {{overdueLeadsCount}}</li>
</ul>
<p>See attached report for details.</p>
<p>Regards,<br/>SCF Lead Management System</p>`,
          toRecipients: ["{{Manager.Email}}"],
          ccRecipients: [],
          category: "Notification",
          isActive: true,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
      ];
      
      // Insert sample email templates
      await db.email_template_master.bulkAdd(sampleEmailTemplates);
      console.log("Initialized sample email template data");
    }
    
    return { success: true };
  } catch (error: any) {
    console.error("Error initializing DB:", error);
    return { success: false, error: error.message };
  }
}

/**
 * Get counts of records in each master data table
 */
export async function getMasterDataCounts() {
  try {
    const [
      anchorsCount,
      hierarchyCount,
      holidaysCount,
      pincodeBranchCount,
      rmBranchCount,
      errorCodesCount,
      smartfinStatusCount,
      emailTemplateCount
    ] = await Promise.all([
      db.anchor_master.count(),
      db.hierarchy_master.count(),
      db.holiday_master.count(),
      db.pincode_branch.count(),
      db.rm_branch.count(),
      db.error_codes.count(),
      db.smartfin_status_updates.count(),
      db.email_template_master.count()
    ]);
    
    const counts = {
      anchor_master: anchorsCount,
      hierarchy_master: hierarchyCount,
      holiday_master: holidaysCount,
      pincode_branch: pincodeBranchCount,
      rm_branch: rmBranchCount,
      error_codes: errorCodesCount,
      smartfin_status_updates: smartfinStatusCount,
      email_template_master: emailTemplateCount
    };
    
    return { success: true, data: counts };
  } catch (error: any) {
    console.error("Error getting master data counts:", error);
    return { success: false, error: error.message };
  }
}

export default {
  initializeDBIfEmpty,
  getMasterDataCounts,
  mapAnchorUIToDB,
  mapHierarchyUIToDB,
  mapHolidayUIToDB,
  mapPincodeBranchUIToDB,
  mapRMBranchUIToDB,
  mapErrorCodeUIToDB,
  mapSmartfinStatusUpdateUIToDB,
  mapEmailTemplateUIToDB
};
</file>

<file path="app/layout.tsx">
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "./globals.css"
import { ThemeProvider } from "@/components/theme-provider"
import { AuthProvider } from "@/components/auth-provider"
import ClientSideAuthWrapper from "@/components/client-side-auth-wrapper"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "SCF Lead Management",
  description: "Supply Chain Finance Lead Management System",
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <AuthProvider>
            <ClientSideAuthWrapper>
              {children}
            </ClientSideAuthWrapper>
          </AuthProvider>
        </ThemeProvider>
      </body>
    </html>
  )
}
</file>

<file path="components/SCFleadmanagement/masters/hierarchy-master.tsx">
"use client"

import { useState, useEffect } from "react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Search, Filter, ChevronLeft, ChevronRight } from "lucide-react"
import MasterLayout from "./master-layout"
import { MasterService } from "@/lib/db"
import type { HierarchyMaster } from "@/lib/db"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"

// Helper function to safely convert any value to string for search
const safeString = (value: any): string => {
  if (value === null || value === undefined) return '';
  return String(value).toLowerCase();
};

export default function HierarchyMaster() {
  const [searchTerm, setSearchTerm] = useState("")
  const [hierarchyData, setHierarchyData] = useState<HierarchyMaster[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage] = useState(10)
  const [totalRecords, setTotalRecords] = useState(0)

  useEffect(() => {
    // Load hierarchy data from IndexedDB
    const loadHierarchy = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Get total records count
        const countResult = await MasterService.getTotalRecords('hierarchy_master');
        if (countResult.success && countResult.count !== undefined) {
          setTotalRecords(countResult.count);
        } else {
          setError("Failed to load record count");
          return;
        }
        
        // Get paginated records
        const result = await MasterService.getRecords(
          'hierarchy_master', 
          {}, 
          undefined, 
          itemsPerPage, 
          (currentPage - 1) * itemsPerPage
        );
        
        if (result.success && result.data) {
          // Type assertion to ensure correct type
          setHierarchyData(result.data as HierarchyMaster[]);
        } else {
          setError("Failed to load hierarchy data");
        }
      } catch (err) {
        console.error("Error loading hierarchy:", err);
        setError("An unexpected error occurred");
      } finally {
        setLoading(false);
      }
    };

    loadHierarchy();
  }, [currentPage, itemsPerPage]);
  
  // Pagination handlers
  const totalPages = Math.ceil(totalRecords / itemsPerPage);
  const handleNextPage = () => setCurrentPage(prev => Math.min(prev + 1, totalPages));
  const handlePrevPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));

  const searchTermLower = searchTerm.toLowerCase();
  const filteredData = hierarchyData.filter(
    (item) =>
      safeString(item.EmpADID || item.empAdid).includes(searchTermLower) ||
      safeString(item.FullName || item.fullName || item.employeeName).includes(searchTermLower) ||
      safeString(item.RBLADIDCode || item.rblAdid).includes(searchTermLower) ||
      safeString(item.RBLName || item.rblName).includes(searchTermLower) ||
      safeString(item.Region || item.region).includes(searchTermLower) ||
      safeString(item.ZHADID || item.zhAdid).includes(searchTermLower) ||
      safeString(item.ZHName || item.zhName).includes(searchTermLower) ||
      safeString(item.YesEmail || item.yesEmail).includes(searchTermLower) ||
      safeString(item.Mobile || item.mobile).includes(searchTermLower) ||
      safeString(item.Team).includes(searchTermLower) ||
      safeString(item.Role).includes(searchTermLower) ||
      safeString(item.Zone).includes(searchTermLower)
  )

  return (
    <MasterLayout
      title="Hierarchy Master"
      description="Manage the organizational hierarchy structure"
      lastUpdated={{
        date: "Mar 30, 2025, 11:15 AM",
        user: "Michael Brown",
      }}
      storeName="hierarchy_master"
    >
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-4">
        <div className="relative w-full sm:w-64">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
          <Input
            type="search"
            placeholder="Search by employee, designation..."
            className="pl-9 w-full"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>

        <div className="flex gap-2">
          <Button variant="outline" size="sm" className="gap-1">
            <Filter className="h-4 w-4" />
            Filter
          </Button>
        </div>
      </div>

      {loading ? (
        <div className="flex justify-center py-8">
          <div className="text-center">
            <div className="inline-block animate-spin h-8 w-8 border-4 border-gray-300 dark:border-gray-700 rounded-full border-t-blue-600 dark:border-t-blue-500"></div>
            <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">Loading hierarchy data...</p>
          </div>
        </div>
      ) : error ? (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900/30 rounded-md p-4 my-4">
          <p className="text-red-800 dark:text-red-300">{error}</p>
          <Button 
            variant="outline" 
            size="sm" 
            className="mt-2"
            onClick={() => window.location.reload()}
          >
            Reload
          </Button>
        </div>
      ) : (
        <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] overflow-hidden">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="border-b border-gray-200 dark:border-[#1F1F23] bg-gray-50 dark:bg-[#1F1F23]">
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Emp ADID</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Full Name</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Role</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Team</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Region</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Zone</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">RBL Name</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Email</TableHead>
                  <TableHead className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Mobile</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredData.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={9} className="text-center py-6 text-gray-500 dark:text-gray-400">
                      {hierarchyData.length === 0 
                        ? "No hierarchy data available. Use the Upload tab to add data." 
                        : "No results found for your search."}
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredData.map((item, idx) => (
                    <TableRow
                      key={item.id || idx}
                      className="border-b border-gray-200 dark:border-[#1F1F23] hover:bg-gray-50 dark:hover:bg-[#1F1F23]/50"
                    >
                      <TableCell className="px-4 py-3 font-medium text-gray-900 dark:text-white">{item.EmpADID || item.empAdid}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.FullName || item.fullName || item.employeeName}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.Role}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.Team}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.Region || item.region}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.Zone}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.RBLName || item.rblName}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.YesEmail || item.yesEmail}</TableCell>
                      <TableCell className="px-4 py-3 text-gray-700 dark:text-gray-300">{item.Mobile || item.mobile}</TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>

          <div className="px-4 py-3 flex flex-col sm:flex-row sm:items-center justify-between border-t border-gray-200 dark:border-[#1F1F23] gap-4">
            <div className="text-sm text-gray-700 dark:text-gray-300">
              Showing <span className="font-medium">{filteredData.length}</span> of{" "}
              <span className="font-medium">{totalRecords}</span> records
            </div>
            
            {totalRecords > itemsPerPage && (
              <div className="flex items-center space-x-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handlePrevPage} 
                  disabled={currentPage === 1}
                  className="h-8 w-8 p-0"
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <span className="text-gray-500 dark:text-gray-400">
                  Page {currentPage} of {totalPages}
                </span>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handleNextPage} 
                  disabled={currentPage === totalPages}
                  className="h-8 w-8 p-0"
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
            )}
          </div>
        </div>
      )}
    </MasterLayout>
  )
}
</file>

<file path="components/SCFleadmanagement/masters/master-layout.tsx">
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Database, Upload, FileSpreadsheet, AlertCircle, CheckCircle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { MasterService } from "@/lib/db"
import dbUtils from "@/lib/dbUtils"
import { safeDbOperation } from "@/lib/db-init"
import { resetDatabase } from "@/lib/db-init"

interface MasterLayoutProps {
  title: string
  description: string
  children: React.ReactNode
  lastUpdated?: {
    date: string
    user: string
  }
  storeName?: "anchor_master" | "hierarchy_master" | "holiday_master" | "pincode_branch" | "rm_branch" | "error_codes" | "smartfin_status_updates" | "email_template_master"
  errorMessage?: string;
}

export default function MasterLayout({ 
  title, 
  description, 
  children, 
  lastUpdated,
  storeName,
  errorMessage
}: MasterLayoutProps) {
  const [activeTab, setActiveTab] = useState("view")
  const [file, setFile] = useState<File | null>(null)
  const [validationStatus, setValidationStatus] = useState<"idle" | "validating" | "success" | "error">("idle")
  const [validationMessage, setValidationMessage] = useState("")
  const [recordsCount, setRecordsCount] = useState<number | null>(null)
  const [lastUploadTimestamp, setLastUploadTimestamp] = useState<string | null>(null)
  const [dbError, setDbError] = useState<string | null>(null)
  const [resettingDb, setResettingDb] = useState(false)
  
  // Initialize database, get record counts, and check last upload timestamp
  useEffect(() => {
    const initDB = async () => {
      try {
        // Initialize DB with sample data if empty
        await dbUtils.initializeDBIfEmpty();
        setDbError(null); // Clear any previous errors
        
        // Get record counts for this store
        if (storeName) {
          // Use safeDbOperation to handle potential database errors
          const countResult = await safeDbOperation(
            async () => dbUtils.getMasterDataCounts(),
            { success: false, data: { 
              anchor_master: 0,
              hierarchy_master: 0,
              holiday_master: 0,
              pincode_branch: 0,
              rm_branch: 0,
              error_codes: 0,
              smartfin_status_updates: 0,
              email_template_master: 0
            }}
          );
          
          if (countResult.success && countResult.data) {
            setRecordsCount(countResult.data[storeName]);
          } else if (countResult.error) {
            setDbError("Database error: " + countResult.error);
          }
          
          // Check if there's a last upload timestamp in localStorage
          const timestamp = localStorage.getItem(`lastUpload_${storeName}`);
          if (timestamp) {
            setLastUploadTimestamp(timestamp);
          }
        }
      } catch (error: any) {
        console.error("Error initializing database:", error);
        setDbError(error.message || "Failed to initialize database");
      }
    };
    
    initDB();
  }, [storeName]);

  // Add a handler to reset the database
  const handleResetDatabase = async () => {
    if (confirm("This will reset the database and reload the page. All data will be lost. Are you sure?")) {
      setResettingDb(true);
      try {
        await resetDatabase();
        // Reload the page after reset
        window.location.reload();
      } catch (err) {
        console.error("Error resetting database:", err);
        setDbError("Failed to reset database");
        setResettingDb(false);
      }
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0]
    if (selectedFile) {
      setFile(selectedFile)
      setValidationStatus("idle")
      setValidationMessage("")
    }
  }

  const handleValidate = () => {
    if (!file) return

    setValidationStatus("validating")

    // Simulate validation process
    setTimeout(() => {
      // For demo purposes, we'll randomly succeed or fail
      const isValid = Math.random() > 0.3

      if (isValid) {
        setValidationStatus("success")
        setValidationMessage("File validation successful. Ready to upload.")
      } else {
        setValidationStatus("error")
        setValidationMessage("Validation failed. Please check the file format and data.")
      }
    }, 1500)
  }

  const handleUpload = async () => {
    if (!file || validationStatus !== "success" || !storeName) return

    // Here we actually upload the file using MasterService
    try {
      setValidationMessage("Uploading, please wait...");
      
      // Use safeDbOperation to handle potential database errors
      const result = await safeDbOperation(
        async () => MasterService.uploadExcel(storeName, file),
        { success: false, errors: ["Database operation failed"] }
      );
      
      if (result.success) {
        // Store the current timestamp in localStorage
        const now = new Date().toLocaleString();
        localStorage.setItem(`lastUpload_${storeName}`, now);
        setLastUploadTimestamp(now);
        
        alert(`File '${file.name}' was successfully uploaded and processed.`);
        
        // Update the record count
        const countResult = await safeDbOperation(
          async () => dbUtils.getMasterDataCounts(),
          { success: false, data: { 
            anchor_master: 0,
            hierarchy_master: 0,
            holiday_master: 0,
            pincode_branch: 0,
            rm_branch: 0,
            error_codes: 0,
            smartfin_status_updates: 0,
            email_template_master: 0
          }}
        );
        
        if (countResult.success && countResult.data) {
          setRecordsCount(countResult.data[storeName]);
        }
      } else {
        alert(`Upload encountered some issues: ${result.errors?.join(", ")}`);
      }
      
      // Reset state after upload
      setFile(null);
      setValidationStatus("idle");
      setValidationMessage("");
      setActiveTab("view"); // Automatically go back to View Master Data
    } catch (error) {
      console.error("Upload error:", error);
      alert("An error occurred during the upload process.");
    }
  }

  const handleDownloadTemplate = () => {
    if (!storeName) return;
    
    // Use the MasterService to download the template
    MasterService.downloadTemplate(storeName);
  }

  return (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">{title}</h1>
          <p className="text-sm text-gray-500 dark:text-gray-400">{description}</p>
          {recordsCount !== null && (
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
              Total records: <span className="font-medium">{recordsCount}</span>
            </p>
          )}
        </div>

        {(lastUpdated || lastUploadTimestamp) && (
          <div className="text-sm text-gray-500 dark:text-gray-400">
            Last updated on <span className="font-medium">{lastUpdated?.date || lastUploadTimestamp}</span> by{" "}
            <span className="font-medium">{lastUpdated?.user || "System"}</span>
          </div>
        )}
      </div>

      {/* Display error if database error occurs */}
      {(dbError || errorMessage) && (
        <div className="bg-red-50 text-red-600 p-4 rounded-md border border-red-200 mb-4">
          <div className="flex flex-col sm:flex-row justify-between items-center">
            <div>
              <h3 className="font-medium">Database Error</h3>
              <p className="text-sm">{dbError || errorMessage}</p>
            </div>
            <Button 
              variant="destructive" 
              size="sm" 
              onClick={handleResetDatabase}
              className="mt-2 sm:mt-0"
              disabled={resettingDb}
            >
              {resettingDb ? "Resetting..." : "Reset Database"}
            </Button>
          </div>
          <p className="text-xs mt-2">
            If you're seeing schema errors, you might need to reset the database. This will delete all data.
          </p>
        </div>
      )}

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid grid-cols-2 mb-4">
          <TabsTrigger value="view" className="flex items-center gap-2">
            <Database className="h-4 w-4" />
            View Master Data
          </TabsTrigger>
          <TabsTrigger value="upload" className="flex items-center gap-2">
            <Upload className="h-4 w-4" />
            Upload New Data
          </TabsTrigger>
        </TabsList>

        <TabsContent value="view" className="space-y-4">
          {children}
        </TabsContent>

        <TabsContent value="upload" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Upload Excel File</CardTitle>
              <CardDescription>
                Upload an Excel file to update the master data. The file will be validated before updating.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {storeName && (
                <div className="mb-4">
                  <Button
                    variant="outline"
                    onClick={handleDownloadTemplate}
                    className="text-sm"
                  >
                    Download Template
                  </Button>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                    Download and use this template to ensure your data is formatted correctly.
                  </p>
                </div>
              )}
              
              <div className="border-2 border-dashed border-gray-300 dark:border-gray-700 rounded-lg p-6 text-center relative">
                {!file ? (
                  <>
                    <FileSpreadsheet className="mx-auto h-12 w-12 text-gray-400" />
                    <div className="mt-4">
                      <p className="text-sm font-medium text-gray-900 dark:text-white">
                        Drag and drop your Excel file here
                      </p>
                      <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">or click to browse files</p>
                    </div>
                    <input
                      type="file"
                      className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                      accept=".xlsx,.xls"
                      onChange={handleFileChange}
                    />
                  </>
                ) : (
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <FileSpreadsheet className="h-10 w-10 text-green-500" />
                      <div className="ml-4 text-left">
                        <p className="text-sm font-medium text-gray-900 dark:text-white">{file.name}</p>
                        <p className="text-xs text-gray-500 dark:text-gray-400">{(file.size / 1024).toFixed(2)} KB</p>
                      </div>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        setFile(null)
                        setValidationStatus("idle")
                        setValidationMessage("")
                      }}
                    >
                      Remove
                    </Button>
                  </div>
                )}
              </div>

              {file && validationStatus !== "idle" && (
                <Alert variant={validationStatus === "error" ? "destructive" : "default"}>
                  {validationStatus === "validating" && (
                    <>
                      <AlertCircle className="h-4 w-4" />
                      <AlertTitle>Validating</AlertTitle>
                      <AlertDescription>Please wait while we validate your file...</AlertDescription>
                    </>
                  )}

                  {validationStatus === "success" && (
                    <>
                      <CheckCircle className="h-4 w-4" />
                      <AlertTitle>Validation Successful</AlertTitle>
                      <AlertDescription>{validationMessage}</AlertDescription>
                    </>
                  )}

                  {validationStatus === "error" && (
                    <>
                      <AlertCircle className="h-4 w-4" />
                      <AlertTitle>Validation Failed</AlertTitle>
                      <AlertDescription>{validationMessage}</AlertDescription>
                    </>
                  )}
                </Alert>
              )}
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline" onClick={() => setActiveTab("view")}>
                Cancel
              </Button>
              <div className="space-x-2">
                {file && validationStatus === "idle" && <Button onClick={handleValidate}>Validate File</Button>}

                {file && validationStatus === "success" && <Button onClick={handleUpload}>Upload File</Button>}

                {file && validationStatus === "error" && (
                  <Button onClick={() => setFile(null)}>Select Another File</Button>
                )}
              </div>
            </CardFooter>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Upload Guidelines</CardTitle>
              <CardDescription>Please follow these guidelines to ensure successful data upload</CardDescription>
            </CardHeader>
            <CardContent>
              <ul className="list-disc pl-5 space-y-2 text-sm">
                <li>Use the provided Excel template for uploading data</li>
                <li>Ensure all required fields are filled</li>
                <li>Data will be validated against existing records</li>
                <li>Maximum file size: 5MB</li>
                <li>Supported formats: .xlsx, .xls</li>
              </ul>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
</file>

<file path="components/SCFleadmanagement/lead-details.tsx">
"use client"

import { useState, useEffect } from "react"
import { 
  ArrowLeft, MessageSquare, Mail, AlertTriangle, 
  Calendar, Clock, Check, ChevronDown, ChevronUp, 
  FileText, Send, Download, Sparkles 
} from "lucide-react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { cn } from "@/lib/utils"
import { 
  LeadCommunication, 
  LeadWorkflowState, 
  stageToFlagMap,
  getLeadWorkflowStateByProcessedLeadId,
  getLeadCommunicationsByProcessedLeadId
} from "@/lib/lead-workflow"
import { format } from "date-fns"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { safeDbOperation } from "@/lib/db-init"

interface Lead {
  id: string
  dealerName: string
  anchorName: string
  rmName: string
  lastUpdated: string
  priority: "High" | "Medium" | "Low"
  ageingBucket: string
  lastActionDate: string
  flag: "With RM" | "Escalation 1" | "Escalation 2" | "With PSM" | "Under Progress" | "Dropped"
}

interface LeadHistory {
  id: string
  date: string
  time: string
  type: "email_sent" | "email_received" | "status_change" | "note" | "system_action"
  title: string
  description: string
  fromEmail?: string
  toEmail?: string
  aiDecision?: string
  attachments?: { name: string; size: string }[]
}

interface LeadDetailsProps {
  leadId: string
}

const priorityColors = {
  High: "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300",
  Medium: "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300",
  Low: "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300",
}

const flagColors = {
  "With RM": "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300",
  "Escalation 1": "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300",
  "Escalation 2": "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300",
  "With PSM": "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300",
  "Under Progress": "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300",
  "Dropped": "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300",
}

// Mock data - would come from API in real app
const LEAD_DATA: Lead = {
  id: "LD-001",
  dealerName: "ABC Motors",
  anchorName: "XYZ Corp",
  rmName: "John Smith",
  lastUpdated: "2025-03-28",
  priority: "High",
  ageingBucket: "0-7 days",
  lastActionDate: "2025-03-27",
  flag: "With RM",
}

// Mock history data - would come from API in real app
const LEAD_HISTORY: LeadHistory[] = [
  {
    id: "hist-1",
    date: "2025-03-20",
    time: "09:15 AM",
    type: "email_sent",
    title: "Lead Uploaded Email",
    description: "Initial notification sent to RM about new lead assignment",
    fromEmail: "system@scfleadmgmt.com",
    toEmail: "john.smith@example.com"
  },
  {
    id: "hist-2",
    date: "2025-03-22",
    time: "10:30 AM",
    type: "email_received",
    title: "RM Response",
    description: "I'm working on contacting this dealer. Will update by end of week.",
    fromEmail: "john.smith@example.com",
    toEmail: "system@scfleadmgmt.com",
    aiDecision: "Response acknowledged. Continue monitoring."
  },
  {
    id: "hist-3",
    date: "2025-03-27",
    time: "11:00 AM",
    type: "email_sent",
    title: "7-Day Reminder",
    description: "Reminder sent to RM as 7 days have passed since initial assignment",
    fromEmail: "system@scfleadmgmt.com",
    toEmail: "john.smith@example.com"
  },
  {
    id: "hist-4",
    date: "2025-03-27",
    time: "02:45 PM",
    type: "email_received",
    title: "RM Update",
    description: "Had a promising call with the dealer. Scheduling a follow-up meeting next week.",
    fromEmail: "john.smith@example.com",
    toEmail: "system@scfleadmgmt.com",
    aiDecision: "Positive progress. Reset escalation timeline.",
    attachments: [
      { name: "meeting_notes.pdf", size: "1.2 MB" }
    ]
  },
  {
    id: "hist-5",
    date: "2025-03-28",
    time: "09:00 AM",
    type: "status_change",
    title: "Flag Updated",
    description: "Flag changed from 'Escalation 1' to 'With RM' based on RM response",
  },
  {
    id: "hist-6",
    date: "2025-03-28",
    time: "09:01 AM",
    type: "system_action",
    title: "AI Assessment",
    description: "Based on RM's response and engagement, escalation process has been reset",
    aiDecision: "Response indicates active engagement. Reset escalation timeline."
  }
]

// Check if we're in a browser environment safely
const isBrowser = () => {
  try {
    return typeof window !== 'undefined' && 
           typeof window.document !== 'undefined';
  } catch (e) {
    return false;
  }
};

export default function LeadDetails({ leadId }: LeadDetailsProps) {
  const [expandedItems, setExpandedItems] = useState<string[]>([])
  const [communications, setCommunications] = useState<LeadCommunication[]>([])
  const [workflowState, setWorkflowState] = useState<LeadWorkflowState | null>(null)
  const [loadingComms, setLoadingComms] = useState(true)
  const [loadingWorkflowState, setLoadingWorkflowState] = useState(true)
  const [mounted, setMounted] = useState(false)

  // Set mounted flag on client side
  useEffect(() => {
    setMounted(true)
  }, [])

  // Fetch workflow state for this lead
  useEffect(() => {
    // Skip fetching on server-side or if not mounted
    if (!isBrowser() || !mounted) return;

    async function fetchWorkflowState() {
      try {
        const state = await safeDbOperation(
          () => getLeadWorkflowStateByProcessedLeadId(leadId),
          undefined
        );
        setWorkflowState(state || null);
      } catch (err) {
        console.error("Error fetching workflow state:", err)
      } finally {
        setLoadingWorkflowState(false)
      }
    }
    
    fetchWorkflowState()
  }, [leadId, mounted])

  // Fetch communications for this lead
  useEffect(() => {
    // Skip fetching on server-side or if not mounted
    if (!isBrowser() || !mounted) return;

    async function fetchCommunications() {
      try {
        const comms = await safeDbOperation(
          () => getLeadCommunicationsByProcessedLeadId(leadId),
          []
        );
        
        // Sort by timestamp (newest first)
        const sortedComms = comms.sort((a, b) =>
          new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
        )
        
        setCommunications(sortedComms)
      } catch (err) {
        console.error("Error fetching communications:", err)
      } finally {
        setLoadingComms(false)
      }
    }
    
    fetchCommunications()
  }, [leadId, mounted])

  // Skip rendering until mounted to prevent hydration mismatch
  if (!mounted && isBrowser()) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse space-y-4">
          <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3"></div>
          <div className="h-80 bg-gray-200 dark:bg-gray-700 rounded"></div>
          <div className="h-40 bg-gray-200 dark:bg-gray-700 rounded"></div>
        </div>
      </div>
    );
  }

  const toggleItem = (itemId: string) => {
    setExpandedItems(prevItems => 
      prevItems.includes(itemId) 
        ? prevItems.filter(id => id !== itemId)
        : [...prevItems, itemId]
    )
  }

  const isItemExpanded = (itemId: string) => expandedItems.includes(itemId)

  // Helper to map workflow stage to display flag
  const getDisplayFlag = (): string => {
    if (!workflowState) return "With RM"; // Default
    
    // Map from currentStage to display flag
    return stageToFlagMap[workflowState.currentStage] || "With RM";
  }

  // Helper to get formatted dates
  const formatDateFromISOString = (isoString: string): string => {
    try {
      return format(new Date(isoString), "yyyy-MM-dd");
    } catch (e) {
      return "Invalid date";
    }
  }

  const formatTimeFromISOString = (isoString: string): string => {
    try {
      return format(new Date(isoString), "hh:mm a");
    } catch (e) {
      return "";
    }
  }

  // Helper to get icon based on communication type
  const getIconForCommunicationType = (type: string) => {
    switch (type) {
      case 'LeadAssignmentEmail':
      case 'SystemFollowUpEmail':
      case 'SystemReminderEmail':
        return <Mail className="h-5 w-5 text-blue-500" />;
      case 'RMReply':
        return <MessageSquare className="h-5 w-5 text-green-500" />;
      case 'PSMDecision_ReassignToRM':
      case 'PSMDecision_DropLead':
      case 'StageUpdate':
        return <AlertTriangle className="h-5 w-5 text-amber-500" />;
      case 'AISystemAssessment':
        return <FileText className="h-5 w-5 text-purple-500" />;
      case 'NoteAdded':
        return <FileText className="h-5 w-5 text-gray-500" />;
      default:
        return <Calendar className="h-5 w-5 text-gray-500" />;
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <Link href="/rm-leads">
            <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
              <ArrowLeft className="h-4 w-4" />
              <span className="sr-only">Back</span>
            </Button>
          </Link>
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
            Lead Details: {LEAD_DATA.id}
          </h1>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-1 space-y-6">
          <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] overflow-hidden">
            <div className="px-4 py-3 bg-gray-50 dark:bg-[#1F1F23] border-b border-gray-200 dark:border-[#1F1F23]">
              <h2 className="text-lg font-medium text-gray-900 dark:text-white">Lead Information</h2>
            </div>
            <div className="p-4 space-y-4">
              <div>
                <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Lead ID</p>
                <p className="text-base font-medium text-gray-900 dark:text-white">{LEAD_DATA.id}</p>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Dealer Name</p>
                <p className="text-base text-gray-900 dark:text-white">{LEAD_DATA.dealerName}</p>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Anchor Name</p>
                <p className="text-base text-gray-900 dark:text-white">{LEAD_DATA.anchorName}</p>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-500 dark:text-gray-400">RM Name</p>
                <p className="text-base text-gray-900 dark:text-white">{LEAD_DATA.rmName}</p>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Priority</p>
                <div>
                  <span
                    className={cn(
                      "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium",
                      priorityColors[LEAD_DATA.priority]
                    )}
                  >
                    {LEAD_DATA.priority}
                  </span>
                </div>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Flag</p>
                <div>
                  <span
                    className={cn(
                      "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium",
                      flagColors[getDisplayFlag() as keyof typeof flagColors]
                    )}
                  >
                    {getDisplayFlag()}
                  </span>
                </div>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Ageing Bucket</p>
                <p className="text-base text-gray-900 dark:text-white">{LEAD_DATA.ageingBucket}</p>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-500 dark:text-gray-400">Last Updated</p>
                <p className="text-base text-gray-900 dark:text-white">
                  {workflowState?.updatedAt ? formatDateFromISOString(workflowState.updatedAt) : LEAD_DATA.lastUpdated}
                </p>
              </div>
            </div>
          </div>
          
          <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] overflow-hidden">
            <div className="px-4 py-3 bg-gray-50 dark:bg-[#1F1F23] border-b border-gray-200 dark:border-[#1F1F23]">
              <h2 className="text-lg font-medium text-gray-900 dark:text-white">AI Escalation Status</h2>
            </div>
            <div className="p-4">
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center">
                    <AlertTriangle className="w-4 h-4 text-blue-600 dark:text-blue-400" />
                  </div>
                  <div>
                    <p className="font-medium text-gray-900 dark:text-white">With RM - Monitoring</p>
                    <p className="text-sm text-gray-500 dark:text-gray-400">4 days until 7-day reminder</p>
                  </div>
                </div>
                <div className="space-y-2">
                  <p className="text-sm font-medium text-gray-700 dark:text-gray-300">Escalation Timeline</p>
                  <div className="bg-gray-100 dark:bg-[#1F1F23] rounded-md p-3 space-y-2">
                    <div className="flex items-center gap-2">
                      <div className="w-6 h-6 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center text-xs text-blue-600 dark:text-blue-400 font-medium">1</div>
                      <p className="text-sm text-gray-700 dark:text-gray-300">Lead Upload - 2025-03-20</p>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-6 h-6 rounded-full bg-blue-100 dark:bg-blue-900/30 flex items-center justify-center text-xs text-blue-600 dark:text-blue-400 font-medium">2</div>
                      <p className="text-sm text-gray-700 dark:text-gray-300">7-Day Reminder - 2025-03-27</p>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-6 h-6 rounded-full bg-gray-200 dark:bg-gray-800 flex items-center justify-center text-xs text-gray-500 dark:text-gray-400 font-medium">3</div>
                      <p className="text-sm text-gray-500 dark:text-gray-400">Escalation 1 (Day 15) - 2025-04-04</p>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-6 h-6 rounded-full bg-gray-200 dark:bg-gray-800 flex items-center justify-center text-xs text-gray-500 dark:text-gray-400 font-medium">4</div>
                      <p className="text-sm text-gray-500 dark:text-gray-400">Escalation 2 (Day 20) - 2025-04-09</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="lg:col-span-2">
          <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] overflow-hidden">
            <div className="border-b border-gray-200 dark:border-[#1F1F23] flex px-4">
              <div className="flex-1">
                <h2 className="text-lg font-medium text-gray-900 dark:text-white py-3">Lead History</h2>
              </div>
              <div className="flex items-center">
                <Button variant="ghost" size="sm" className="flex items-center gap-1 ml-auto">
                  <FileText className="w-4 h-4" />
                  Export
                </Button>
              </div>
            </div>
            <div className="p-4 space-y-4">
              {loadingComms ? (
                <div className="py-8 text-center text-gray-500 dark:text-gray-400">
                  Loading history...
                </div>
              ) : communications.length === 0 ? (
                <div className="py-8 text-center text-gray-500 dark:text-gray-400">
                  No history records found.
                </div>
              ) : (
                communications.map((comm) => (
                  <div key={comm.id} className="border-b border-gray-200 dark:border-[#1F1F23] pb-4 last:border-0 last:pb-0">
                    <div
                      className="flex items-start justify-between cursor-pointer"
                      onClick={() => toggleItem(comm.id)}
                    >
                      <div className="flex gap-3">
                        <div className="mt-1">
                          {getIconForCommunicationType(comm.communicationType)}
                        </div>
                        <div>
                          <div className="flex items-center gap-2">
                            <p className="text-sm font-medium text-gray-700 dark:text-gray-200">
                              {comm.title}
                            </p>
                            <div className="flex items-center gap-1">
                              <Calendar className="h-3 w-3 text-gray-500" />
                              <p className="text-xs text-gray-500">
                                {formatDateFromISOString(comm.timestamp)}
                              </p>
                            </div>
                            <div className="flex items-center gap-1">
                              <Clock className="h-3 w-3 text-gray-500" />
                              <p className="text-xs text-gray-500">
                                {formatTimeFromISOString(comm.timestamp)}
                              </p>
                            </div>
                          </div>
                          <p className="text-sm text-gray-600 dark:text-gray-300 line-clamp-1">
                            {comm.description}
                          </p>
                        </div>
                      </div>
                      <Button variant="ghost" size="sm" className="mt-0.5">
                        {isItemExpanded(comm.id) ? (
                          <ChevronUp className="h-4 w-4" />
                        ) : (
                          <ChevronDown className="h-4 w-4" />
                        )}
                      </Button>
                    </div>
                    
                    {isItemExpanded(comm.id) && (
                      <div className="mt-3 pl-8 space-y-3">
                        {(comm.senderAdidOrEmail || comm.recipientAdidOrEmail) && (
                          <div className="text-sm">
                            {comm.senderAdidOrEmail && (
                              <p className="text-gray-600 dark:text-gray-300">
                                <span className="font-medium">From:</span> {comm.senderAdidOrEmail}
                              </p>
                            )}
                            {comm.recipientAdidOrEmail && (
                              <p className="text-gray-600 dark:text-gray-300">
                                <span className="font-medium">To:</span> {comm.recipientAdidOrEmail}
                              </p>
                            )}
                            {comm.ccEmails && comm.ccEmails.length > 0 && (
                              <p className="text-gray-600 dark:text-gray-300">
                                <span className="font-medium">CC:</span> {comm.ccEmails.join(', ')}
                              </p>
                            )}
                          </div>
                        )}
                        
                        <div className="bg-gray-50 dark:bg-[#1F1F23] p-3 rounded-md">
                          <p className="text-sm text-gray-700 dark:text-gray-200 whitespace-pre-wrap">
                            {comm.description}
                          </p>
                        </div>
                        
                        {comm.aiDecision && (
                          <div className="bg-purple-50 dark:bg-purple-900/20 p-3 rounded-md">
                            <div className="flex items-center gap-2 mb-1">
                              <Check className="h-4 w-4 text-purple-600 dark:text-purple-400" />
                              <p className="text-sm font-medium text-purple-700 dark:text-purple-400">
                                AI Decision
                              </p>
                            </div>
                            <p className="text-sm text-purple-700 dark:text-purple-300">
                              {comm.aiDecision}
                            </p>
                          </div>
                        )}
                        
                        {comm.attachments && comm.attachments.length > 0 && (
                          <div className="space-y-2">
                            <p className="text-sm font-medium text-gray-700 dark:text-gray-200">
                              Attachments
                            </p>
                            <div className="space-y-2">
                              {comm.attachments.map((attachment, index) => (
                                <div
                                  key={index}
                                  className="flex items-center justify-between bg-gray-50 dark:bg-[#1F1F23] p-2 rounded-md"
                                >
                                  <div className="flex items-center gap-2">
                                    <FileText className="h-4 w-4 text-gray-500" />
                                    <p className="text-sm text-gray-700 dark:text-gray-200">
                                      {attachment.name} <span className="text-gray-500">({attachment.size})</span>
                                    </p>
                                  </div>
                                  <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                                    <Download className="h-4 w-4" />
                                    <span className="sr-only">Download</span>
                                  </Button>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>

      <Tabs defaultValue="rm-communications" className="mt-6">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="rm-communications">RM Communications</TabsTrigger>
          <TabsTrigger value="lead-notes">Lead Notes</TabsTrigger>
        </TabsList>
        
        <TabsContent value="rm-communications">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium text-gray-900 dark:text-white">RM Communications</h3>
            </div>
            
            {loadingComms ? (
              <div className="animate-pulse space-y-4">
                <div className="h-12 bg-gray-200 dark:bg-gray-700 rounded"></div>
                <div className="h-12 bg-gray-200 dark:bg-gray-700 rounded"></div>
                <div className="h-12 bg-gray-200 dark:bg-gray-700 rounded"></div>
              </div>
            ) : communications.length === 0 ? (
              <div className="text-center py-8 px-4 rounded-lg border border-dashed border-gray-300 dark:border-gray-600">
                <MessageSquare className="mx-auto h-8 w-8 text-gray-400 mb-2" />
                <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-1">
                  No RM Communications
                </h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  There are no communications for this lead yet.
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {communications.map((comm) => (
                  <div 
                    key={comm.id} 
                    className="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden"
                  >
                    <div 
                      className="bg-gray-50 dark:bg-gray-800 px-4 py-3 flex justify-between items-center cursor-pointer"
                      onClick={() => toggleItem(comm.id)}
                    >
                      <div className="flex items-center gap-2">
                        <span className={`px-2 py-1 text-xs rounded-full ${
                          comm.communicationType === 'LeadAssignmentEmail' 
                            ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300' 
                            : 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300'
                        }`}>
                          {comm.communicationType === 'LeadAssignmentEmail' ? 'Assignment' : 'Reply'}
                        </span>
                        <span className="text-sm font-medium">
                          {comm.senderType === 'System' ? 'System' : 'RM'} 
                          {comm.senderType === 'System' ? ' → ' : ' → '}
                          {comm.recipientAdidOrEmail.includes('@') ? 'RM' : 'System'}
                        </span>
                        <span className="text-xs text-gray-500">
                          {format(new Date(comm.timestamp), 'MMM d, yyyy h:mm a')}
                        </span>
                      </div>
                      {isItemExpanded(comm.id) ? (
                        <ChevronUp className="h-4 w-4 text-gray-500" />
                      ) : (
                        <ChevronDown className="h-4 w-4 text-gray-500" />
                      )}
                    </div>
                    
                    {isItemExpanded(comm.id) && (
                      <div className="p-4 bg-white dark:bg-[#0F0F12]">
                        <div className="text-sm text-gray-800 dark:text-gray-200 whitespace-pre-wrap">
                          {comm.description}
                        </div>
                        <div className="mt-3 text-xs text-gray-500">
                          <span className="font-medium">From:</span> {comm.senderAdidOrEmail}
                          <br />
                          <span className="font-medium">To:</span> {comm.recipientAdidOrEmail}
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </TabsContent>
        
        <TabsContent value="lead-notes">
          <div className="p-4 text-center text-gray-500 dark:text-gray-400">
            Lead notes feature coming soon
          </div>
        </TabsContent>
      </Tabs>

      {/* Communication history card */}
      <Card>
        <CardHeader>
          <CardTitle>Communication History</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {communications.length === 0 ? (
              <div className="text-center py-4 text-sm text-gray-500 dark:text-gray-400">
                No communications found for this lead.
              </div>
            ) : (
              communications.map((comm, index) => (
                <div
                  key={comm.id}
                  className="p-4 border rounded-lg"
                >
                  <div className="flex justify-between items-start mb-3">
                    <div>
                      <h4 className="font-medium">
                        {comm.title || comm.communicationType || (comm as any).messageType || 'Communication'}
                      </h4>
                      <div className="text-sm text-gray-500 dark:text-gray-400">
                        {new Date(comm.timestamp).toLocaleString()} • 
                        From: {comm.senderAdidOrEmail || (comm as any).sender || 'Unknown'} • 
                        To: {comm.recipientAdidOrEmail || (comm as any).recipient || 'Unknown'}
                      </div>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-8 w-8 p-0"
                      onClick={() => toggleItem(comm.id)}
                    >
                      {expandedItems.includes(comm.id) ? (
                        <ChevronUp className="h-4 w-4" />
                      ) : (
                        <ChevronDown className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                  
                  {expandedItems.includes(comm.id) && (
                    <>
                      <div className="p-3 bg-gray-50 dark:bg-[#1F1F23] rounded-md my-3">
                        <p className="text-sm whitespace-pre-wrap">
                          {comm.description || (comm as any).content || ''}
                        </p>
                      </div>
                      
                      {/* Display AI-generated information if available */}
                      {(comm.aiSummary || comm.aiDecision) && (
                        <div className="mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-md">
                          <div className="flex items-center mb-2">
                            <Sparkles className="h-4 w-4 text-blue-500 mr-2" />
                            <span className="text-sm font-medium text-blue-700 dark:text-blue-300">
                              AI Analysis
                            </span>
                          </div>
                          
                          {comm.aiSummary && (
                            <div className="mb-2">
                              <span className="text-xs font-medium text-gray-500 dark:text-gray-400">
                                Summary:
                              </span>
                              <span className="text-sm ml-2">
                                {comm.aiSummary}
                              </span>
                            </div>
                          )}
                          
                          {comm.aiDecision && (
                            <div className="mb-2">
                              <span className="text-xs font-medium text-gray-500 dark:text-gray-400">
                                Suggested Next Action:
                              </span>
                              <span className="text-sm ml-2">
                                {comm.aiDecision}
                              </span>
                            </div>
                          )}
                          
                          {comm.aiTokensConsumed && (
                            <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                              Tokens used: {comm.aiTokensConsumed}
                            </div>
                          )}
                        </div>
                      )}
                      
                      {/* Attachments section (if any) */}
                      {comm.attachments && comm.attachments.length > 0 && (
                        <div className="mt-3">
                          <h5 className="text-sm font-medium mb-2">Attachments:</h5>
                          <div className="space-y-2">
                            {comm.attachments.map((attachment, i) => (
                              <div key={i} className="flex items-center p-2 border rounded-md bg-gray-50 dark:bg-[#1F1F23]">
                                <FileText className="h-4 w-4 mr-2 text-gray-400" />
                                <span className="text-sm">{attachment.name}</span>
                                <span className="text-xs text-gray-500 ml-2">({attachment.size})</span>
                                {attachment.url && (
                                  <Button variant="ghost" size="sm" className="ml-auto h-6 px-2">
                                    <Download className="h-3 w-3 mr-1" />
                                    <span className="text-xs">Download</span>
                                  </Button>
                                )}
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </>
                  )}
                </div>
              ))
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="components/SCFleadmanagement/reports.tsx">
"use client"

import { useState } from "react"
import {
  Calendar,
  Download,
  Filter,
  ChevronDown,
  FileSpreadsheet,
  FilePieChart,
  FileBarChart,
  Check,
  AlarmClock,
  BarChart,
  FileText,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { useAuth } from "@/components/auth-provider"

interface ReportType {
  id: string
  name: string
  description: string
  icon: React.ReactNode
  format: string[]
  lastUpdated: string
  roles: Array<"admin" | "rm" | "psm">
}

export default function Reports() {
  const [dateRange, setDateRange] = useState("last-30-days")
  const [selectedFormat, setSelectedFormat] = useState<Record<string, string>>({})
  const { userRole } = useAuth()

  // Available report types
  const reportTypes: ReportType[] = [
    {
      id: "lead-status",
      name: "Lead Status Report",
      description: "Comprehensive report on all leads and their current status",
      icon: <FileBarChart className="h-5 w-5" />,
      format: ["xlsx"],
      lastUpdated: "Today at 09:30 AM",
      roles: ["admin", "rm", "psm"],
    },
    {
      id: "application-status",
      name: "Application Status Report",
      description: "Detailed report on application processing status and timelines",
      icon: <FilePieChart className="h-5 w-5" />,
      format: ["xlsx"],
      lastUpdated: "Today at 09:30 AM",
      roles: ["admin", "rm", "psm"],
    },
    {
      id: "rejected-leads",
      name: "Rejected Leads Report",
      description: "Analysis of rejected leads with rejection reasons",
      icon: <FileSpreadsheet className="h-5 w-5" />,
      format: ["xlsx"],
      lastUpdated: "Today at 09:30 AM",
      roles: ["admin", "rm", "psm"],
    },
    {
      id: "lead-aging",
      name: "Lead Aging Report",
      description: "Report on lead age and time spent in each status",
      icon: <AlarmClock className="h-5 w-5" />,
      format: ["xlsx"],
      lastUpdated: "Today at 09:30 AM",
      roles: ["admin", "rm", "psm"],
    },
    {
      id: "rm-performance",
      name: "RM Performance Report",
      description: "Performance metrics for relationship managers",
      icon: <BarChart className="h-5 w-5" />,
      format: ["xlsx"],
      lastUpdated: "Today at 09:30 AM",
      roles: ["admin"],
    },
    {
      id: "my-leads-report",
      name: "My Leads Report",
      description: "Detailed report of all your assigned leads",
      icon: <FileText className="h-5 w-5" />,
      format: ["xlsx"],
      lastUpdated: "Today at 09:30 AM",
      roles: ["rm"],
    }
  ]

  // Filter reports based on user role
  const filteredReports = reportTypes.filter(report => 
    report.roles.includes(userRole as "admin" | "rm" | "psm")
  );

  const handleDownload = (reportId: string, format: string) => {
    // In a real application, this would trigger an API call to generate and download the report
    console.log(`Downloading ${reportId} in ${format} format`)
    alert(`Downloading ${reportId} in ${format} format. This would be an API call in a real application.`)
    
    // Update the selected format for this report
    setSelectedFormat({
      ...selectedFormat,
      [reportId]: format
    })
  }

  return (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
          {userRole === "rm" ? "My Reports" : "Reports"}
        </h1>

        <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
          <Select value={dateRange} onValueChange={setDateRange}>
            <SelectTrigger className="w-full sm:w-[180px]">
              <Calendar className="mr-2 h-4 w-4" />
              <SelectValue placeholder="Select date range" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="today">Today</SelectItem>
              <SelectItem value="yesterday">Yesterday</SelectItem>
              <SelectItem value="last-7-days">Last 7 days</SelectItem>
              <SelectItem value="last-30-days">Last 30 days</SelectItem>
              <SelectItem value="this-month">This month</SelectItem>
              <SelectItem value="last-month">Last month</SelectItem>
              <SelectItem value="this-year">This year</SelectItem>
              <SelectItem value="custom">Custom range</SelectItem>
            </SelectContent>
          </Select>

          <Button variant="outline" size="sm" className="gap-1">
            <Filter className="h-4 w-4" />
            Filter
            <ChevronDown className="h-4 w-4" />
          </Button>

          <Button variant="outline" size="sm" className="gap-1">
            <Download className="h-4 w-4" />
            Export
          </Button>
        </div>
      </div>

      <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] overflow-hidden">
        <div className="p-6">
          <h2 className="text-lg font-semibold mb-4">Available Reports</h2>
          <p className="text-sm text-gray-500 dark:text-gray-400 mb-6">Download reports in various formats</p>

          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Report Name</TableHead>
                <TableHead>Description</TableHead>
                <TableHead>Last Updated</TableHead>
                <TableHead>Download Format</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredReports.map((report) => (
                <TableRow key={report.id}>
                  <TableCell className="font-medium">
                    <div className="flex items-center gap-2">
                      {report.icon}
                      {report.name}
                    </div>
                  </TableCell>
                  <TableCell>{report.description}</TableCell>
                  <TableCell>{report.lastUpdated}</TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      {report.format.map((format) => (
                        <Button
                          key={format}
                          variant={selectedFormat[report.id] === format ? "default" : "outline"}
                          size="sm"
                          onClick={() => handleDownload(report.id, format)}
                          className="w-16"
                        >
                          {format.toUpperCase()}
                          {selectedFormat[report.id] === format && (
                            <Check className="ml-1 h-3 w-3" />
                          )}
                        </Button>
                      ))}
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
        <div className="px-6 py-4 bg-gray-50 dark:bg-[#1F1F23] border-t border-gray-200 dark:border-[#1F1F23]">
          <p className="text-sm text-gray-500 dark:text-gray-400">
            Reports are generated based on the selected date range: <span className="font-medium">{dateRange.replace(/-/g, " ")}</span>
          </p>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/SCFleadmanagement/rm-leads.tsx">
"use client"

import { useState, useEffect } from "react"
import { Eye, Edit2, Search, Filter, Download, ChevronDown, ChevronUp, ArrowUpDown } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { cn } from "@/lib/utils"
import EditLeadModal from "./edit-lead-modal"
import Link from "next/link"
import { useAuth } from "@/components/auth-provider"
import db from "@/lib/db"
import { stageToFlagMap, createLeadWorkflowState } from "@/lib/lead-workflow"
import { differenceInDays } from "date-fns"
import { ProcessedLead, LeadWorkflowState, HierarchyMaster, RMBranch } from "@/lib/db"
import { safeDbOperation } from "@/lib/db-init"

// Check if we're in a browser environment safely
const isBrowser = () => {
  try {
    return typeof window !== 'undefined' && 
           typeof window.document !== 'undefined';
  } catch (e) {
    return false;
  }
};

interface Lead {
  id: string
  processedLeadId: string
  workflowStateId: string
  dealerName: string
  anchorName: string
  rmName: string
  rmId: string
  lastUpdated: string
  ageingBucket: string
  lastActionDate: string
  flag: string
  currentStage: string
}

const flagColors = {
  "With RM": "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300",
  "Escalation 1": "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300",
  "Escalation 2": "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300",
  "With PSM": "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300",
  "Under Progress": "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300",
  "Dropped": "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300",
}

// Helper function to calculate ageing bucket
const calculateAgeingBucket = (createdAt: string): string => {
  const createdDate = new Date(createdAt);
  const currentDate = new Date();
  const daysDifference = differenceInDays(currentDate, createdDate);

  if (daysDifference <= 7) return "0-7 days";
  if (daysDifference <= 14) return "8-14 days";
  if (daysDifference <= 30) return "15-30 days";
  if (daysDifference <= 60) return "31-60 days";
  return "60+ days";
};

export default function RMLeads() {
  const { user, userRole } = useAuth();
  const [searchTerm, setSearchTerm] = useState("")
  const [sortField, setSortField] = useState<keyof Lead | null>("lastUpdated")
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc")
  const [selectedLead, setSelectedLead] = useState<Lead | null>(null)
  const [isEditModalOpen, setIsEditModalOpen] = useState(false)
  const [actualLeads, setActualLeads] = useState<Lead[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [mounted, setMounted] = useState(false)

  // Set mounted flag on client side
  useEffect(() => {
    setMounted(true)
  }, [])

  // Fetch leads data based on user role
  useEffect(() => {
    // Skip fetching on server-side or if not mounted
    if (!isBrowser() || !mounted) return;
    
    const fetchLeads = async () => {
      if (!user || !userRole) return;
      
      try {
        setIsLoading(true);
        setError(null);
        
        let processedLeads: ProcessedLead[] = [];
        
        // Fetch leads based on user role safely
        if (userRole === "admin" || userRole === "psm") {
          // Admin and PSM can see all leads
          processedLeads = await safeDbOperation(
            () => db.processed_leads.toArray(),
            [] // Empty array as fallback
          );
        } else if (userRole === "rm") {
          // RM can only see their assigned leads
          processedLeads = await safeDbOperation(
            () => db.processed_leads
              .where("assignedRmAdid")
              .equals(user.id)
              .toArray(),
            [] // Empty array as fallback
          );
        }
        
        // If no leads found, set empty array
        if (processedLeads.length === 0) {
          setActualLeads([]);
          setIsLoading(false);
          return;
        }
        
        // Create a map to hold RM names for efficient lookup
        const rmNamesMap = new Map<string, string>();
        
        // Process each lead to get workflow state and RM name
        const leadsPromises = processedLeads.map(async (processedLead) => {
          try {
            // Get workflow state for this lead safely
            let workflowState = await safeDbOperation(
              () => db.lead_workflow_states
                .where("processedLeadId")
                .equals(processedLead.id)
                .first(),
              undefined
            );
            
            // If workflow state doesn't exist, create a default one
            if (!workflowState) {
              console.warn(`No workflow state found for lead ${processedLead.id}, creating a default one`);
              try {
                // Get PSM ADID from the assigned anchor if available
                let psmAdid = "unknown";
                if (processedLead.anchorNameSelected) {
                  const anchorRecord = await safeDbOperation(
                    () => db.anchor_master
                      .where("anchorname")
                      .equals(processedLead.anchorNameSelected)
                      .first(),
                    undefined
                  );
                  
                  if (anchorRecord && anchorRecord.PSMADID) {
                    psmAdid = anchorRecord.PSMADID;
                  }
                }
                
                // Create a new workflow state
                workflowState = await createLeadWorkflowState(
                  processedLead.id,
                  processedLead.assignedRmAdid || "unassigned",
                  psmAdid
                );
                
                console.log(`Created new workflow state for lead ${processedLead.id}`);
              } catch (err) {
                console.error(`Failed to create workflow state for lead ${processedLead.id}:`, err);
                return null;
              }
            }
            
            // Get RM name if not already in the map
            let rmName = "N/A";
            if (processedLead.assignedRmAdid) {
              const rmId = processedLead.assignedRmAdid; // Store in a variable to avoid null
              if (rmNamesMap.has(rmId)) {
                rmName = rmNamesMap.get(rmId) || "N/A";
              } else {
                // Try to find RM in RMBranch table first safely
                const rmRecord = await safeDbOperation(
                  () => db.rm_branch
                    .where("rmId")
                    .equals(rmId)
                    .first(),
                  undefined
                );
                
                if (rmRecord) {
                  rmName = rmRecord.rmName;
                  rmNamesMap.set(rmId, rmName);
                } else {
                  // If not found, try the HierarchyMaster table safely
                  const hierarchyRecord = await safeDbOperation(
                    () => db.hierarchy_master
                      .where("empAdid")
                      .equals(rmId)
                      .first(),
                    undefined
                  );
                  
                  if (hierarchyRecord) {
                    rmName = hierarchyRecord.employeeName;
                    rmNamesMap.set(rmId, rmName);
                  }
                }
              }
            }
            
            // Calculate ageing bucket
            const ageingBucket = calculateAgeingBucket(workflowState.createdAt);
            
            // Get the display flag from the stage
            const displayFlag = stageToFlagMap[workflowState.currentStage] || "Under Progress";
            
            // Format the lastActionDate
            let lastActionDate = "N/A";
            if (workflowState.lastCommunicationTimestamp) {
              try {
                const date = new Date(workflowState.lastCommunicationTimestamp);
                lastActionDate = date.toISOString().split('T')[0]; // YYYY-MM-DD format
              } catch (error) {
                console.error("Error formatting date:", error);
              }
            }
            
            // Return the lead object with combined data
            return {
              id: processedLead.id,
              processedLeadId: processedLead.id,
              workflowStateId: workflowState.id,
              dealerName: processedLead.originalData["Name of the Firm"] || "Unknown",
              anchorName: processedLead.anchorNameSelected || "Unknown",
              rmName: rmName,
              rmId: processedLead.assignedRmAdid || "",
              lastUpdated: workflowState.updatedAt,
              ageingBucket: ageingBucket,
              lastActionDate: lastActionDate,
              flag: displayFlag,
              currentStage: workflowState.currentStage
            };
          } catch (error) {
            console.error(`Error processing lead ${processedLead.id}:`, error);
            return null;
          }
        });
        
        // Wait for all promises to resolve and filter out null values
        const resolvedLeads = (await Promise.all(leadsPromises)).filter(
          (lead): lead is Lead => lead !== null
        );
        
        setActualLeads(resolvedLeads);
      } catch (err) {
        console.error("Error fetching leads:", err);
        setError("Failed to fetch leads. Please try again.");
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchLeads();
  }, [user, userRole, mounted]);

  // Skip rendering until mounted to prevent hydration mismatch
  if (!mounted && isBrowser()) {
    return (
      <div className="space-y-4">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
          <h1 className="text-2xl font-bold text-gray-900 dark:text-white">RM Leads</h1>
          <div className="animate-pulse h-10 w-64 bg-gray-200 dark:bg-gray-700 rounded"></div>
        </div>
        <div className="animate-pulse space-y-4">
          <div className="h-12 bg-gray-200 dark:bg-gray-700 rounded"></div>
          <div className="h-80 bg-gray-200 dark:bg-gray-700 rounded"></div>
        </div>
      </div>
    );
  }

  const handleSort = (field: keyof Lead) => {
    if (sortField === field) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      setSortField(field)
      setSortDirection("asc")
    }
  }

  const filteredLeads = actualLeads.filter(
    (lead) =>
      lead.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.dealerName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.anchorName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.rmName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.ageingBucket.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.flag.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const sortedLeads = [...filteredLeads].sort((a, b) => {
    if (!sortField) return 0

    const aValue = a[sortField]
    const bValue = b[sortField]

    if (aValue < bValue) return sortDirection === "asc" ? -1 : 1
    if (aValue > bValue) return sortDirection === "asc" ? 1 : -1
    return 0
  })

  const handleEdit = (lead: Lead) => {
    setSelectedLead(lead)
    setIsEditModalOpen(true)
  }

  const handleCloseModal = () => {
    setIsEditModalOpen(false)
    setSelectedLead(null)
  }

  const refreshLeads = async () => {
    // Re-trigger the useEffect by setting isLoading to true
    setIsLoading(true);
  };

  const SortIcon = ({ field }: { field: keyof Lead }) => {
    if (sortField !== field) return <ArrowUpDown className="ml-1 h-4 w-4" />
    return sortDirection === "asc" ? <ChevronUp className="ml-1 h-4 w-4" /> : <ChevronDown className="ml-1 h-4 w-4" />
  }

  return (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">RM Leads</h1>

        <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
            <Input
              type="search"
              placeholder="Search leads..."
              className="pl-9 w-full"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="gap-1">
                <Filter className="h-4 w-4" />
                Filter
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-48">
              <DropdownMenuItem onClick={() => setSearchTerm("")}>All Leads</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSearchTerm("With RM")}>With RM</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSearchTerm("Escalation 1")}>Escalation 1</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSearchTerm("Escalation 2")}>Escalation 2</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSearchTerm("With PSM")}>With PSM</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSearchTerm("Under Progress")}>Under Progress</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSearchTerm("Dropped")}>Dropped</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSearchTerm("0-7 days")}>0-7 days</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSearchTerm("8-14 days")}>8-14 days</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSearchTerm("15-30 days")}>15-30 days</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSearchTerm("31-60 days")}>31-60 days</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSearchTerm("60+ days")}>60+ days</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          <Button variant="outline" size="sm" className="gap-1">
            <Download className="h-4 w-4" />
            Export
          </Button>
        </div>
      </div>

      <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b border-gray-200 dark:border-[#1F1F23] bg-gray-50 dark:bg-[#1F1F23]">
                <th
                  className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                  onClick={() => handleSort("id")}
                >
                  <div className="flex items-center">
                    Lead ID
                    <SortIcon field="id" />
                  </div>
                </th>
                <th
                  className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                  onClick={() => handleSort("dealerName")}
                >
                  <div className="flex items-center">
                    Dealer Name
                    <SortIcon field="dealerName" />
                  </div>
                </th>
                <th
                  className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                  onClick={() => handleSort("anchorName")}
                >
                  <div className="flex items-center">
                    Anchor Name
                    <SortIcon field="anchorName" />
                  </div>
                </th>
                <th
                  className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                  onClick={() => handleSort("rmName")}
                >
                  <div className="flex items-center">
                    RM Name
                    <SortIcon field="rmName" />
                  </div>
                </th>
                <th 
                  className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                  onClick={() => handleSort("ageingBucket")}
                >
                  <div className="flex items-center">
                    Ageing Bucket
                    <SortIcon field="ageingBucket" />
                  </div>
                </th>
                <th className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Last Action Date</th>
                <th className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400">Flag</th>
                <th className="px-4 py-3 text-right font-medium text-gray-500 dark:text-gray-400">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200 dark:divide-[#1F1F23]">
              {isLoading ? (
                <tr>
                  <td colSpan={8} className="px-4 py-6 text-center text-gray-500 dark:text-gray-400">
                    Loading leads...
                  </td>
                </tr>
              ) : error ? (
                <tr>
                  <td colSpan={8} className="px-4 py-6 text-center text-red-500 dark:text-red-400">
                    {error}
                  </td>
                </tr>
              ) : sortedLeads.length === 0 ? (
                <tr>
                  <td colSpan={8} className="px-4 py-6 text-center text-gray-500 dark:text-gray-400">
                    No leads found.
                  </td>
                </tr>
              ) : (
                sortedLeads.map((lead) => (
                  <tr key={lead.id} className="hover:bg-gray-50 dark:hover:bg-[#1F1F23] transition-colors">
                    <td className="px-4 py-3 font-medium text-gray-900 dark:text-white">{lead.id}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.dealerName}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.anchorName}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.rmName}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.ageingBucket}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.lastActionDate}</td>
                    <td className="px-4 py-3">
                      <span
                        className={cn(
                          "inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium",
                          flagColors[lead.flag as keyof typeof flagColors] || "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300"
                        )}
                      >
                        {lead.flag}
                      </span>
                    </td>
                    <td className="px-4 py-3 text-right space-x-1">
                      <Link href={`/lead-details/${lead.id}`} className="inline-flex">
                        <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                          <Eye className="h-4 w-4" />
                          <span className="sr-only">View Details</span>
                        </Button>
                      </Link>
                      <Button variant="ghost" size="sm" className="h-8 w-8 p-0" onClick={() => handleEdit(lead)}>
                        <Edit2 className="h-4 w-4" />
                        <span className="sr-only">Edit</span>
                      </Button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {selectedLead && (
        <EditLeadModal 
          lead={selectedLead} 
          isOpen={isEditModalOpen} 
          onClose={handleCloseModal} 
          onSave={refreshLeads}
        />
      )}
    </div>
  )
}
</file>

<file path="lib/lead-utils.ts">
import db from './db';
import { safeDbOperation } from './db-init';
import { handleNewLeadAssignment } from './lead-workflow-examples';

/**
 * Function to get an RM's email address from their ADID
 * Checks hierarchy_master and rm_branch tables
 */
export async function getEmailFromRmAdid(rmAdid: string): Promise<string> {
  try {
    // First check the hierarchy_master table using new field names
    const hierarchyRecord = await db.hierarchy_master
      .where('EmpADID')
      .equals(rmAdid)
      .or('RBLADIDCode')
      .equals(rmAdid)
      .first();
    
    if (hierarchyRecord?.YesEmail) {
      return hierarchyRecord.YesEmail;
    }
    
    // Fallback to old field names if needed
    if (!hierarchyRecord) {
      const oldHierarchyRecord = await db.hierarchy_master
        .where('id')
        .equals(rmAdid)
        .first();
      
      if (oldHierarchyRecord?.yesEmail) {
        return oldHierarchyRecord.yesEmail;
      }
    }
    
    // If not found or no email, check rm_branch for any identifying info
    const rmRecord = await db.rm_branch
      .where('rmId')
      .equals(rmAdid)
      .first();
    
    if (rmRecord) {
      // Use the RM name or ID to construct an email
      const rmEmail = `${rmRecord.rmName.toLowerCase().replace(/\s+/g, '.')}@example.com`;
      return rmEmail;
    }
    
    // If all else fails, generate a fallback email using the ADID
    return `rm.${rmAdid}@example.com`;
  } catch (error) {
    console.error('Error getting RM email:', error);
    // Return a fallback email in case of error
    return `rm.${rmAdid}@example.com`;
  }
}

/**
 * Function to get PSM details based on anchor name
 * Returns a tuple of [PSM ADID, PSM Email]
 */
export async function getPSMDetailsFromAnchor(anchorName: string): Promise<[string, string]> {
  try {
    // Look up PSM details from anchor_master
    const anchorRecord = await db.anchor_master
      .where('anchorname')
      .equals(anchorName)
      .first();
    
    if (anchorRecord?.PSMADID) {
      // Return PSM ADID and either actual email or generated one
      const psmEmail = anchorRecord.PSMEmail || `psm.${anchorRecord.PSMADID}@example.com`;
      return [anchorRecord.PSMADID, psmEmail];
    }
    
    // If not found, return default values
    return ['PSM001', 'default.psm@example.com'];
  } catch (error) {
    console.error('Error getting PSM details:', error);
    // Return fallback values in case of error
    return ['PSM001', 'default.psm@example.com'];
  }
}

/**
 * Generate a simulated email content for lead assignment
 */
export function generateLeadAssignmentEmail(
  dealerName: string,
  anchorName: string,
  rmName: string,
  leadDetails: Record<string, any>
): string {
  const today = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  
  return `
Subject: New Lead Assignment - ${dealerName} with ${anchorName}

Dear ${rmName},

A new lead has been assigned to you on ${today}.

LEAD DETAILS:
- Dealer/Firm: ${dealerName}
- Anchor: ${anchorName}
- Contact Person: ${leadDetails["Contact Person"] || "Not provided"}
- Mobile: ${leadDetails["Mobile Number"] || "Not provided"}
- Email: ${leadDetails["Email ID"] || "Not provided"}
- City: ${leadDetails["City"] || "Not provided"}
- Pincode: ${leadDetails["Pincode"] || "Not provided"}
- Dealer Address: ${leadDetails["Dealer Address"] || "Not provided"}

Please take appropriate action on this lead at your earliest convenience. You can reply to this email with your updates or log them directly in the Lead Management System.

Required Action:
1. Contact the dealer within 48 hours
2. Update the status in the system
3. Provide regular feedback on progress

Thank you for your prompt attention to this matter.

Regards,
SCF Lead Management System
`;
}

/**
 * Function to get all emails for a specific RM
 * @param rmAdid RM's ADID or a part of the email address
 */
export async function getRMInboxEmails(rmAdid: string) {
  try {
    console.log(`[getRMInboxEmails] Getting emails for RM: ${rmAdid}`);
    
    // Get all leads assigned to this RM safely
    const processedLeads = await safeDbOperation(
      () => db.processed_leads
        .where('assignedRmAdid')
        .equals(rmAdid)
        .toArray(),
      []
    );
    
    console.log(`[getRMInboxEmails] Found ${processedLeads.length} processed leads assigned to RM`);
    
    // Array to hold all lead communications
    const allCommunications = [];
    
    // Get communications for each lead safely
    for (const lead of processedLeads) {
      try {
        // Get communications for this lead safely
        const communications = await safeDbOperation(
          () => db.lead_communications
            .where('processedLeadId')
            .equals(lead.id)
            .toArray(),
          []
        );
        
        // Add to the all communications array
        allCommunications.push(...communications);
      } catch (error) {
        console.error(`[getRMInboxEmails] Error getting communications for lead ${lead.id}:`, error);
      }
    }
    
    // Get old-style communications assigned directly to RM email
    try {
      // Try to find RM email from RMBranch table safely
      let rmEmail = null;
      const rmRecord = await safeDbOperation(
        () => db.rm_branch
          .where('rmId')
          .equals(rmAdid)
          .first(),
        null
      );
      
      if (rmRecord) {
        // Use the RM name or ID to construct an email
        rmEmail = `${rmRecord.rmName.toLowerCase().replace(/\s+/g, '.')}@example.com`;
      } else {
        // Default to a pattern based on RM ID
        rmEmail = `${rmAdid.toLowerCase()}@example.com`;
      }
      
      // Get old-style communications safely
      const oldStyleComms = await safeDbOperation(
        () => db.lead_communications
          .where('rmEmail')
          .equals(rmEmail)
          .toArray(),
        []
      );
      
      // Add to the all communications array
      allCommunications.push(...oldStyleComms);
    } catch (error) {
      console.error('[getRMInboxEmails] Error getting old-style communications:', error);
    }
    
    // Sort all communications by timestamp (newest first)
    allCommunications.sort((a, b) => 
      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
    );
    
    return allCommunications;
  } catch (error) {
    console.error('[getRMInboxEmails] Error getting RM inbox emails:', error);
    return [];
  }
} 

/**
 * Generate a simulated email content for PSM sending a lead back to RM
 */
export function generatePSMSendBackToRMEmail(
  psmNotes: string,
  leadDetails: Record<string, any>,
  rmName: string,
  psmName: string = "PSM",
  dealerName: string = "Unknown Dealer",
  anchorName: string = "Unknown Anchor"
): string {
  const today = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  
  // Extract dealer and anchor name from leadDetails if available
  const actualDealerName = dealerName || leadDetails["Name of the Firm"] || "Unknown Dealer";
  const actualAnchorName = anchorName || leadDetails["Anchor Name"] || "Unknown Anchor";
  
  return `
Subject: Lead Sent Back to RM - ${actualDealerName} with ${actualAnchorName}

Dear ${rmName},

PSM ${psmName} has sent a lead back to you on ${today}.

LEAD DETAILS:
- Dealer/Firm: ${actualDealerName}
- Anchor: ${actualAnchorName}
- Contact Person: ${leadDetails["Contact Person"] || "Not provided"}
- Mobile: ${leadDetails["Mobile Number"] || "Not provided"}
- Email: ${leadDetails["Email ID"] || "Not provided"}
- City: ${leadDetails["City"] || "Not provided"}
- Pincode: ${leadDetails["Pincode"] || "Not provided"}

PSM NOTES:
${psmNotes}

Please take appropriate action on this lead at your earliest convenience.

Regards,
SCF Lead Management System
`;
}

/**
 * Safely handle a new lead assignment for Smartfin workflow
 * This is a wrapper around handleNewLeadAssignment that handles potential undefined values
 */
export async function safeHandleNewLeadAssignment(
  processedLeadId: string,
  rmAdid: string | null | undefined,
  psmAdid: string | null | undefined
): Promise<boolean> {
  try {
    if (!rmAdid) {
      console.error('Missing RM ADID for lead assignment');
      return false;
    }
    
    // Get the RM's email
    const rmEmail = await getEmailFromRmAdid(rmAdid);
    
    // Call the handleNewLeadAssignment function with safe parameters
    await handleNewLeadAssignment(
      processedLeadId,
      rmAdid,
      rmEmail,
      psmAdid || undefined
    );
    
    return true;
  } catch (error) {
    console.error('Error in safe lead assignment:', error);
    return false;
  }
}
</file>

<file path="lib/lead-workflow.ts">
import { v4 as uuidv4 } from 'uuid';
import db from './db';
import { generateLeadAssignmentEmail } from './lead-utils';

// Interface definitions
export interface LeadWorkflowState {
  id: string; // UUID PK
  processedLeadId: string; // FK to ProcessedLead
  currentStage: string; // e.g., 'RM_AwaitingReply', 'PSM_ReviewPending', 'Dropped'
  currentAssigneeType: 'RM' | 'PSM' | 'System';
  currentAssigneeAdid: string;
  psmAdid: string; // PSM for the anchor
  lastStageChangeTimestamp: string; // ISO string
  lastCommunicationTimestamp: string; // ISO string
  nextFollowUpTimestamp: string; // ISO string
  escalationLevel: number;
  droppedReason: string | null;
  updatedAt: string; // ISO string
  createdAt: string; // ISO string
}

export interface LeadCommunication {
  id: string; // UUID for the communication
  processedLeadId: string; // Processed lead ID this communication is related to
  timestamp: string; // ISO date string
  communicationType: 
    'LeadAssignmentEmail' | 
    'RMReply' | 
    'SystemFollowUpEmail' | 
    'SystemReminderEmail' | 
    'PSMDecision_ReassignToRM' | 
    'PSMDecision_DropLead' | 
    'PSM_Sent_Back_To_RM' |
    'PSM_Closed_Lead' |
    'PSM_Bulk_Closed_Lead' |
    'StageUpdate' | 
    'AISystemAssessment' | 
    'NoteAdded';
  title: string; // e.g., "Lead Uploaded Email", "RM Response"
  description: string; // Main body/details of the history item
  senderType: 'System' | 'RM' | 'PSM' | 'User';
  senderAdidOrEmail: string; // ADID for internal users, email for system/external
  recipientAdidOrEmail: string; // ADID or email of the primary recipient
  ccEmails?: string[]; // Array of emails for CC, if applicable
  aiSummary?: string; // AI-generated summary of RM replies or other content
  aiDecision?: string; // AI's suggested next step or assessment outcome
  aiTokensConsumed?: number;
  attachments?: { name: string; size: string; url?: string; type: string }[]; // Array of attachment objects
  relatedWorkflowStateId?: string; // Optional FK to LeadWorkflowState.id
}

// Map of workflow stages to flag display values
export const stageToFlagMap: Record<string, string> = {
  // RM stages
  'RM_AssignmentEmailPending': 'With RM',
  'RM_AwaitingReply': 'With RM',
  'RM_ReassignmentEmailPending': 'With RM',
  
  // PSM stages - for leads requiring PSM review or action
  'PSM_ReviewPending': 'With PSM',   // Lead has been escalated to PSM for review
  'PSM_Assigned': 'With PSM',        // Lead has been explicitly assigned to a PSM
  'PSM_AwaitingAction': 'With PSM',  // Lead is waiting for PSM to take action
  
  // Admin Review stage
  'AdminReviewPending': 'Program Review', // Lead requires admin/program review
  
  // Other stages
  'Dropped': 'Dropped',
  'ClosedLead': 'Closed',           // Lead has been closed by PSM
  // Add more mappings as needed
};

/**
 * Creates a new lead workflow state record
 */
export async function createLeadWorkflowState(
  processedLeadId: string,
  currentAssigneeAdid: string,
  psmAdid: string
): Promise<LeadWorkflowState> {
  const now = new Date().toISOString();
  
  const workflowState: LeadWorkflowState = {
    id: uuidv4(),
    processedLeadId,
    currentStage: 'RM_AssignmentEmailPending',
    currentAssigneeType: 'RM',
    currentAssigneeAdid,
    psmAdid,
    lastStageChangeTimestamp: now,
    lastCommunicationTimestamp: now,
    nextFollowUpTimestamp: now,
    escalationLevel: 0,
    droppedReason: null,
    updatedAt: now,
    createdAt: now
  };
  
  try {
    await db.table('lead_workflow_states').add(workflowState);
    return workflowState;
  } catch (error) {
    console.error('Failed to create lead workflow state:', error);
    throw error;
  }
}

/**
 * Updates an existing lead workflow state
 */
export async function updateLeadWorkflowState(
  id: string,
  updates: Partial<LeadWorkflowState>
): Promise<void> {
  try {
    // Always update the updatedAt timestamp
    updates.updatedAt = new Date().toISOString();
    
    await db.table('lead_workflow_states').update(id, updates);
  } catch (error) {
    console.error('Failed to update lead workflow state:', error);
    throw error;
  }
}

/**
 * Gets a lead workflow state by processed lead ID
 */
export async function getLeadWorkflowStateByProcessedLeadId(
  processedLeadId: string
): Promise<LeadWorkflowState | undefined> {
  try {
    return await db.table('lead_workflow_states')
      .where('processedLeadId')
      .equals(processedLeadId)
      .first();
  } catch (error) {
    console.error('Failed to get lead workflow state:', error);
    throw error;
  }
}

/**
 * Creates a new lead communication record
 */
export async function createLeadCommunication(
  data: Omit<LeadCommunication, 'id' | 'timestamp'> & { timestamp?: string }
): Promise<LeadCommunication> {
  const now = new Date().toISOString();
  
  // Ensure we're using processedLeadId, not leadId
  if (!data.processedLeadId) {
    console.error('processedLeadId is required for lead communications');
    throw new Error('processedLeadId is required for lead communications');
  }
  
  const communication: LeadCommunication = {
    id: uuidv4(),
    timestamp: data.timestamp || now,
    processedLeadId: data.processedLeadId,
    communicationType: data.communicationType,
    title: data.title,
    description: data.description,
    senderType: data.senderType,
    senderAdidOrEmail: data.senderAdidOrEmail,
    recipientAdidOrEmail: data.recipientAdidOrEmail,
    ccEmails: data.ccEmails || [],
    aiSummary: data.aiSummary,
    aiDecision: data.aiDecision,
    aiTokensConsumed: data.aiTokensConsumed,
    attachments: data.attachments || [],
    relatedWorkflowStateId: data.relatedWorkflowStateId
  };
  
  try {
    // Log all fields for debugging
    console.log('Creating lead communication with data:', {
      id: communication.id,
      processedLeadId: communication.processedLeadId,
      communicationType: communication.communicationType,
      senderType: communication.senderType,
      recipientAdidOrEmail: communication.recipientAdidOrEmail
    });
    
    await db.table('lead_communications').add(communication);
    return communication;
  } catch (error) {
    console.error('Failed to create lead communication:', error);
    throw error;
  }
}

/**
 * Gets all lead communications for a processed lead ID
 */
export async function getLeadCommunicationsByProcessedLeadId(
  processedLeadId: string
): Promise<LeadCommunication[]> {
  try {
    return await db.table('lead_communications')
      .where('processedLeadId')
      .equals(processedLeadId)
      .toArray();
  } catch (error) {
    console.error('Failed to get lead communications:', error);
    throw error;
  }
}

/**
 * Creates a lead assignment communication
 */
export async function createLeadAssignmentCommunication(
  processedLeadId: string, 
  rmEmail: string,
  workflowStateId: string
): Promise<LeadCommunication> {
  try {
    console.log(`[Lead Communication] Starting email generation for lead ${processedLeadId}`);
    // Get the processed lead record to include details in the email
    const processedLead = await db.processed_leads.get(processedLeadId);
    
    if (!processedLead) {
      console.error(`[Lead Communication] ERROR: Processed lead ${processedLeadId} not found`);
      throw new Error(`Processed lead ${processedLeadId} not found`);
    }
    
    console.log(`[Lead Communication] Found processed lead record: ${processedLead.id}`);
    console.log(`[Lead Communication] Assigned RM: ${processedLead.assignedRmAdid}`);
    
    // Get the RM name from rm_branch or use a default
    let rmName = "RM";
    try {
      console.log(`[Lead Communication] Looking up RM details for ${processedLead.assignedRmAdid}`);
      const rmRecord = await db.rm_branch
        .where('rmId')
        .equals(processedLead.assignedRmAdid || '')
        .first();
      
      if (rmRecord) {
        rmName = rmRecord.rmName;
        console.log(`[Lead Communication] Found RM name: ${rmName}`);
      } else {
        console.log(`[Lead Communication] RM record not found, using default name`);
      }
    } catch (error) {
      console.warn(`[Lead Communication] Error getting RM name:`, error);
      // Continue with default name
    }
    
    // Generate the email content
    const dealerName = processedLead.originalData["Name of the Firm"] || "Dealer";
    const anchorName = processedLead.anchorNameSelected;
    console.log(`[Lead Communication] Generating email for dealer: ${dealerName}, anchor: ${anchorName}`);
    
    const emailContent = generateLeadAssignmentEmail(
      dealerName,
      anchorName,
      rmName,
      processedLead.originalData
    );
    
    console.log(`[Lead Communication] Email content generated (${emailContent.length} chars)`);
    
    // Create the communication record
    console.log(`[Lead Communication] Creating communication record in database...`);
    const communication = await createLeadCommunication({
      processedLeadId,
      communicationType: 'LeadAssignmentEmail',
      title: `Lead Assignment Email - ${dealerName}`,
      description: emailContent,
      senderType: 'System',
      senderAdidOrEmail: 'system@scfleadmgmt.com',
      recipientAdidOrEmail: rmEmail,
      relatedWorkflowStateId: workflowStateId
    });
    
    console.log(`[Lead Communication] Email record created successfully with ID: ${communication.id}`);
    return communication;
  } catch (error) {
    console.error(`[Lead Communication] ERROR creating lead assignment communication:`, error);
    // Create a basic communication record in case of error
    console.log(`[Lead Communication] Creating fallback communication record...`);
    return createLeadCommunication({
      processedLeadId,
      communicationType: 'LeadAssignmentEmail',
      title: 'Lead Assignment Email Sent',
      description: 'Initial notification sent to RM about new lead assignment.',
      senderType: 'System',
      senderAdidOrEmail: 'system@scfleadmgmt.com',
      recipientAdidOrEmail: rmEmail,
      relatedWorkflowStateId: workflowStateId
    });
  }
}

/**
 * Creates a new RM reply communication
 */
export async function createRMReplyCommunication(
  processedLeadId: string,
  rmEmail: string,
  replyContent: string,
  aiSummary?: string,
  aiDecision?: string,
  aiTokensConsumed?: number,
  attachments?: { name: string; size: string; url?: string; type: string }[]
): Promise<LeadCommunication> {
  try {
    // Create the communication record
    const communication = await createLeadCommunication({
      processedLeadId,
      communicationType: 'RMReply',
      title: 'RM Reply Received',
      description: replyContent,
      senderType: 'RM',
      senderAdidOrEmail: rmEmail,
      recipientAdidOrEmail: 'system@scfleadmgmt.com',
      aiSummary,
      aiDecision,
      aiTokensConsumed,
      attachments
    });

    // Get the workflow state to update it
    const workflowState = await getLeadWorkflowStateByProcessedLeadId(processedLeadId);
    
    if (workflowState) {
      const now = new Date().toISOString();
      let updates: Partial<LeadWorkflowState> = {
        lastCommunicationTimestamp: now,
        updatedAt: now
      };
      
      // If AI decision is available, update the workflow state accordingly
      if (aiDecision) {
        let newStage = workflowState.currentStage;
        
        // Map AI decision to workflow stage
        if (aiDecision === 'Dealer Not Interested') {
          newStage = 'Dropped';
          updates.droppedReason = 'AI: Dealer Not Interested';
        } else if (aiDecision === 'Admin Review') {
          newStage = 'AdminReviewPending';
          // Set current assignee to the system for admin review
          updates.currentAssigneeType = 'System';
          updates.currentAssigneeAdid = 'system'; // Will be reassigned by admin
        } else if (aiDecision === 'FollowUp') {
          newStage = 'RM_AwaitingReply';
          // Set next follow-up timestamp to 2 days from now
          const followUpDate = new Date();
          followUpDate.setDate(followUpDate.getDate() + 2);
          updates.nextFollowUpTimestamp = followUpDate.toISOString();
        }
        
        // Only update stage if it changed
        if (newStage !== workflowState.currentStage) {
          updates.currentStage = newStage;
          updates.lastStageChangeTimestamp = now;
        }
      }
      
      // Update the workflow state
      await updateLeadWorkflowState(workflowState.id, updates);
    }
    
    return communication;
  } catch (error) {
    console.error('Failed to create RM reply communication:', error);
    throw error;
  }
}

/**
 * Helper function to update lead workflow state after communication
 */
export async function updateWorkflowStateAfterCommunication(
  workflowStateId: string,
  newStage?: string,
  escalationLevel?: number
): Promise<void> {
  const now = new Date().toISOString();
  const updates: Partial<LeadWorkflowState> = {
    lastCommunicationTimestamp: now
  };
  
  if (newStage) {
    updates.currentStage = newStage;
    updates.lastStageChangeTimestamp = now;
  }
  
  if (escalationLevel !== undefined) {
    updates.escalationLevel = escalationLevel;
  }
  
  await updateLeadWorkflowState(workflowStateId, updates);
}
</file>

<file path="components/SCFleadmanagement/masters/anchor-master.tsx">
"use client"

import { useState, useEffect } from "react"
import MasterLayout from "./master-layout"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { MasterService } from "@/lib/db"
import type { AnchorMaster } from "@/lib/db"
import { ChevronLeft, ChevronRight } from "lucide-react"

export default function AnchorMaster() {
  const [anchors, setAnchors] = useState<AnchorMaster[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage] = useState(10)
  const [totalRecords, setTotalRecords] = useState(0)

  useEffect(() => {
    // Load anchor data from IndexedDB
    const loadAnchors = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Get total records count
        const countResult = await MasterService.getTotalRecords('anchor_master');
        if (countResult.success && countResult.count !== undefined) {
          setTotalRecords(countResult.count);
        } else {
          setError("Failed to load record count");
          return;
        }
        
        // Get paginated records
        const result = await MasterService.getRecords(
          'anchor_master', 
          {}, 
          undefined, 
          itemsPerPage, 
          (currentPage - 1) * itemsPerPage
        );
        
        if (result.success && result.data) {
          // Type assertion to ensure correct type
          setAnchors(result.data as AnchorMaster[]);
        } else {
          setError("Failed to load anchor data");
        }
      } catch (err) {
        console.error("Error loading anchors:", err);
        setError("An unexpected error occurred");
      } finally {
        setLoading(false);
      }
    };

    loadAnchors();
  }, [currentPage, itemsPerPage]);
  
  // Pagination handlers
  const totalPages = Math.ceil(totalRecords / itemsPerPage);
  const handleNextPage = () => setCurrentPage(prev => Math.min(prev + 1, totalPages));
  const handlePrevPage = () => setCurrentPage(prev => Math.max(prev - 1, 1));

  return (
    <MasterLayout 
      title="Anchor Master" 
      description="Manage anchor institutions and their details"
      storeName="anchor_master"
    >
      {loading ? (
        <div className="flex justify-center py-8">
          <div className="text-center">
            <div className="inline-block animate-spin h-8 w-8 border-4 border-gray-300 dark:border-gray-700 rounded-full border-t-blue-600 dark:border-t-blue-500"></div>
            <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">Loading anchors...</p>
          </div>
        </div>
      ) : error ? (
        <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900/30 rounded-md p-4 my-4">
          <p className="text-red-800 dark:text-red-300">{error}</p>
          <Button 
            variant="outline" 
            size="sm" 
            className="mt-2"
            onClick={() => window.location.reload()}
          >
            Reload
          </Button>
        </div>
      ) : (
        <>
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Anchor Name</TableHead>
                  <TableHead>Anchor UUID</TableHead>
                  <TableHead>Program Name</TableHead>
                  <TableHead>Program UUID</TableHead>
                  <TableHead>Segment</TableHead>
                  <TableHead>PSM Name</TableHead>
                  <TableHead>PSM ADID</TableHead>
                  <TableHead>PSM Email</TableHead>
                  <TableHead>UDF1</TableHead>
                  <TableHead>UDF2</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {anchors.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={10} className="text-center py-6 text-gray-500 dark:text-gray-400">
                      No anchor data available. Use the Upload tab to add data.
                    </TableCell>
                  </TableRow>
                ) : (
                  anchors.map((anchor, idx) => (
                    <TableRow key={anchor.id || idx} className="hover:bg-gray-50 dark:hover:bg-gray-900/10">
                      <TableCell>{anchor.anchorname}</TableCell>
                      <TableCell>{anchor.anchoruuid}</TableCell>
                      <TableCell>{anchor.programname}</TableCell>
                      <TableCell>{anchor.programuuid}</TableCell>
                      <TableCell>{anchor.segment}</TableCell>
                      <TableCell>{anchor.PSMName}</TableCell>
                      <TableCell>{anchor.PSMADID}</TableCell>
                      <TableCell>{anchor.PSMEmail}</TableCell>
                      <TableCell>{anchor.UDF1}</TableCell>
                      <TableCell>{anchor.UDF2}</TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
          
          {/* Pagination UI */}
          {totalRecords > 0 && (
            <div className="flex items-center justify-between mt-4 text-sm">
              <p className="text-gray-500 dark:text-gray-400">
                Showing {(currentPage - 1) * itemsPerPage + 1} - {Math.min(currentPage * itemsPerPage, totalRecords)} of {totalRecords} records
              </p>
              <div className="flex items-center space-x-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handlePrevPage} 
                  disabled={currentPage === 1}
                  className="h-8 w-8 p-0"
                >
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <span className="text-gray-500 dark:text-gray-400">
                  Page {currentPage} of {totalPages}
                </span>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handleNextPage} 
                  disabled={currentPage === totalPages || totalRecords === 0}
                  className="h-8 w-8 p-0"
                >
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
            </div>
          )}
        </>
      )}
    </MasterLayout>
  )
}
</file>

<file path="components/SCFleadmanagement/edit-lead-modal.tsx">
"use client"

import { useState, useEffect } from "react"
import { X } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import db from "@/lib/db"
import { stageToFlagMap, createLeadCommunication, updateWorkflowStateAfterCommunication } from "@/lib/lead-workflow"
import { useAuth } from "@/components/auth-provider"
import { getEmailFromRmAdid, generatePSMSendBackToRMEmail } from "@/lib/lead-utils"

interface Lead {
  id: string
  processedLeadId: string
  workflowStateId: string
  dealerName: string
  anchorName: string
  rmName: string
  rmId: string
  lastUpdated: string
  ageingBucket: string
  lastActionDate: string
  flag: string
  currentStage: string
}

interface EditLeadModalProps {
  lead: Lead
  isOpen: boolean
  onClose: () => void
  onSave?: () => void
}

// Define a mapping from flag to currentStage
const flagToStageMap: Record<string, string> = Object.fromEntries(
  Object.entries(stageToFlagMap).map(([stage, flag]) => [flag, stage])
);

// Define PSM-specific action options
const PSM_ACTIONS = ["CloseLead", "Dropped", "Send Back to RM"];

// Define Admin-specific action options for Program Review
const ADMIN_REVIEW_ACTIONS = ["Reassign to RM", "Assign to PSM", "Drop Lead", "Send Back to Original RM"];

export default function EditLeadModal({ lead, isOpen, onClose, onSave }: EditLeadModalProps) {
  const { userRole, user } = useAuth()
  const [flag, setFlag] = useState(lead.flag)
  const [psmAction, setPsmAction] = useState<string>("")
  const [adminAction, setAdminAction] = useState<string>("")
  const [notes, setNotes] = useState("")
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [isNotesRequired, setIsNotesRequired] = useState(false)
  
  // RM selection for reassignment in admin review
  const [availableRMs, setAvailableRMs] = useState<{id: string, name: string}[]>([])
  const [selectedRM, setSelectedRM] = useState<string>("")
  const [isLoadingRMs, setIsLoadingRMs] = useState(false)

  // Effect to load available RMs for reassignment
  useEffect(() => {
    if (adminAction === "Reassign to RM" && isOpen) {
      loadAvailableRMs();
    }
  }, [adminAction, isOpen]);

  // Load RMs from hierarchy_master
  const loadAvailableRMs = async () => {
    setIsLoadingRMs(true);
    try {
      const rmRecords = await db.hierarchy_master
        .filter(record => record.Role === "RM" || record.Role === "rm")
        .toArray();
      
      const rms = rmRecords.map(rm => ({
        id: rm.EmpADID || rm.empAdid || "",
        name: rm.FullName || rm.fullName || rm.employeeName || "Unknown RM"
      }));
      
      setAvailableRMs(rms);
    } catch (err) {
      console.error("Error loading RMs:", err);
    } finally {
      setIsLoadingRMs(false);
    }
  };

  // Handle PSM action change
  useEffect(() => {
    // Check if notes are required for the selected PSM action
    if (psmAction === "Send Back to RM") {
      setIsNotesRequired(true);
    } else {
      setIsNotesRequired(false);
    }
  }, [psmAction]);
  
  // Handle admin action change
  useEffect(() => {
    // Notes are required for admin actions
    if (adminAction === "Reassign to RM" || adminAction === "Send Back to Original RM") {
      setIsNotesRequired(true);
    } else {
      setIsNotesRequired(false);
    }
  }, [adminAction]);

  const handleSave = async () => {
    if (isNotesRequired && !notes.trim()) {
      setError("Please add notes explaining your decision");
      return;
    }

    try {
      setIsSubmitting(true);
      setError(null);
      const now = new Date().toISOString();
      
      // Handle PSM actions (existing functionality)
      if (userRole === "psm" && psmAction) {
        const updates: any = {
          updatedAt: now,
          lastCommunicationTimestamp: now
        };
        
        if (psmAction === "CloseLead") {
          // Set stage to ClosedLead
          updates.currentStage = "ClosedLead";
          updates.lastStageChangeTimestamp = now;
          
          // Update the workflow state
          await db.lead_workflow_states.update(lead.workflowStateId, updates);
          
          // Create a communication record
          await createLeadCommunication({
            processedLeadId: lead.processedLeadId,
            communicationType: 'PSM_Closed_Lead',
            title: 'Lead Closed by PSM',
            description: notes || 'Lead has been closed by PSM.',
            senderType: 'PSM',
            senderAdidOrEmail: user?.id || 'unknown-psm',
            recipientAdidOrEmail: 'system',
            relatedWorkflowStateId: lead.workflowStateId
          });
        } 
        else if (psmAction === "Dropped") {
          // Set stage to Dropped
          updates.currentStage = "Dropped";
          updates.lastStageChangeTimestamp = now;
          updates.droppedReason = notes || 'Dropped by PSM';
          
          // Update the workflow state
          await db.lead_workflow_states.update(lead.workflowStateId, updates);
          
          // Create a communication record
          await createLeadCommunication({
            processedLeadId: lead.processedLeadId,
            communicationType: 'PSMDecision_DropLead',
            title: 'Lead Dropped by PSM',
            description: notes || 'Lead has been dropped by PSM.',
            senderType: 'PSM',
            senderAdidOrEmail: user?.id || 'unknown-psm',
            recipientAdidOrEmail: 'system',
            relatedWorkflowStateId: lead.workflowStateId
          });
        }
        else if (psmAction === "Send Back to RM") {
          // Get the processed lead to find the original RM
          const processedLead = await db.processed_leads.get(lead.processedLeadId);
          
          if (!processedLead) {
            setError("Failed to find lead details");
            setIsSubmitting(false);
            return;
          }
          
          const rmAdid = processedLead.assignedRmAdid || lead.rmId;
          
          // Update workflow state to send back to RM
          updates.currentStage = "RM_AwaitingReply";
          updates.currentAssigneeType = "RM";
          updates.currentAssigneeAdid = rmAdid;
          updates.lastStageChangeTimestamp = now;
          
          // Update the workflow state
          await db.lead_workflow_states.update(lead.workflowStateId, updates);
          
          // Get RM email
          const rmEmail = await getEmailFromRmAdid(rmAdid);
          
          // Generate email content
          const emailContent = generatePSMSendBackToRMEmail(
            notes,
            processedLead.originalData,
            lead.rmName,
            user?.email?.split('@')[0] || "PSM",
            lead.dealerName,
            lead.anchorName
          );
          
          // Create a communication record
          await createLeadCommunication({
            processedLeadId: lead.processedLeadId,
            communicationType: 'PSM_Sent_Back_To_RM',
            title: 'Lead Sent Back to RM',
            description: emailContent,
            senderType: 'PSM',
            senderAdidOrEmail: user?.id || 'unknown-psm',
            recipientAdidOrEmail: rmEmail,
            relatedWorkflowStateId: lead.workflowStateId
          });
        }
      }
      // Handle Admin Review actions
      else if (userRole === "admin" && lead.currentStage === "AdminReviewPending" && adminAction) {
        const workflowState = await db.lead_workflow_states.get(lead.workflowStateId);
        if (!workflowState) {
          setError("Could not find workflow state for this lead");
          return;
        }
        
        const updates: Partial<any> = {
          updatedAt: now,
          lastStageChangeTimestamp: now
        };
        
        let communicationType = "StageUpdate";
        let communicationTitle = "Admin Review Action";
        
        if (adminAction === "Reassign to RM") {
          if (!selectedRM) {
            setError("Please select an RM to reassign the lead to");
            return;
          }
          
          // Look up RM details
          const rmRecord = await db.hierarchy_master
            .where("EmpADID")
            .equals(selectedRM)
            .or("empAdid")
            .equals(selectedRM)
            .first();
          
          if (!rmRecord) {
            setError("Could not find details for the selected RM");
            return;
          }
          
          const rmName = rmRecord.FullName || rmRecord.fullName || rmRecord.employeeName || "Unknown RM";
          updates.currentStage = "RM_ReassignmentEmailPending";
          updates.currentAssigneeType = "RM";
          updates.currentAssigneeAdid = selectedRM;
          
          communicationType = "AdminDecision_ReassignToRM";
          communicationTitle = `Admin Reassigned Lead to ${rmName}`;
        }
        else if (adminAction === "Assign to PSM") {
          updates.currentStage = "PSM_ReviewPending";
          updates.currentAssigneeType = "PSM";
          updates.currentAssigneeAdid = workflowState.psmAdid;
          
          communicationType = "AdminDecision_AssignToPSM";
          communicationTitle = "Admin Assigned Lead to PSM";
        }
        else if (adminAction === "Drop Lead") {
          updates.currentStage = "Dropped";
          updates.droppedReason = `Admin dropped: ${notes}`;
          
          communicationType = "AdminDecision_DropLead";
          communicationTitle = "Admin Dropped Lead";
        }
        else if (adminAction === "Send Back to Original RM") {
          // Get the original RM from processed lead
          const processedLead = await db.processed_leads.get(workflowState.processedLeadId);
          if (!processedLead || !processedLead.assignedRmAdid) {
            setError("Could not find original RM assignment");
            return;
          }
          
          updates.currentStage = "RM_AwaitingReply";
          updates.currentAssigneeType = "RM";
          updates.currentAssigneeAdid = processedLead.assignedRmAdid;
          
          communicationType = "AdminDecision_ReturnToOriginalRM";
          communicationTitle = "Admin Returned Lead to Original RM";
        }
        
        // Update the workflow state
        await db.lead_workflow_states.update(lead.workflowStateId, updates);
        
        // Create a communication record
        await createLeadCommunication({
          processedLeadId: lead.processedLeadId,
          communicationType: communicationType as any, // Type assertion to avoid TypeScript error
          title: communicationTitle,
          description: notes,
          senderType: 'User',
          senderAdidOrEmail: user?.id || 'admin',
          recipientAdidOrEmail: 'system',
          relatedWorkflowStateId: lead.workflowStateId
        });
      }
      // Handle non-PSM actions (existing functionality)
      else {
      // Convert selected flag back to a stage value
      const newStage = flagToStageMap[flag] || lead.currentStage;
      
      // If stage didn't change, don't update
      if (newStage === lead.currentStage && !notes) {
        onClose();
        return;
      }
      
      const updates: any = {
        updatedAt: now
      };
      
      // If stage changed, update stage-related fields
      if (newStage !== lead.currentStage) {
        updates.currentStage = newStage;
        updates.lastStageChangeTimestamp = now;
      }
      
      // Update the workflow state
      await db.lead_workflow_states.update(lead.workflowStateId, updates);
      
      // If notes were provided, add a communication record
      if (notes.trim()) {
        await createLeadCommunication({
          processedLeadId: lead.processedLeadId,
          communicationType: 'StageUpdate',
          title: 'Manual Stage Update',
          description: notes,
          senderType: 'RM',
          senderAdidOrEmail: lead.rmId || 'system',
          recipientAdidOrEmail: 'system',
          relatedWorkflowStateId: lead.workflowStateId
        });
        }
      }
      
      // Call onSave callback if provided to refresh the leads list
      if (onSave) {
        onSave();
      }
      
      onClose();
    } catch (err) {
      console.error("Error updating lead:", err);
      setError("Failed to update lead. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-[#0F0F12] rounded-xl shadow-lg w-full max-w-2xl max-h-[90vh] overflow-hidden">
        <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-[#1F1F23]">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Edit Lead {lead.id}</h2>
          <Button variant="ghost" size="sm" className="h-8 w-8 p-0" onClick={onClose}>
            <X className="h-4 w-4" />
            <span className="sr-only">Close</span>
          </Button>
        </div>

        <div className="p-4 overflow-y-auto max-h-[calc(90vh-120px)]">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div>
              <Label htmlFor="dealerName">Dealer Name</Label>
              <Input id="dealerName" value={lead.dealerName} readOnly className="bg-gray-50 dark:bg-[#1F1F23]" />
            </div>
            <div>
              <Label htmlFor="anchorName">Anchor Name</Label>
              <Input id="anchorName" value={lead.anchorName} readOnly className="bg-gray-50 dark:bg-[#1F1F23]" />
            </div>
            <div>
              <Label htmlFor="rmName">RM Name</Label>
              <Input id="rmName" value={lead.rmName} readOnly className="bg-gray-50 dark:bg-[#1F1F23]" />
            </div>
            <div>
              <Label htmlFor="lastUpdated">Last Updated</Label>
              <Input id="lastUpdated" value={lead.lastUpdated.split('T')[0] || lead.lastUpdated} readOnly className="bg-gray-50 dark:bg-[#1F1F23]" />
            </div>
            <div>
              <Label htmlFor="ageingBucket">Ageing Bucket</Label>
              <Input id="ageingBucket" value={lead.ageingBucket} readOnly className="bg-gray-50 dark:bg-[#1F1F23]" />
            </div>
            <div>
              <Label htmlFor="lastActionDate">Last Action Date</Label>
              <Input id="lastActionDate" value={lead.lastActionDate} readOnly className="bg-gray-50 dark:bg-[#1F1F23]" />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            {userRole === 'psm' ? (
              <div>
                <Label htmlFor="psmAction">Action</Label>
                <Select value={psmAction} onValueChange={setPsmAction}>
                  <SelectTrigger id="psmAction">
                    <SelectValue placeholder="Select action" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="CloseLead">Close Lead</SelectItem>
                    <SelectItem value="Dropped">Mark as Dropped</SelectItem>
                    <SelectItem value="Send Back to RM">Send Back to RM</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            ) : userRole === 'admin' && lead.currentStage === 'AdminReviewPending' ? (
              <div>
                <Label htmlFor="adminAction">Program Review Action</Label>
                <Select value={adminAction} onValueChange={setAdminAction}>
                  <SelectTrigger id="adminAction">
                    <SelectValue placeholder="Select action" />
                  </SelectTrigger>
                  <SelectContent>
                    {ADMIN_REVIEW_ACTIONS.map(action => (
                      <SelectItem key={action} value={action}>
                        {action}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            ) : (
            <div>
              <Label htmlFor="flag">Flag</Label>
              <Select value={flag} onValueChange={setFlag}>
                <SelectTrigger id="flag">
                  <SelectValue placeholder="Select flag" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="With RM">With RM</SelectItem>
                  <SelectItem value="Escalation 1">Escalation 1</SelectItem>
                  <SelectItem value="Escalation 2">Escalation 2</SelectItem>
                  <SelectItem value="With PSM">With PSM</SelectItem>
                  <SelectItem value="Under Progress">Under Progress</SelectItem>
                  <SelectItem value="Dropped">Dropped</SelectItem>
                </SelectContent>
              </Select>
            </div>
            )}
            
            {/* Show RM selection for reassignment */}
            {userRole === 'admin' && adminAction === 'Reassign to RM' && (
              <div>
                <Label htmlFor="selectRM">Select RM</Label>
                <Select value={selectedRM} onValueChange={setSelectedRM} disabled={isLoadingRMs}>
                  <SelectTrigger id="selectRM">
                    <SelectValue placeholder={isLoadingRMs ? "Loading..." : "Select RM"} />
                  </SelectTrigger>
                  <SelectContent>
                    {availableRMs.map(rm => (
                      <SelectItem key={rm.id} value={rm.id}>
                        {rm.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>

          <div className="mb-6">
            <Label htmlFor="notes" className="flex items-center">
              Notes {isNotesRequired && <span className="text-red-500 ml-1">*</span>}
            </Label>
            <Textarea 
              id="notes" 
              placeholder={isNotesRequired 
                ? "Notes are required for this action..." 
                : "Add notes about this lead..."} 
              className={`min-h-[100px] ${isNotesRequired && !notes.trim() ? 'border-red-500 dark:border-red-500' : ''}`}
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
            />
            {isNotesRequired && !notes.trim() && (
              <p className="text-red-500 text-sm mt-1">Please provide notes explaining your decision</p>
            )}
          </div>

          {error && (
            <div className="mb-4 p-3 text-sm text-red-600 bg-red-100 rounded-md dark:bg-red-900/30 dark:text-red-400">
              {error}
            </div>
          )}
        </div>

        <div className="flex items-center justify-end gap-2 p-4 border-t border-gray-200 dark:border-[#1F1F23]">
          <Button variant="outline" onClick={onClose} disabled={isSubmitting}>
            Cancel
          </Button>
          <Button 
            onClick={handleSave} 
            disabled={isSubmitting || (isNotesRequired && !notes.trim())}
          >
            {isSubmitting ? "Saving..." : "Save Changes"}
          </Button>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/SCFleadmanagement/psm-leads.tsx">
"use client"

import { useState, useEffect } from "react"
import { Eye, Edit2, Search, Filter, Download, ChevronDown, ChevronUp, ArrowUpDown, CheckSquare, Square, X, AlertCircle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { cn } from "@/lib/utils"
import EditLeadModal from "./edit-lead-modal"
import Link from "next/link"
import { useAuth } from "@/components/auth-provider"
import db from "@/lib/db"
import { stageToFlagMap, createLeadCommunication, updateWorkflowStateAfterCommunication } from "@/lib/lead-workflow"
import { differenceInDays } from "date-fns"
import { ProcessedLead, LeadWorkflowState } from "@/lib/db"
import { safeDbOperation } from "@/lib/db-init"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"

// Check if we're in a browser environment safely
const isBrowser = () => {
  try {
    return typeof window !== 'undefined' && 
           typeof window.document !== 'undefined';
  } catch (e) {
    return false;
  }
};

interface Lead {
  id: string
  processedLeadId: string
  workflowStateId: string
  dealerName: string
  anchorName: string
  rmName: string
  rmId: string
  psmName: string
  psmId: string
  lastUpdated: string
  ageingBucket: string
  lastActionDate: string
  flag: string
  currentStage: string
}

const flagColors = {
  "With RM": "bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300",
  "Escalation 1": "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300",
  "Escalation 2": "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300",
  "With PSM": "bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300",
  "Under Progress": "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300",
  "Dropped": "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300",
  "Closed": "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300",
}

// Helper function to calculate ageing bucket
const calculateAgeingBucket = (createdAt: string): string => {
  const createdDate = new Date(createdAt);
  const currentDate = new Date();
  const daysDifference = differenceInDays(currentDate, createdDate);

  if (daysDifference <= 7) return "0-7 days";
  if (daysDifference <= 14) return "8-14 days";
  if (daysDifference <= 30) return "15-30 days";
  if (daysDifference <= 60) return "31-60 days";
  return "60+ days";
};

export default function PSMLeads() {
  const { user, userRole } = useAuth();
  const [searchTerm, setSearchTerm] = useState("")
  const [sortField, setSortField] = useState<keyof Lead | null>("lastUpdated")
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc")
  const [selectedLead, setSelectedLead] = useState<Lead | null>(null)
  const [isEditModalOpen, setIsEditModalOpen] = useState(false)
  const [actualLeads, setActualLeads] = useState<Lead[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [mounted, setMounted] = useState(false)
  const [assignedFilter, setAssignedFilter] = useState<'all' | 'assigned' | 'unassigned'>('all')
  
  // Bulk close functionality
  const [selectedLeads, setSelectedLeads] = useState<string[]>([])
  const [isBulkCloseDialogOpen, setIsBulkCloseDialogOpen] = useState(false)
  const [bulkCloseNotes, setBulkCloseNotes] = useState("")
  const [isBulkClosing, setIsBulkClosing] = useState(false)
  const [bulkCloseError, setBulkCloseError] = useState<string | null>(null)

  // Set mounted flag on client side
  useEffect(() => {
    setMounted(true)
  }, [])

  // Fetch leads data for PSM - specifically leads requiring PSM action
  useEffect(() => {
    // Skip fetching on server-side or if not mounted
    if (!isBrowser() || !mounted) return;
    
    const fetchPSMActionableLeads = async () => {
      if (!user) return;
      
      try {
        setIsLoading(true);
        setError(null);
        
        // Get all workflow states where currentStage is related to PSM action
        const psmActionableStages = ['PSM_ReviewPending', 'PSM_Assigned', 'PSM_AwaitingAction', 'Dropped'];
        
        // Get all workflow states with PSM-related stages
        const psmWorkflowStates = await safeDbOperation(
          () => db.lead_workflow_states
            .where("currentStage")
            .anyOf(psmActionableStages)
            .toArray(),
          [] // Empty array as fallback
        );
        
        console.log(`Found ${psmWorkflowStates.length} PSM actionable leads`);
        
        // Filter by PSM ID if user is a PSM and 'assigned' filter is active
        let filteredWorkflowStates = psmWorkflowStates;
        
        if (userRole === "psm" && assignedFilter === 'assigned' && user.id) {
          filteredWorkflowStates = psmWorkflowStates.filter(
            state => state.psmAdid === user.id
          );
          console.log(`Filtered to ${filteredWorkflowStates.length} leads assigned to PSM ${user.id}`);
        }
        
        // Create a map to hold RM and PSM names for efficient lookup
        const rmNamesMap = new Map<string, string>();
        const psmNamesMap = new Map<string, string>();
        
        // Process each workflow state to get the associated processed lead
        const leadsPromises = filteredWorkflowStates.map(async (workflowState) => {
          try {
            // Get processed lead for this workflow state
            const processedLead = await safeDbOperation(
              () => db.processed_leads
                .get(workflowState.processedLeadId),
              null
            );
            
            if (!processedLead) {
              console.warn(`No processed lead found for workflow state ${workflowState.id}`);
              return null;
            }
            
            // Get RM name if not already in the map
            let rmName = "N/A";
            let rmId = processedLead.assignedRmAdid || "unassigned";
            
            if (rmNamesMap.has(rmId)) {
              rmName = rmNamesMap.get(rmId) || "N/A";
            } else {
              // Try to find RM in RMBranch table first
              const rmRecord = await safeDbOperation(
                () => db.rm_branch
                  .where("rmId")
                  .equals(rmId)
                  .first(),
                null
              );
              
              if (rmRecord) {
                rmName = rmRecord.rmName;
                rmNamesMap.set(rmId, rmName);
              } else {
                // If not found, try the HierarchyMaster table
                const hierarchyRecord = await safeDbOperation(
                  () => db.hierarchy_master
                    .where("empAdid")
                    .equals(rmId)
                    .first(),
                  null
                );
                
                if (hierarchyRecord) {
                  rmName = hierarchyRecord.employeeName;
                  rmNamesMap.set(rmId, rmName);
                }
              }
            }
            
            // Get PSM name if not already in the map
            let psmName = "N/A";
            let psmId = workflowState.psmAdid || "unassigned";
            
            if (psmNamesMap.has(psmId)) {
              psmName = psmNamesMap.get(psmId) || "N/A";
            } else {
              // Try to find PSM in anchor_master table first
              const anchorRecords = await safeDbOperation(
                () => db.anchor_master
                  .where("PSMADID")
                  .equals(psmId)
                  .toArray(),
                []
              );
              
              if (anchorRecords.length > 0) {
                psmName = anchorRecords[0].PSMName || "N/A";
                psmNamesMap.set(psmId, psmName);
              } else {
                // If not found, try the HierarchyMaster table
                const hierarchyRecord = await safeDbOperation(
                  () => db.hierarchy_master
                    .where("empAdid")
                    .equals(psmId)
                    .first(),
                  null
                );
                
                if (hierarchyRecord) {
                  psmName = hierarchyRecord.employeeName;
                  psmNamesMap.set(psmId, psmName);
                }
              }
            }
            
            // Map flag from current stage
            const flag = stageToFlagMap[workflowState.currentStage] || "Unknown";
            
            // Get dealer name from original data
            const dealerName = processedLead.originalData["Name of the Firm"] || "Unknown Dealer";
            
            // Format the lead object
            return {
              id: workflowState.id, // Using workflow state ID as the lead ID for display
              processedLeadId: processedLead.id,
              workflowStateId: workflowState.id,
              dealerName,
              anchorName: processedLead.anchorNameSelected,
              rmName,
              rmId,
              psmName,
              psmId,
              lastUpdated: workflowState.updatedAt,
              ageingBucket: calculateAgeingBucket(workflowState.createdAt),
              lastActionDate: workflowState.lastCommunicationTimestamp.split('T')[0],
              flag,
              currentStage: workflowState.currentStage,
            };
          } catch (error) {
            console.error(`Error processing workflow state ${workflowState.id}:`, error);
            return null;
          }
        });
        
        // Wait for all promises to resolve
        const leadResults = await Promise.all(leadsPromises);
        
        // Filter out null results
        const validLeads = leadResults.filter(lead => lead !== null) as Lead[];
        
        setActualLeads(validLeads);
        
        // Clear selected leads when leads are refreshed
        setSelectedLeads([]);
      } catch (error) {
        console.error("Error fetching PSM actionable leads:", error);
        setError("Failed to load leads. Please try again later.");
      } finally {
        setIsLoading(false);
      }
    };
    
    // Call the fetch function
    fetchPSMActionableLeads();
  }, [user, userRole, assignedFilter, mounted]);

  const handleSort = (field: keyof Lead) => {
    if (sortField === field) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      setSortField(field)
      setSortDirection("asc")
    }
  }

  const filteredLeads = actualLeads.filter(
    (lead) =>
      lead.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.dealerName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.anchorName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.rmName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.psmName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      lead.flag.toLowerCase().includes(searchTerm.toLowerCase()),
  )

  const sortedLeads = [...filteredLeads].sort((a, b) => {
    if (!sortField) return 0

    const aValue = a[sortField]
    const bValue = b[sortField]

    if (aValue < bValue) return sortDirection === "asc" ? -1 : 1
    if (aValue > bValue) return sortDirection === "asc" ? 1 : -1
    return 0
  })

  const handleEdit = (lead: Lead) => {
    setSelectedLead(lead)
    setIsEditModalOpen(true)
  }

  const handleCloseModal = () => {
    setIsEditModalOpen(false)
    setSelectedLead(null)
  }
  
  const refreshLeads = async () => {
    // Reset filter and reload leads
    setIsLoading(true);
    // This will trigger the useEffect to reload data
    setAssignedFilter(assignedFilter);
  };

  // Bulk selection handling
  const toggleSelectLead = (leadId: string) => {
    setSelectedLeads(prev => 
      prev.includes(leadId) 
        ? prev.filter(id => id !== leadId) 
        : [...prev, leadId]
    );
  };

  const toggleSelectAll = () => {
    if (selectedLeads.length === sortedLeads.length) {
      // Deselect all
      setSelectedLeads([]);
    } else {
      // Select all
      setSelectedLeads(sortedLeads.map(lead => lead.id));
    }
  };

  // Handle bulk close
  const openBulkCloseDialog = () => {
    setBulkCloseNotes("");
    setBulkCloseError(null);
    setIsBulkCloseDialogOpen(true);
  };

  const handleBulkClose = async () => {
    if (!user) return;
    
    try {
      setIsBulkClosing(true);
      setBulkCloseError(null);
      
      const now = new Date().toISOString();
      const bulkClosePromises = selectedLeads.map(async (leadId) => {
        try {
          // Find the lead in our sorted leads array
          const lead = sortedLeads.find(l => l.id === leadId);
          if (!lead) return;
          
          // Set updates to close the lead
          const updates = {
            currentStage: "ClosedLead",
            lastStageChangeTimestamp: now,
            lastCommunicationTimestamp: now,
            updatedAt: now
          };
          
          // Update the workflow state
          await db.lead_workflow_states.update(lead.workflowStateId, updates);
          
          // Create a communication record
          await createLeadCommunication({
            processedLeadId: lead.processedLeadId,
            communicationType: 'PSM_Bulk_Closed_Lead',
            title: 'Lead Bulk Closed by PSM',
            description: bulkCloseNotes || 'Lead has been closed by PSM in bulk operation.',
            senderType: 'PSM',
            senderAdidOrEmail: user.id || 'unknown-psm',
            recipientAdidOrEmail: 'system',
            relatedWorkflowStateId: lead.workflowStateId
          });
          
          return lead.id;
        } catch (error) {
          console.error(`Error closing lead ${leadId}:`, error);
          return null;
        }
      });
      
      // Wait for all promises to resolve
      await Promise.all(bulkClosePromises);
      
      // Close dialog and refresh leads
      setIsBulkCloseDialogOpen(false);
      setSelectedLeads([]);
      
      // Refresh the leads list
      refreshLeads();
    } catch (error) {
      console.error("Error during bulk close:", error);
      setBulkCloseError("Failed to bulk close leads. Please try again.");
    } finally {
      setIsBulkClosing(false);
    }
  };

  const SortIcon = ({ field }: { field: keyof Lead }) => {
    if (sortField !== field) return <ArrowUpDown className="ml-1 h-4 w-4" />
    return sortDirection === "asc" ? <ChevronUp className="ml-1 h-4 w-4" /> : <ChevronDown className="ml-1 h-4 w-4" />
  }

  return (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Leads for PSM Review</h1>

        <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
          <div className="relative w-full sm:w-64">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />
            <Input
              type="search"
              placeholder="Search leads..."
              className="pl-9 w-full"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          {/* Assigned to me Dropdown */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="gap-1">
                {assignedFilter === 'assigned' ? 'Assigned to me' : assignedFilter === 'unassigned' ? 'Unassigned' : 'All leads'}
                <ChevronDown className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-40">
              <DropdownMenuItem onClick={() => setAssignedFilter('all')}>All</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setAssignedFilter('assigned')}>Assigned to me</DropdownMenuItem>
              <DropdownMenuItem onClick={() => setAssignedFilter('unassigned')}>Unassigned</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          
          {/* Bulk Actions Button - Only show when leads are selected */}
          {selectedLeads.length > 0 && userRole === 'psm' && (
            <Button 
              variant="secondary" 
              size="sm" 
              className="gap-1"
              onClick={openBulkCloseDialog}
            >
              Close Selected ({selectedLeads.length})
            </Button>
          )}
        </div>
      </div>

      {isLoading ? (
        <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] p-8 text-center">
          <div className="animate-pulse space-y-4">
            <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/3 mx-auto"></div>
            <div className="h-32 bg-gray-200 dark:bg-gray-700 rounded"></div>
          </div>
        </div>
      ) : error ? (
        <div className="bg-red-50 dark:bg-red-900/30 p-4 rounded-md text-red-600 dark:text-red-400">
          {error}
        </div>
      ) : actualLeads.length === 0 ? (
        <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] p-8 text-center">
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-1">No leads found</h3>
          <p className="text-gray-600 dark:text-gray-400">
            There are currently no leads requiring PSM review or action.
          </p>
        </div>
      ) : (
        <div className="bg-white dark:bg-[#0F0F12] rounded-xl border border-gray-200 dark:border-[#1F1F23] overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="border-b border-gray-200 dark:border-[#1F1F23] bg-gray-50 dark:bg-[#1F1F23]">
                  {userRole === 'psm' && (
                    <th className="px-2 py-3 text-center">
                      <div 
                        className="cursor-pointer inline-flex" 
                        onClick={toggleSelectAll}
                        title={selectedLeads.length === sortedLeads.length ? "Deselect all" : "Select all"}
                      >
                        {selectedLeads.length === sortedLeads.length ? (
                          <CheckSquare className="h-4 w-4 text-blue-500" />
                        ) : (
                          <Square className="h-4 w-4 text-gray-400" />
                        )}
                      </div>
                    </th>
                  )}
                  <th
                    className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                    onClick={() => handleSort("id")}
                  >
                    <div className="flex items-center">
                      Lead ID
                      <SortIcon field="id" />
                    </div>
                  </th>
                  <th
                    className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                    onClick={() => handleSort("dealerName")}
                  >
                    <div className="flex items-center">
                      Dealer Name
                      <SortIcon field="dealerName" />
                    </div>
                  </th>
                  <th
                    className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                    onClick={() => handleSort("anchorName")}
                  >
                    <div className="flex items-center">
                      Anchor Name
                      <SortIcon field="anchorName" />
                    </div>
                  </th>
                  <th
                    className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                    onClick={() => handleSort("rmName")}
                  >
                    <div className="flex items-center">
                      RM Name
                      <SortIcon field="rmName" />
                    </div>
                  </th>
                  <th
                    className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                    onClick={() => handleSort("psmName")}
                  >
                    <div className="flex items-center">
                      PSM Name
                      <SortIcon field="psmName" />
                    </div>
                  </th>
                  <th
                    className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                    onClick={() => handleSort("flag")}
                  >
                    <div className="flex items-center">
                      Status
                      <SortIcon field="flag" />
                    </div>
                  </th>
                  <th
                    className="px-4 py-3 text-left font-medium text-gray-500 dark:text-gray-400 cursor-pointer"
                    onClick={() => handleSort("lastActionDate")}
                  >
                    <div className="flex items-center">
                      Last Action Date
                      <SortIcon field="lastActionDate" />
                    </div>
                  </th>
                  <th className="px-4 py-3 text-right font-medium text-gray-500 dark:text-gray-400">Actions</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 dark:divide-[#1F1F23]">
                {sortedLeads.map((lead) => (
                  <tr
                    key={lead.id}
                    className="hover:bg-gray-50 dark:hover:bg-[#1F1F23] transition-colors"
                  >
                    {userRole === 'psm' && (
                      <td className="px-2 py-3 text-center">
                        <div 
                          className="cursor-pointer inline-flex" 
                          onClick={() => toggleSelectLead(lead.id)}
                        >
                          {selectedLeads.includes(lead.id) ? (
                            <CheckSquare className="h-4 w-4 text-blue-500" />
                          ) : (
                            <Square className="h-4 w-4 text-gray-400" />
                          )}
                        </div>
                      </td>
                    )}
                    <td className="px-4 py-3 font-medium text-gray-900 dark:text-white">{lead.processedLeadId.substring(0, 8)}...</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.dealerName}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.anchorName}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.rmName}</td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.psmName}</td>
                    <td className="px-4 py-3">
                      <span
                        className={cn(
                          "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium",
                          flagColors[lead.flag as keyof typeof flagColors] || flagColors["Dropped"]
                        )}
                      >
                        {lead.flag}
                      </span>
                    </td>
                    <td className="px-4 py-3 text-gray-700 dark:text-gray-300">{lead.lastActionDate}</td>
                    <td className="px-4 py-3 text-right space-x-1">
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8"
                        title="View Details"
                      >
                        <Link href={`/lead-details/${lead.processedLeadId}`}>
                          <Eye className="h-4 w-4" />
                        </Link>
                      </Button>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8"
                        title="Edit Lead"
                        onClick={() => handleEdit(lead)}
                      >
                        <Edit2 className="h-4 w-4" />
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Edit Lead Modal */}
      {selectedLead && (
        <EditLeadModal 
          lead={selectedLead} 
          isOpen={isEditModalOpen} 
          onClose={handleCloseModal}
          onSave={refreshLeads}
        />
      )}
      
      {/* Bulk Close Dialog */}
      <Dialog open={isBulkCloseDialogOpen} onOpenChange={setIsBulkCloseDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Bulk Close {selectedLeads.length} Leads</DialogTitle>
            <DialogDescription>
              Are you sure you want to close {selectedLeads.length} selected leads? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          
          <div className="mt-4">
            <Label htmlFor="bulkCloseNotes">Notes (Optional)</Label>
            <Textarea 
              id="bulkCloseNotes" 
              placeholder="Add notes about why these leads are being closed..." 
              className="min-h-[100px] mt-1"
              value={bulkCloseNotes}
              onChange={(e) => setBulkCloseNotes(e.target.value)}
            />
          </div>
          
          {bulkCloseError && (
            <div className="mt-2 p-3 text-sm flex items-center gap-2 text-red-600 bg-red-100 rounded-md dark:bg-red-900/30 dark:text-red-400">
              <AlertCircle className="h-4 w-4" />
              <span>{bulkCloseError}</span>
            </div>
          )}
          
          <DialogFooter className="mt-4">
            <Button 
              variant="outline" 
              onClick={() => setIsBulkCloseDialogOpen(false)}
              disabled={isBulkClosing}
            >
              Cancel
            </Button>
            <Button 
              onClick={handleBulkClose}
              disabled={isBulkClosing}
            >
              {isBulkClosing ? "Closing..." : `Close ${selectedLeads.length} Leads`}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="components/auth-provider.tsx">
"use client"

import { createContext, useState, useEffect, useContext, ReactNode } from "react"
import { useRouter, usePathname } from "next/navigation"

// Define available roles
export type UserRole = "admin" | "rm" | "rm-inbox" | "psm" | null

interface User {
  id: string;
  email: string;
  role: UserRole;
}

interface AuthContextType {
  isAuthenticated: boolean
  userEmail: string | null
  userRole: UserRole
  user: User | null
  login: (email: string, role: UserRole, id?: string) => void
  logout: () => void
  hasAccess: (page: string) => boolean
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: ReactNode }) {
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [userEmail, setUserEmail] = useState<string | null>(null)
  const [userRole, setUserRole] = useState<UserRole>(null)
  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const router = useRouter()
  const pathname = usePathname()

  useEffect(() => {
    // Check if user is logged in from localStorage
    const loggedIn = localStorage.getItem("isLoggedIn") === "true"
    const email = localStorage.getItem("userEmail")
    const role = localStorage.getItem("userRole") as UserRole
    const userId = localStorage.getItem("userId") || email?.split('@')[0] || 'unknown'
    
    setIsAuthenticated(loggedIn)
    setUserEmail(email)
    setUserRole(role)
    
    if (loggedIn && email && role) {
      setUser({
        id: userId,
        email: email,
        role: role
      })
    }
    
    setIsLoading(false)
    
    // Redirect logic
    if (!isLoading) {
      if (!isAuthenticated && pathname !== "/login") {
        router.push("/login")
      } else if (isAuthenticated && pathname === "/login") {
        // Redirect based on role
        if (userRole === "rm") {
          router.push("/rm-leads")
        } else if (userRole === "rm-inbox") {
          router.push("/rm-inbox")
        } else if (userRole === "psm") {
          router.push("/dashboard")
        } else {
          router.push("/dashboard")
        }
      }
    }
  }, [isAuthenticated, isLoading, pathname, router, userRole])

  // Define page access permissions based on user role
  const hasAccess = (page: string): boolean => {
    if (!isAuthenticated || !userRole) return false

    // Admin has access to everything
    if (userRole === "admin") {
      return true
    }

    // RM only has access to RM leads, lead details, and reports pages
    if (userRole === "rm") {
      return page === "/rm-leads" || 
             page.startsWith("/lead-details/") || 
             page === "/reports"
    }
    
    // RM-inbox users only have access to their inbox and lead details
    if (userRole === "rm-inbox") {
      return page === "/rm-inbox" || 
             page.startsWith("/lead-details/")
    }

    // PSM users have access to dashboard, reports, new leads, rm leads, psm leads, smartfin update, and lead details
    if (userRole === "psm") {
      return page === "/dashboard" || 
             page === "/reports" || 
             page === "/new-leads" || 
             page === "/rm-leads" || 
             page === "/psm-leads" ||
             page === "/smartfin-update" || 
             page.startsWith("/lead-details/")
    }

    return false
  }

  const login = (email: string, role: UserRole, id?: string) => {
    const userId = id || email.split('@')[0] || 'unknown'
    localStorage.setItem("isLoggedIn", "true")
    localStorage.setItem("userEmail", email)
    localStorage.setItem("userRole", role as string)
    localStorage.setItem("userId", userId)
    
    setIsAuthenticated(true)
    setUserEmail(email)
    setUserRole(role)
    setUser({
      id: userId,
      email: email,
      role: role
    })
  }

  const logout = () => {
    localStorage.removeItem("isLoggedIn")
    localStorage.removeItem("userEmail")
    localStorage.removeItem("userRole")
    localStorage.removeItem("userId")
    setIsAuthenticated(false)
    setUserEmail(null)
    setUserRole(null)
    setUser(null)
    router.push("/login")
  }

  return (
    <AuthContext.Provider value={{ isAuthenticated, userEmail, userRole, user, login, logout, hasAccess }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider")
  }
  return context
}
</file>

<file path="package.json">
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-alert-dialog": "^1.1.4",
    "@radix-ui/react-aspect-ratio": "^1.1.1",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-collapsible": "^1.1.2",
    "@radix-ui/react-context-menu": "^2.2.4",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-hover-card": "^1.1.4",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-menubar": "^1.1.4",
    "@radix-ui/react-navigation-menu": "^1.2.3",
    "@radix-ui/react-popover": "^1.1.4",
    "@radix-ui/react-progress": "^1.1.1",
    "@radix-ui/react-radio-group": "^1.2.2",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slider": "^1.2.2",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-switch": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.4",
    "@radix-ui/react-toggle": "^1.1.1",
    "@radix-ui/react-toggle-group": "^1.1.1",
    "@radix-ui/react-tooltip": "^1.1.6",
    "@types/uuid": "^10.0.0",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "dexie": "^3.2.7",
    "embla-carousel-react": "8.5.1",
    "file-saver": "^2.0.5",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "latest",
    "openai": "^5.0.1",
    "react": "^19",
    "react-day-picker": "8.10.1",
    "react-dom": "^19",
    "react-hook-form": "^7.55.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.1.0",
    "vaul": "^0.9.6",
    "xlsx": "^0.18.5",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/file-saver": "^2.0.7",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  },
  "packageManager": "pnpm@10.8.0+sha1.ae60ea225bbd6b1f51cd17e91b40431c8b12a052"
}
</file>

<file path="components/SCFleadmanagement/new-leads.tsx">
"use client"

import { useState, useEffect } from "react"
import { Download, Upload, AlertCircle, CheckCircle, XCircle, FileText } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { cn } from "@/lib/utils"
import db, { MasterService } from "@/lib/db"
import { useAuth } from "@/components/auth-provider"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import { LEAD_TEMPLATE_HEADERS, ERROR_CODES } from "@/lib/constants"
import type { PincodeBranch, RMBranch, ErrorCodeMaster, ProcessedLead } from "@/lib/db"
import { v4 as uuidv4 } from 'uuid';
import { getEmailFromRmAdid, getPSMDetailsFromAnchor, safeHandleNewLeadAssignment } from "@/lib/lead-utils"
import { uploadLeadToSmartfin } from "@/lib/smartfin-api"

type UploadStatus = "idle" | "processing" | "validating" | "partial" | "success" | "failed"
type SmartfinUploadStatus = "idle" | "processing" | "partial" | "success" | "failed"
type RowStatus = "success" | "failed" | "warning"

interface UploadResultRow {
  rowNumber: number; // This is the originalExcelRowNumber
  dealerId: string; // Key field from Excel for display
  anchorId: string; // Key field from Excel for display
  rmName: string; // Original RM Name from Excel, if any
  assignedRmAdid?: string; // The finally assigned RM ADID
  status: RowStatus; // UI status: 'success', 'failed'
  error?: string; // This will be the errorDescription for UI
  smartfinStatus?: 'pending' | 'success' | 'failed'; // Smartfin upload status
  smartfinDealerId?: string; // Smartfin Dealer ID if successful
  smartfinError?: string; // Smartfin error description if failed
}

interface UploadResult {
  total: number;
  success: number;
  failed: number;
  rows: UploadResultRow[]; // For UI display
  uploadBatchId?: string; // Added to link with processed leads
}

interface SmartfinUploadResult {
  total: number;
  success: number;
  failed: number;
  rows: UploadResultRow[]; // For UI display with Smartfin status
  uploadBatchId: string; // Same as the original upload batch ID
}

interface UploadHistoryItem {
  fileName: string
  uploadDate: string
  uploadedBy: string
  status: "Success" | "Failure"
  responseFile: string
  uploadBatchId?: string // Added for reference to processed leads
  uploadStep?: 'local_processing' | 'smartfin_upload' // Added to differentiate between the two types of uploads
}

// Near the top of the file, before the SmartfinUpload function
// Add a helper function to ensure we have non-undefined values
const ensureString = (value: string | null | undefined): string => {
  return value || '';
};

export default function NewLeads() {
  const [uploadStatus, setUploadStatus] = useState<UploadStatus>("idle")
  const [smartfinUploadStatus, setSmartfinUploadStatus] = useState<SmartfinUploadStatus>("idle")
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [uploadResult, setUploadResult] = useState<UploadResult | null>(null)
  const [smartfinUploadResult, setSmartfinUploadResult] = useState<SmartfinUploadResult | null>(null)
  const [showSmartfinUploadButton, setShowSmartfinUploadButton] = useState<boolean>(false)
  const [anchorNamesList, setAnchorNamesList] = useState<string[]>([])
  const [programNamesList, setProgramNamesList] = useState<string[]>([])
  const [selectedAnchor, setSelectedAnchor] = useState<string>("")
  const [selectedProgram, setSelectedProgram] = useState<string>("")
  const [uploadHistory, setUploadHistory] = useState<UploadHistoryItem[]>([])
  const [fileValidationMessage, setFileValidationMessage] = useState<string>("")
  const [isFileValid, setIsFileValid] = useState<boolean>(false)
  const { userEmail } = useAuth()

  // Fetch anchor and program names on component mount
  useEffect(() => {
    const fetchDropdownData = async () => {
      try {
        const anchorsResult = await MasterService.getUniqueAnchorNames();
        const programsResult = await MasterService.getUniqueProgramNames();
        
        if (anchorsResult.success && anchorsResult.data) {
          setAnchorNamesList(anchorsResult.data as string[]);
        }
        
        if (programsResult.success && programsResult.data) {
          setProgramNamesList(programsResult.data as string[]);
        }
      } catch (error) {
        console.error("Error fetching dropdown data:", error);
      }
    };

    fetchDropdownData();
  }, []);

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0] || null
    setSelectedFile(file)
    setUploadStatus("idle")
    setUploadResult(null)
    setFileValidationMessage("")
    setIsFileValid(false)
    
    // Validate file headers if a file is selected
    if (file) {
      try {
        setUploadStatus("validating")
        
        // Read the file
        const arrayBuffer = await file.arrayBuffer()
        const workbook = XLSX.read(arrayBuffer, { type: 'array' })
        const sheetName = workbook.SheetNames[0]
        const worksheet = workbook.Sheets[sheetName]
        
        // Extract headers from the first row
        const headers: string[] = []
        const range = XLSX.utils.decode_range(worksheet['!ref'] || 'A1')
        
        for (let C = range.s.c; C <= range.e.c; ++C) {
          const cell = worksheet[XLSX.utils.encode_cell({r: range.s.r, c: C})]
          headers.push(cell?.v || '')
        }
        
        // Check if all required headers are present
        const missingHeaders = LEAD_TEMPLATE_HEADERS.filter(header => 
          !headers.includes(header)
        )
        
        if (missingHeaders.length > 0) {
          setFileValidationMessage(`Invalid file format. Missing headers: ${missingHeaders.join(', ')}`)
          setIsFileValid(false)
          setUploadStatus("idle")
        } else {
          setFileValidationMessage("File format is valid. Ready to upload.")
          setIsFileValid(true)
          setUploadStatus("idle")
        }
      } catch (error) {
        console.error("Error validating file:", error)
        setFileValidationMessage("Error validating file. Please try again.")
        setIsFileValid(false)
        setUploadStatus("idle")
      }
    }
  }

  const handleDownloadTemplate = () => {
    MasterService.downloadLeadTemplate();
  }

  const handleUpload = async () => {
    if (!selectedFile || !selectedAnchor || !selectedProgram) {
      alert("Please select both Anchor and Program before uploading");
      return;
    }

    if (!isFileValid) {
      alert("Please select a valid file with the correct headers");
      return;
    }

    setUploadStatus("processing");
    setShowSmartfinUploadButton(false); // Reset the Smartfin upload button visibility
    console.log("=== Starting lead upload process ===");
    console.log(`Selected anchor: ${selectedAnchor}, program: ${selectedProgram}`);

    try {
      // Generate a unique ID for this upload batch
      const uploadBatchId = uuidv4();
      console.log(`Generated upload batch ID: ${uploadBatchId}`);
      
      // Read the file
      const arrayBuffer = await selectedFile.arrayBuffer();
      const workbook = XLSX.read(arrayBuffer, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      
      // Convert to JSON
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { defval: '' }) as Record<string, any>[];
      console.log(`Parsed ${jsonData.length} rows from Excel file`);
      
      // Prepare the upload result
      const uploadResult: UploadResult = {
        total: jsonData.length,
        success: 0,
        failed: 0,
        rows: [],
        uploadBatchId
      };
      
      // Fetch the required master data for lookups
      console.log("Fetching master data for lead assignment...");
      const [pincodeResult, rmBranchResult, errorCodesResult] = await Promise.all([
        MasterService.getRecords('pincode_branch', {}, undefined, 1000, 0),
        MasterService.getRecords('rm_branch', {}, undefined, 1000, 0),
        MasterService.getRecords('error_codes', {}, undefined, 1000, 0)
      ]);
      
      // Create maps for efficient lookups
      const pincodeMap = new Map<string, PincodeBranch>();
      const rmBranchMapByBranchCode = new Map<string, RMBranch[]>();
      const errorCodesMap = new Map<string, string>();
      
      if (pincodeResult.success && pincodeResult.data) {
        (pincodeResult.data as PincodeBranch[]).forEach(item => {
          pincodeMap.set(String(item.pincode), item);
        });
        console.log(`Loaded ${pincodeMap.size} pincodes for mapping`);
      }
      
      if (rmBranchResult.success && rmBranchResult.data) {
        (rmBranchResult.data as RMBranch[]).forEach(item => {
          const branches = rmBranchMapByBranchCode.get(item.branchCode) || [];
          branches.push(item);
          rmBranchMapByBranchCode.set(item.branchCode, branches);
        });
        console.log(`Loaded ${rmBranchMapByBranchCode.size} branch codes with RMs`);
      }
      
      if (errorCodesResult.success && errorCodesResult.data) {
        (errorCodesResult.data as ErrorCodeMaster[]).forEach(item => {
          errorCodesMap.set(item.errorCode, item.description);
        });
        console.log(`Loaded ${errorCodesMap.size} error codes`);
      }
      
      // Array to store processed leads for database storage
      const leadsToPersist: ProcessedLead[] = [];
      
      // Process each row
      for (let index = 0; index < jsonData.length; index++) {
        const originalRow = jsonData[index] as Record<string, any>;
        const originalRowNumber = index + 2; // Excel row (1-based with header row)
        
        console.log(`--- Processing row ${originalRowNumber} ---`);
        
        // Initialize the processed lead entry
        const processedLeadEntry: Partial<ProcessedLead> = {
          id: `${uploadBatchId}-${originalRowNumber}`,
          uploadBatchId,
          processedTimestamp: new Date().toISOString(),
          anchorNameSelected: selectedAnchor,
          programNameSelected: selectedProgram,
          originalRowNumber,
          originalData: originalRow,
          assignedRmAdid: null,
          assignmentStatus: "",
          errorCode: null,
          errorDescription: null,
          smartfinUploadStatus: null, // Initialize Smartfin fields
          smartfinDealerId: null,
          smartfinErrorCode: null,
          smartfinErrorDescription: null
        };
        
        // Initialize UI row object
        const uiRow: UploadResultRow = {
          rowNumber: originalRowNumber,
          dealerId: String(originalRow["Name of the Firm"] || `Row ${originalRowNumber}`),
          anchorId: String(originalRow["PAN Number"] || ""),
          rmName: String(originalRow["RM ADID"] || ""),
          status: "failed", // Default to failed, change if successful
          error: ""
        };
        
        // Check if RM ADID is already provided in the Excel
        if (originalRow["RM ADID"] && String(originalRow["RM ADID"]).trim() !== "") {
          const rmAdid = String(originalRow["RM ADID"]);
          console.log(`Row ${originalRowNumber}: Manual RM assignment found - ${rmAdid}`);
          
          processedLeadEntry.assignedRmAdid = rmAdid;
          processedLeadEntry.assignmentStatus = "RM Assigned (Manual)";
          processedLeadEntry.errorCode = "INFO_RM_MANUAL";
          processedLeadEntry.errorDescription = "RM assigned from Excel";
          
          uiRow.assignedRmAdid = rmAdid;
          uiRow.status = "success";
          uploadResult.success++;
        } else {
          // Automatic assignment based on pincode
          const pincode = String(originalRow["Pincode"] || "").trim();
          console.log(`Row ${originalRowNumber}: Attempting automatic RM assignment for pincode ${pincode}`);
          
          if (!pincode) {
            console.log(`Row ${originalRowNumber}: No pincode provided`);
            processedLeadEntry.errorCode = "ERR_PIN_NF";
            processedLeadEntry.assignmentStatus = "Failed: Pincode not found";
            uiRow.error = "Pincode not found";
            uploadResult.failed++;
          } else {
            const pincodeEntry = pincodeMap.get(pincode);
            
            if (!pincodeEntry) {
              console.log(`Row ${originalRowNumber}: Pincode ${pincode} not found in master data`);
              processedLeadEntry.errorCode = "ERR_PIN_NF";
              processedLeadEntry.assignmentStatus = "Failed: Pincode not found";
              uiRow.error = "Pincode not found";
              uploadResult.failed++;
            } else {
              const branchCode = pincodeEntry.branchCode;
              console.log(`Row ${originalRowNumber}: Pincode ${pincode} mapped to branch ${branchCode}`);
              
              const rmList = rmBranchMapByBranchCode.get(branchCode) || [];
              
              if (rmList.length === 0) {
                console.log(`Row ${originalRowNumber}: No RMs found for branch ${branchCode}`);
                processedLeadEntry.errorCode = "ERR_BR_NMAP";
                processedLeadEntry.assignmentStatus = "Failed: Branch not mapped to RM";
                uiRow.error = "Branch not mapped to RM";
                uploadResult.failed++;
              } else {
                // Find active RM first, then any RM
                const activeRM = rmList.find(rm => rm.active);
                const anyRM = rmList[0];
                const selectedRM = activeRM || anyRM;
                
                if (selectedRM) {
                  const rmAdid = selectedRM.rmId;
                  console.log(`Row ${originalRowNumber}: Assigned to RM ${rmAdid} (${selectedRM.rmName})`);
                  
                  processedLeadEntry.assignedRmAdid = rmAdid;
                  processedLeadEntry.assignmentStatus = "RM Assigned (Auto)";
                  processedLeadEntry.errorCode = "INFO_RM_AUTO";
                  processedLeadEntry.errorDescription = "RM assigned automatically";
                  
                  uiRow.assignedRmAdid = rmAdid;
                  uiRow.status = "success";
                  uploadResult.success++;
                } else {
                  console.log(`Row ${originalRowNumber}: Failed to find RM for branch ${branchCode}`);
                  processedLeadEntry.errorCode = "ERR_RM_NBR";
                  processedLeadEntry.assignmentStatus = "Failed: No RM for Branch";
                  uiRow.error = "No RM for Branch";
                  uploadResult.failed++;
                }
              }
            }
          }
        }
        
        // Make sure error description is set
        if (processedLeadEntry.errorCode && !processedLeadEntry.errorDescription) {
          processedLeadEntry.errorDescription = errorCodesMap.get(processedLeadEntry.errorCode) || processedLeadEntry.errorCode;
        }
        
        // Update UI row error display
        if (uiRow.status === "failed" && !uiRow.error) {
          uiRow.error = processedLeadEntry.errorDescription || "Unknown error";
        }
        
        // If the lead was successfully assigned (either by RM ADID or by pincode lookup),
        // set its smartfinUploadStatus to 'pending' instead of calling handleNewLeadAssignment immediately
        if (processedLeadEntry.assignmentStatus === "RM Assigned (Auto)" || 
            processedLeadEntry.assignmentStatus === "RM Assigned (Manual)") {
          processedLeadEntry.smartfinUploadStatus = 'pending';
        }
        
        // Store the processed lead
        leadsToPersist.push(processedLeadEntry as ProcessedLead);
        
        // Add the row to the UI results
        uploadResult.rows.push({
          rowNumber: originalRowNumber,
          dealerId: String(originalRow["Name of the Firm"] || `Row ${originalRowNumber}`),
          anchorId: String(originalRow["PAN Number"] || ""),
          rmName: String(originalRow["RM ADID"] || ""),
          assignedRmAdid: processedLeadEntry.assignedRmAdid || undefined,
          status: processedLeadEntry.errorCode ? "failed" : "success",
          error: processedLeadEntry.errorDescription || undefined
        });
      }
      
      console.log(`Processing complete. Success: ${uploadResult.success}, Failed: ${uploadResult.failed}, Total: ${uploadResult.total}`);
      console.log(`Verification check: Success + Failed = ${uploadResult.success + uploadResult.failed}, should equal Total: ${uploadResult.total}`);
      
      // Bulk save processed leads to database
      await db.processed_leads.bulkAdd(leadsToPersist);
      console.log(`Saved ${leadsToPersist.length} processed leads to database`);
      
      // Update UI state
      setUploadResult(uploadResult);
      
      // Determine upload status based on results
      if (uploadResult.success === 0) {
        setUploadStatus("failed");
      } else if (uploadResult.failed > 0) {
        setUploadStatus("partial");
      } else {
        setUploadStatus("success");
      }
      
      // Show Smartfin upload button if there are successful leads
      if (uploadResult.success > 0) {
        setShowSmartfinUploadButton(true);
      }
      
      // Add to upload history
      const newHistoryItem: UploadHistoryItem = {
        fileName: selectedFile.name,
        uploadDate: new Date().toISOString(),
        uploadedBy: userEmail || "Unknown User",
        status: uploadResult.failed === 0 ? "Success" : "Failure",
        responseFile: `${selectedFile.name.split('.')[0]}_response.xlsx`,
        uploadBatchId,
        uploadStep: 'local_processing'
      };
      
      setUploadHistory(prev => [newHistoryItem, ...prev]);
      
    } catch (error) {
      console.error("Error in lead upload process:", error);
      setUploadStatus("failed");
    }
  };

  // New function to handle Smartfin upload
  const handleSmartfinUpload = async () => {
    if (!uploadResult || !uploadResult.uploadBatchId) {
      alert("No upload batch to process");
      return;
    }
    
    setSmartfinUploadStatus("processing");
    console.log("=== Starting Smartfin upload process ===");
    
    try {
      const uploadBatchId = uploadResult.uploadBatchId;
      
      // Retrieve all ProcessedLead records from the current batch with 'pending' Smartfin status
      const pendingLeads = await db.processed_leads
        .where('uploadBatchId')
        .equals(uploadBatchId)
        .and(lead => 
          (lead.assignmentStatus === "RM Assigned (Manual)" || 
           lead.assignmentStatus === "RM Assigned (Auto)") && 
          (lead.smartfinUploadStatus === 'pending' || lead.smartfinUploadStatus === null)
        )
        .toArray();
      
      console.log(`Found ${pendingLeads.length} pending leads for Smartfin upload`);
      
      // Prepare the Smartfin upload result
      const smartfinResult: SmartfinUploadResult = {
        total: pendingLeads.length,
        success: 0,
        failed: 0,
        rows: [],
        uploadBatchId
      };
      
      // Process each pending lead using the Smartfin API
      for (const lead of pendingLeads) {
        console.log(`Processing lead ${lead.id} for Smartfin upload`);
        
        // Call the Smartfin API
        const smartfinResponse = await uploadLeadToSmartfin(lead);
        
        if (smartfinResponse.success) {
          // Get the Smartfin Dealer ID from the response
          const smartfinDealerId = smartfinResponse.smartfinDealerId!;
          
          // Update the lead record in the database
          await db.processed_leads.update(lead.id, {
            smartfinUploadStatus: 'success',
            smartfinDealerId
          });
          
          try {
            // Get the RM's email - ensure no undefined values
            if (!lead.assignedRmAdid) {
              throw new Error('Missing RM ADID');
            }
            
            const rmAdid = lead.assignedRmAdid;
            const rmEmail = await getEmailFromRmAdid(rmAdid);
            
            // Get PSM details for the anchor - use explicit cast to string with default
            const anchorName: string = (lead.anchorNameSelected as string) || '';
            const [psmAdid, psmEmail] = await getPSMDetailsFromAnchor(anchorName);
            
            // Use the safe helper function instead of directly calling handleNewLeadAssignment
            const success = await safeHandleNewLeadAssignment(
              lead.id,
              lead.assignedRmAdid,
              psmAdid
            );
            
            if (!success) {
              throw new Error('Failed to create lead workflow');
            }
            
            // Add to success count
            smartfinResult.success++;
            
            // Add the row to the UI results
            smartfinResult.rows.push({
              rowNumber: lead.originalRowNumber,
              dealerId: lead.originalData["Name of the Firm"] || `Row ${lead.originalRowNumber}`,
              anchorId: lead.originalData["PAN Number"] || "",
              rmName: lead.originalData["RM ADID"] || "",
              assignedRmAdid: lead.assignedRmAdid || undefined,
              status: "success",
              smartfinStatus: 'success',
              smartfinDealerId
            });
          } catch (error) {
            console.error(`Error calling handleNewLeadAssignment for lead ${lead.id}:`, error);
            // Update as failed instead
            await db.processed_leads.update(lead.id, {
              smartfinUploadStatus: 'failed',
              smartfinErrorCode: 'SF999',
              smartfinErrorDescription: 'Error creating lead workflow'
            });
            
            smartfinResult.failed++;
            smartfinResult.rows.push({
              rowNumber: lead.originalRowNumber,
              dealerId: lead.originalData["Name of the Firm"] || `Row ${lead.originalRowNumber}`,
              anchorId: lead.originalData["PAN Number"] || "",
              rmName: lead.originalData["RM ADID"] || "",
              assignedRmAdid: lead.assignedRmAdid || undefined,
              status: "failed",
              smartfinStatus: 'failed',
              smartfinError: 'Error creating lead workflow'
            });
          }
        } else {
          // The Smartfin API call failed
          const smartfinErrorCode = smartfinResponse.errorCode || 'SF000';
          const smartfinErrorDescription = smartfinResponse.errorDescription || 'Unknown Smartfin error';
          
          // Update the lead record in the database
          await db.processed_leads.update(lead.id, {
            smartfinUploadStatus: 'failed',
            smartfinErrorCode,
            smartfinErrorDescription
          });
          
          // Add to failed count
          smartfinResult.failed++;
          
          // Add the row to the UI results
          smartfinResult.rows.push({
            rowNumber: lead.originalRowNumber,
            dealerId: lead.originalData["Name of the Firm"] || `Row ${lead.originalRowNumber}`,
            anchorId: lead.originalData["PAN Number"] || "",
            rmName: lead.originalData["RM ADID"] || "",
            assignedRmAdid: lead.assignedRmAdid || undefined,
            status: "failed",
            smartfinStatus: 'failed',
            smartfinError: smartfinErrorDescription
          });
        }
      }
      
      console.log(`Smartfin processing complete. Success: ${smartfinResult.success}, Failed: ${smartfinResult.failed}`);
      
      // Update UI state
      setSmartfinUploadResult(smartfinResult);
      
      // Determine upload status based on results
      if (smartfinResult.success === 0) {
        setSmartfinUploadStatus("failed");
      } else if (smartfinResult.failed > 0) {
        setSmartfinUploadStatus("partial");
      } else {
        setSmartfinUploadStatus("success");
      }
      
      // Add to upload history
      const newHistoryItem: UploadHistoryItem = {
        fileName: `${selectedFile?.name || 'Unknown'} (Smartfin)`,
        uploadDate: new Date().toISOString(),
        uploadedBy: userEmail || "Unknown User",
        status: smartfinResult.failed === 0 ? "Success" : "Failure",
        responseFile: `${selectedFile?.name?.split('.')[0] || 'smartfin'}_smartfin_response.xlsx`,
        uploadBatchId,
        uploadStep: 'smartfin_upload'
      };
      
      setUploadHistory(prev => [newHistoryItem, ...prev]);
      
    } catch (error) {
      console.error("Error in Smartfin upload process:", error);
      setSmartfinUploadStatus("failed");
    }
  };

  // Function to download Smartfin results
  const handleDownloadSmartfinResults = async () => {
    if (!smartfinUploadResult || !smartfinUploadResult.uploadBatchId) {
      alert("No Smartfin upload results to download");
      return;
    }
    
    try {
      // Fetch all leads from the current upload batch
      const leads = await db.processed_leads
        .where('uploadBatchId')
        .equals(smartfinUploadResult.uploadBatchId)
        .toArray();
      
      // Create an Excel worksheet
      const workbook = XLSX.utils.book_new();
      
      // Prepare data for the worksheet
      const worksheetData = leads.map(lead => {
        // Include original lead data and Smartfin details
        return {
          'Row Number': lead.originalRowNumber,
          'Dealer Name': lead.originalData["Name of the Firm"] || '',
          'PAN': lead.originalData["PAN Number"] || '',
          'Anchor Name': lead.anchorNameSelected,
          'Program Name': lead.programNameSelected,
          'Assigned RM': lead.assignedRmAdid || '',
          'Assignment Status': lead.assignmentStatus,
          'Assignment Error': lead.errorDescription || '',
          'Smartfin Status': lead.smartfinUploadStatus || '',
          'Smartfin Dealer ID': lead.smartfinDealerId || '',
          'Smartfin Error Code': lead.smartfinErrorCode || '',
          'Smartfin Error Description': lead.smartfinErrorDescription || ''
        };
      });
      
      // Create the worksheet
      const worksheet = XLSX.utils.json_to_sheet(worksheetData);
      
      // Add the worksheet to the workbook
      XLSX.utils.book_append_sheet(workbook, worksheet, 'SmartfinResults');
      
      // Generate Excel file and trigger download
      const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
      const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      const fileName = `smartfin_results_${smartfinUploadResult.uploadBatchId}.xlsx`;
      saveAs(blob, fileName);
      
    } catch (error) {
      console.error("Error downloading Smartfin results:", error);
      alert("Failed to download Smartfin results");
    }
  };

  // Function to download results (replacing the original handleDownloadResults)
  const handleDownloadResults = async () => {
    if (!uploadResult || !uploadResult.uploadBatchId) return;
    
    try {
      // Fetch the processed leads from the database
      const processedLeads = await db.processed_leads
        .where('uploadBatchId')
        .equals(uploadResult.uploadBatchId)
        .toArray();
      
      if (processedLeads.length === 0) {
        console.error("No processed leads found for this batch");
        return;
      }
      
      // Define headers for the response Excel including assignment results
      const responseExcelHeaders = [
        ...LEAD_TEMPLATE_HEADERS, 
        "Assigned RM ADID", 
        "Assignment Status", 
        "Error Code", 
        "Error Description"
      ];
      
      // Create sheet data with headers as first row
      const sheetData = [responseExcelHeaders];
      
      // Add each processed lead to the sheet data
      processedLeads.forEach((lead) => {
        const excelRow: any[] = [];
        
        // Add original data in the same order as the template headers
        LEAD_TEMPLATE_HEADERS.forEach(header => {
          // Get value from originalData or empty string if not found
          const value = lead.originalData[header] || '';
          excelRow.push(value);
        });
        
        // Add assignment results
        excelRow.push(lead.assignedRmAdid || '');
        excelRow.push(lead.assignmentStatus || '');
        excelRow.push(lead.errorCode || '');
        excelRow.push(lead.errorDescription || '');
        
        // Add row to sheet data
        sheetData.push(excelRow);
      });
      
      // Create Excel workbook and download
      const ws = XLSX.utils.aoa_to_sheet(sheetData);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'Processed Leads');
      const wbout = XLSX.write(wb, { type: 'array', bookType: 'xlsx' });
      const blob = new Blob([wbout], { type: 'application/octet-stream' });
      saveAs(blob, `lead_upload_results_${uploadResult.uploadBatchId}.xlsx`);
      
    } catch (error) {
      console.error("Error downloading results:", error);
    }
  };

  // Function to render Smartfin upload alert
  const renderSmartfinUploadAlert = () => {
    if (smartfinUploadStatus === "idle") return null;
    
    if (smartfinUploadStatus === "processing") {
      return (
        <Alert className="mb-4">
          <AlertCircle className="h-4 w-4 mr-2" />
          <AlertTitle>Processing Smartfin Upload</AlertTitle>
          <AlertDescription>
            Please wait while we upload your leads to Smartfin...
          </AlertDescription>
        </Alert>
      );
    }
    
    if (smartfinUploadStatus === "success") {
      return (
        <Alert className="mb-4 bg-green-50 dark:bg-green-900/10 text-green-800 dark:text-green-400 border-green-200 dark:border-green-800/30">
          <CheckCircle className="h-4 w-4 mr-2" />
          <AlertTitle>Smartfin Upload Complete</AlertTitle>
          <AlertDescription>
            All leads were successfully uploaded to Smartfin.
          </AlertDescription>
        </Alert>
      );
    }
    
    if (smartfinUploadStatus === "partial") {
      return (
        <Alert className="mb-4 bg-yellow-50 dark:bg-yellow-900/10 text-yellow-800 dark:text-yellow-400 border-yellow-200 dark:border-yellow-800/30">
          <AlertCircle className="h-4 w-4 mr-2" />
          <AlertTitle>Partial Smartfin Upload</AlertTitle>
          <AlertDescription>
            Some leads were successfully uploaded to Smartfin, but others failed. Please review the results.
          </AlertDescription>
        </Alert>
      );
    }
    
    if (smartfinUploadStatus === "failed") {
      return (
        <Alert className="mb-4 bg-red-50 dark:bg-red-900/10 text-red-800 dark:text-red-400 border-red-200 dark:border-red-800/30">
          <XCircle className="h-4 w-4 mr-2" />
          <AlertTitle>Smartfin Upload Failed</AlertTitle>
          <AlertDescription>
            Failed to upload leads to Smartfin. Please review the errors and try again.
          </AlertDescription>
        </Alert>
      );
    }
    
    return null;
  };

  const renderUploadAlert = () => {
    switch (uploadStatus) {
      case "processing":
        return (
          <Alert className="mb-4">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Processing</AlertTitle>
            <AlertDescription>Your file is being processed. Please wait...</AlertDescription>
          </Alert>
        )
      case "success":
        return (
          <Alert className="mb-4 bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-900/30">
            <CheckCircle className="h-4 w-4 text-green-600 dark:text-green-400" />
            <AlertTitle className="text-green-800 dark:text-green-300">Success</AlertTitle>
            <AlertDescription className="text-green-700 dark:text-green-400">
              All {uploadResult?.total} leads were successfully uploaded.
            </AlertDescription>
          </Alert>
        )
      case "failed":
        return (
          <Alert variant="destructive" className="mb-4">
            <XCircle className="h-4 w-4" />
            <AlertTitle>Failed</AlertTitle>
            <AlertDescription>
              None of the leads could be uploaded. Please check the errors and try again.
            </AlertDescription>
          </Alert>
        )
      case "partial":
        return (
          <Alert className="mb-4 bg-amber-50 dark:bg-amber-900/20 border-amber-200 dark:border-amber-900/30">
            <AlertCircle className="h-4 w-4 text-amber-600 dark:text-amber-400" />
            <AlertTitle className="text-amber-800 dark:text-amber-300">Partial Success</AlertTitle>
            <AlertDescription className="text-amber-700 dark:text-amber-400">
              {uploadResult?.success} out of {uploadResult?.total} leads were uploaded successfully. 
              {uploadResult?.failed} leads failed - please check the errors below.
            </AlertDescription>
          </Alert>
        )
      default:
        return null
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">New Leads</h1>
      </div>

      <Tabs defaultValue="bulkUpload" className="w-full">
       
        
        <TabsContent value="bulkUpload">
          <Card>
            <CardHeader>
              <CardTitle>Bulk Upload Leads</CardTitle>
              <CardDescription>
                Upload multiple leads at once using an Excel file. Download the template to ensure your data is formatted correctly.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="mb-6">
                <Button variant="outline" onClick={handleDownloadTemplate} className="gap-2">
                  <Download className="h-4 w-4" />
                  Download Template
                </Button>
              </div>

              <div className="space-y-4">
                {/* Anchor dropdown */}
                <div>
                  <Label htmlFor="anchor">Anchor</Label>
                  <Select 
                    value={selectedAnchor} 
                    onValueChange={setSelectedAnchor}
                  >
                    <SelectTrigger id="anchor" className="w-full">
                      <SelectValue placeholder="Select Anchor" />
                    </SelectTrigger>
                    <SelectContent>
                      {anchorNamesList.map((anchor, index) => (
                        <SelectItem key={index} value={anchor}>
                          {anchor}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Program dropdown */}
                <div>
                  <Label htmlFor="program">Program</Label>
                  <Select 
                    value={selectedProgram} 
                    onValueChange={setSelectedProgram}
                  >
                    <SelectTrigger id="program" className="w-full">
                      <SelectValue placeholder="Select Program" />
                    </SelectTrigger>
                    <SelectContent>
                      {programNamesList.map((program, index) => (
                        <SelectItem key={index} value={program}>
                          {program}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="fileUpload">Upload Excel File</Label>
                  <Input
                    id="fileUpload"
                    type="file"
                    accept=".xlsx,.xls"
                    onChange={handleFileChange}
                    className="mt-1"
                  />
                  <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                    Supported formats: .xlsx, .xls
                  </p>
                  
                  {fileValidationMessage && (
                    <div className={`mt-2 text-sm p-2 rounded ${isFileValid ? 'bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-300' : 'bg-red-50 text-red-700 dark:bg-red-900/20 dark:text-red-300'}`}>
                      {fileValidationMessage}
                    </div>
                  )}
                </div>

                {renderUploadAlert()}
                {renderSmartfinUploadAlert()}

                {uploadResult && (
                  <div className="mt-6">
                    <h3 className="text-lg font-medium mb-2">Upload Results</h3>
                    <div className="flex gap-4 mb-4">
                      <div className="flex-1 bg-green-50 dark:bg-green-900/20 p-4 rounded-md">
                        <p className="text-sm text-green-800 dark:text-green-300">Success</p>
                        <p className="text-2xl font-bold text-green-800 dark:text-green-300">
                          {uploadResult.success}
                        </p>
                      </div>
                      <div className="flex-1 bg-red-50 dark:bg-red-900/20 p-4 rounded-md">
                        <p className="text-sm text-red-800 dark:text-red-300">Failed</p>
                        <p className="text-2xl font-bold text-red-800 dark:text-red-300">
                          {uploadResult.failed}
                        </p>
                      </div>
                      <div className="flex-1 bg-gray-50 dark:bg-gray-900/20 p-4 rounded-md">
                        <p className="text-sm text-gray-800 dark:text-gray-300">Total</p>
                        <p className="text-2xl font-bold text-gray-800 dark:text-gray-300">
                          {uploadResult.total}
                        </p>
                      </div>
                    </div>

                    {/* Add Smartfin Upload Button */}
                    {showSmartfinUploadButton && smartfinUploadStatus === "idle" && (
                      <div className="flex justify-center mb-4">
                        <Button 
                          onClick={handleSmartfinUpload}
                          className="bg-amber-500 hover:bg-amber-600 text-white"
                        >
                          <Upload className="mr-2 h-4 w-4" />
                          Upload in Smartfin
                        </Button>
                      </div>
                    )}

                    {/* Show Smartfin Results if available */}
                    {smartfinUploadResult && (
                      <div className="mt-6 mb-4">
                        <h3 className="text-lg font-medium mb-2">Smartfin Upload Results</h3>
                        <div className="flex gap-4 mb-4">
                          <div className="flex-1 bg-green-50 dark:bg-green-900/20 p-4 rounded-md">
                            <p className="text-sm text-green-800 dark:text-green-300">Success</p>
                            <p className="text-2xl font-bold text-green-800 dark:text-green-300">
                              {smartfinUploadResult.success}
                            </p>
                          </div>
                          <div className="flex-1 bg-red-50 dark:bg-red-900/20 p-4 rounded-md">
                            <p className="text-sm text-red-800 dark:text-red-300">Failed</p>
                            <p className="text-2xl font-bold text-red-800 dark:text-red-300">
                              {smartfinUploadResult.failed}
                            </p>
                          </div>
                          <div className="flex-1 bg-gray-50 dark:bg-gray-900/20 p-4 rounded-md">
                            <p className="text-sm text-gray-800 dark:text-gray-300">Total</p>
                            <p className="text-2xl font-bold text-gray-800 dark:text-gray-300">
                              {smartfinUploadResult.total}
                            </p>
                          </div>
                        </div>
                      </div>
                    )}

                    <div className="overflow-x-auto mb-4">
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Row</TableHead>
                            <TableHead>Dealer ID</TableHead>
                            <TableHead>Anchor ID</TableHead>
                            <TableHead>RM Name</TableHead>
                            <TableHead>Status</TableHead>
                            <TableHead>Error</TableHead>
                            {/* Add Smartfin columns if Smartfin upload has been attempted */}
                            {smartfinUploadResult && (
                              <>
                                <TableHead>Smartfin Status</TableHead>
                                <TableHead>Smartfin ID</TableHead>
                                <TableHead>Smartfin Error</TableHead>
                              </>
                            )}
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {uploadResult.rows.map((row) => (
                            <TableRow key={row.rowNumber}>
                              <TableCell>{row.rowNumber}</TableCell>
                              <TableCell>{row.dealerId}</TableCell>
                              <TableCell>{row.anchorId}</TableCell>
                              <TableCell>{row.rmName}</TableCell>
                              <TableCell>
                                <span
                                  className={cn(
                                    "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium",
                                    {
                                      "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300":
                                        row.status === "success",
                                      "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300":
                                        row.status === "failed",
                                      "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300":
                                        row.status === "warning",
                                    }
                                  )}
                                >
                                  {row.status === "success" && <CheckCircle className="mr-1 h-3 w-3" />}
                                  {row.status === "failed" && <XCircle className="mr-1 h-3 w-3" />}
                                  {row.status === "warning" && <AlertCircle className="mr-1 h-3 w-3" />}
                                  {row.status.charAt(0).toUpperCase() + row.status.slice(1)}
                                </span>
                              </TableCell>
                              <TableCell>{row.error || "-"}</TableCell>
                              {/* Add Smartfin columns if Smartfin upload has been attempted */}
                              {smartfinUploadResult && (
                                <>
                                  <TableCell>
                                    {row.smartfinStatus ? (
                                      <span
                                        className={cn(
                                          "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium",
                                          {
                                            "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300":
                                              row.smartfinStatus === "success",
                                            "bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-300":
                                              row.smartfinStatus === "pending",
                                            "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300":
                                              row.smartfinStatus === "failed",
                                          }
                                        )}
                                      >
                                        {row.smartfinStatus === "success" && <CheckCircle className="mr-1 h-3 w-3" />}
                                        {row.smartfinStatus === "failed" && <XCircle className="mr-1 h-3 w-3" />}
                                        {row.smartfinStatus === "pending" && <AlertCircle className="mr-1 h-3 w-3" />}
                                        {row.smartfinStatus.charAt(0).toUpperCase() + row.smartfinStatus.slice(1)}
                                      </span>
                                    ) : "-"}
                                  </TableCell>
                                  <TableCell>{row.smartfinDealerId || "-"}</TableCell>
                                  <TableCell>{row.smartfinError || "-"}</TableCell>
                                </>
                              )}
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    </div>

                    <div className="flex justify-end">
                      <Button variant="outline" onClick={handleDownloadResults} className="gap-2">
                        <Download className="h-4 w-4" />
                        Download Results
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
            {/* Upload Summary Section */}
            <CardContent>
              <h3 className="text-lg font-medium mb-4">Upload Summary</h3>
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Uploaded File</TableHead>
                      <TableHead>Uploaded Date</TableHead>
                      <TableHead>Uploaded By</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Response</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {uploadHistory.length > 0 ? (
                      uploadHistory.map((row, index) => (
                      <TableRow key={index}>
                          <TableCell>{row.fileName}</TableCell>
                          <TableCell>{row.uploadDate}</TableCell>
                          <TableCell>{row.uploadedBy}</TableCell>
                        <TableCell>
                          <span
                            className={cn(
                              "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium",
                              {
                                "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300":
                                    row.status === "Success",
                                "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300":
                                    row.status === "Failure",
                                }
                              )}
                            >
                              {row.status === "Success" && <CheckCircle className="mr-1 h-3 w-3" />}
                              {row.status === "Failure" && <XCircle className="mr-1 h-3 w-3" />}
                              {row.status}
                          </span>
                          </TableCell>
                          <TableCell>
                            <Button variant="link" className="p-0 h-auto text-blue-500 hover:text-blue-700">
                              <FileText className="h-4 w-4 mr-1" />
                              {row.responseFile}
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={5} className="text-center py-4 text-gray-500">
                          No upload history available
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
            <CardFooter className="flex flex-col sm:flex-row gap-2">
              <Button onClick={handleUpload} disabled={!selectedFile || !isFileValid || uploadStatus === "processing" || !selectedAnchor || !selectedProgram}>
                {uploadStatus === "processing" ? (
                  <>
                    <span className="animate-spin mr-2">⟳</span>
                    Processing...
                  </>
                ) : (
                  "Upload"
                )}
              </Button>
              
              {uploadResult && (
                <Button variant="outline" onClick={handleDownloadResults}>
                  <Download className="mr-2 h-4 w-4" />
                  Download Results
                </Button>
              )}
              
              {smartfinUploadResult && (
                <Button variant="outline" onClick={handleDownloadSmartfinResults}>
                  <Download className="mr-2 h-4 w-4" />
                  Download Smartfin Results
                </Button>
              )}
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
</file>

<file path="lib/db.ts">
// lib/db.ts
// MasterService: IndexedDB (Dexie.js) for Master Data Management
// Implements CRUD, Excel upload/download, and search for all master stores.
// Dependencies: dexie, xlsx, file-saver

import Dexie, { Table } from 'dexie';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
import { LEAD_TEMPLATE_HEADERS, SMARTFIN_UPDATE_TEMPLATE_HEADERS, EMAIL_TEMPLATE_MASTER_HEADERS } from './constants';
import { mapAnchorUIToDB, mapHierarchyUIToDB, mapHolidayUIToDB, mapPincodeBranchUIToDB, mapRMBranchUIToDB, mapErrorCodeUIToDB, mapSmartfinStatusUpdateUIToDB, mapEmailTemplateUIToDB } from './dbUtils';

// --- TypeScript interfaces for master data stores ---
export interface AnchorMaster {
  id: string;
  anchorname: string;
  programname: string;
  anchoruuid: string;
  programuuid: string;
  segment: string;
  PSMName: string;
  PSMADID: string;
  PSMEmail: string;
  UDF1: string;
  UDF2: string;
}

export interface HierarchyMaster {
  id: string;
  OldNo?: string;
  EmpNo: string;
  EmpADID: string;
  FullName: string;
  Gender?: string;
  EmpStatus?: string;
  FunctionalDesignation?: string;
  Cat?: string;
  Role?: string;
  Team?: string;
  CBLCode?: string;
  CBLCodeADID?: string;
  CBLName?: string;
  Cluster?: string;
  RBLCode?: string;
  RBLADIDCode?: string;
  RBLName?: string;
  Region?: string;
  ZHCode?: string;
  ZHADID?: string;
  ZHName?: string;
  Zone?: string;
  Vertical?: string;
  BranchCode?: string;
  OfficeLocationCode?: string;
  Location?: string;
  City?: string;
  State?: string;
  DateOfJoining?: string;
  YesEmail?: string;
  Mobile?: string;
  ExitMonthResignDate?: string;
  Remarks?: string;
  Segment?: string;
  
  // Legacy fields for backwards compatibility
  employeeName?: string;
  empAdid?: string;
  fullName?: string;
  rblAdid?: string;
  rblName?: string;
  region?: string;
  zhAdid?: string;
  zhName?: string;
  yesEmail?: string;
  mobile?: string;
}

export interface HolidayMaster {
  id: string;
  date: string;
  Date: string; // For backward compatibility
  name: string;
  type: string;
  HolidayType: string; // For backward compatibility
  description: string;
}

export interface PincodeBranch {
  id: string;
  Pincode: string;
  BranchCode: string;
  BranchName: string;
  Cluster: string;
  Region: string;
  
  // Legacy fields for backwards compatibility
  pincode?: string;
  branchCode?: string;
  branchName?: string;
  city?: string;
  state?: string;
  region?: string;
  active?: boolean;
}

export interface RMBranch {
  id: string;
  rmId: string;
  rmName: string;
  branchCode: string;
  branchName: string;
  region: string;
  role: string;
  active: boolean;
}

export interface ErrorCodeMaster {
  id: string; // Typically same as errorCode
  errorCode: string; // PK for querying
  description: string;
  module: string; // e.g., 'Lead Upload', 'RM Assignment'
  severity: 'Error' | 'Warning' | 'Info';
}

export interface ProcessedLead {
  id: string; // Primary Key, e.g., `${uploadBatchId}-${originalRowNumber}`
  uploadBatchId: string; // To group leads from the same file
  processedTimestamp: string; // ISO string
  anchorNameSelected: string; // Anchor selected in UI
  programNameSelected: string; // Program selected in UI
  originalRowNumber: number;
  originalData: Record<string, any>; // All columns from uploaded Excel row
  assignedRmAdid: string | null;
  assignmentStatus: string;
  errorCode: string | null;
  errorDescription: string | null;
  smartfinUploadStatus?: 'pending' | 'success' | 'failed' | null;
  smartfinDealerId?: string | null;
  smartfinErrorCode?: string | null;
  smartfinErrorDescription?: string | null;
}

// Define the updated LeadCommunication interface separately to avoid type conflicts
export interface UpdatedLeadCommunication {
  id: string; // UUID for the communication
  processedLeadId: string; // Processed lead ID this communication is related to
  timestamp: string; // ISO date string
  communicationType: 
    'LeadAssignmentEmail' | 
    'RMReply' | 
    'SystemFollowUpEmail' | 
    'SystemReminderEmail' | 
    'PSMDecision_ReassignToRM' | 
    'PSMDecision_DropLead' | 
    'StageUpdate' | 
    'AISystemAssessment' | 
    'NoteAdded';
  title: string; // e.g., "Lead Uploaded Email", "RM Response"
  description: string; // Main body/details of the history item
  senderType: 'System' | 'RM' | 'PSM' | 'User';
  senderAdidOrEmail: string; // ADID for internal users, email for system/external
  recipientAdidOrEmail: string; // ADID or email of the primary recipient
  ccEmails?: string[]; // Array of emails for CC, if applicable
  aiSummary?: string; // AI-generated summary of RM replies or other content
  aiDecision?: string; // AI's suggested next step or assessment outcome
  aiTokensConsumed?: number; // Number of tokens consumed for this AI operation
  attachments?: { name: string; size: string; url?: string; type: string }[]; // Array of attachment objects
  relatedWorkflowStateId?: string; // Optional FK to LeadWorkflowState.id
}

// Keep the original LeadCommunication interface for backward compatibility
export interface LeadCommunication {
  id: string; // UUID for the communication
  leadId: string; // Processed lead ID this communication is related to
  rmEmail: string; // Email of the RM this communication is for/from
  messageType: 'assignment' | 'reply'; // Type of communication
  content: string; // Content of the message
  timestamp: string; // ISO date string
  sender: 'system' | 'rm'; // Who sent the message
  recipient: 'rm' | 'system'; // Who the message is for
  processedLeadId?: string; // Added for compatibility with new schema
  communicationType?: string; // Added for compatibility with new schema
  title?: string; // Added for compatibility with new schema
  description?: string; // Added for compatibility with new schema
  senderType?: string; // Added for compatibility with new schema
  senderAdidOrEmail?: string; // Added for compatibility with new schema
  recipientAdidOrEmail?: string; // Added for compatibility with new schema
  ccEmails?: string[]; // Added for compatibility with new schema
  aiSummary?: string; // Added for compatibility with new schema
  aiDecision?: string; // Added for compatibility with new schema
  aiTokensConsumed?: number; // Added for compatibility with new schema
  attachments?: { name: string; size: string; url?: string; type: string }[]; // Added for compatibility with new schema
  relatedWorkflowStateId?: string; // Added for compatibility with new schema
}

export interface LeadWorkflowState {
  id: string; // UUID PK
  processedLeadId: string; // FK to ProcessedLead
  currentStage: string; // e.g., 'RM_AwaitingReply', 'PSM_ReviewPending', 'Dropped'
  currentAssigneeType: 'RM' | 'PSM' | 'System';
  currentAssigneeAdid: string;
  psmAdid: string; // PSM for the anchor
  lastStageChangeTimestamp: string; // ISO string
  lastCommunicationTimestamp: string; // ISO string
  nextFollowUpTimestamp: string; // ISO string
  escalationLevel: number;
  droppedReason: string | null;
  updatedAt: string; // ISO string
  createdAt: string; // ISO string
}

export interface SmartfinStatusUpdate {
  applicationNo: string; // Primary Key
  createdDate: string;
  firmName: string;
  applicationType: string;
  status: string;
  branch: string;
  requestedAmount: string;
  sanctionedAmount: string;
  sanctionDate: string;
  programMappedDate: string;
  rmName: string;
  rmTAT: string;
  cpaName: string;
  cpaTAT: string;
  cmName: string;
  cmTAT: string;
  approvalRequestedDate: string;
  approvalTAT: string;
  totalTAT: string;
  uploadTimestamp?: string; // When the record was uploaded
}

export interface EmailTemplateMaster {
  id: string; // Primary Key, e.g., UUID
  templateName: string; // e.g., "Lead Assignment Email"
  description?: string; // Brief explanation of the template's purpose
  subject: string; // Email subject line
  body: string; // Email content, can be plain text or HTML
  toRecipients: string[]; // Array of roles/placeholders, e.g., ["RM"], ["{{Lead.RMEmail}}"]
  ccRecipients: string[]; // Array of roles/placeholders, e.g., ["CBL", "RBL"]
  category?: string; // e.g., "Assignment", "Escalation", "Notification"
  isActive: boolean; // Default to true
  createdAt: string; // ISO string, for tracking when it was added
  updatedAt: string; // ISO string, for tracking updates
}

type StoreName = 
  'anchor_master' | 
  'hierarchy_master' | 
  'holiday_master' | 
  'pincode_branch' | 
  'rm_branch' | 
  'error_codes' | 
  'processed_leads' | 
  'lead_communications' |
  'lead_workflow_states' |
  'smartfin_status_updates' |
  'email_template_master';

type StoreTableMap = {
  anchor_master: AnchorMaster;
  hierarchy_master: HierarchyMaster;
  holiday_master: HolidayMaster;
  pincode_branch: PincodeBranch;
  rm_branch: RMBranch;
  error_codes: ErrorCodeMaster;
  processed_leads: ProcessedLead;
  lead_communications: LeadCommunication;
  lead_workflow_states: LeadWorkflowState;
  smartfin_status_updates: SmartfinStatusUpdate;
  email_template_master: EmailTemplateMaster;
};

// --- Dexie Database Setup ---
export class SCFLeadManagementDB extends Dexie {
  anchor_master!: Table<AnchorMaster, string>;
  hierarchy_master!: Table<HierarchyMaster, string>;
  holiday_master!: Table<HolidayMaster, string>;
  pincode_branch!: Table<PincodeBranch, string>;
  rm_branch!: Table<RMBranch, string>;
  error_codes!: Table<ErrorCodeMaster, string>;
  processed_leads!: Table<ProcessedLead, string>;
  lead_communications!: Table<LeadCommunication, string>;
  lead_workflow_states!: Table<LeadWorkflowState, string>;
  smartfin_status_updates!: Table<SmartfinStatusUpdate, string>;
  email_template_master!: Table<EmailTemplateMaster, string>;

  constructor() {
    super('SCFLeadManagement');
    
    // Version 1 schema
    this.version(1).stores({
      anchor_master: 'id, anchorname, programname',
      hierarchy_master: 'id, employeeName',
      holiday_master: 'id, Date, HolidayType',
      pincode_branch: 'id, pincode, branchCode, branchName, city, state',
      rm_branch: 'id, rmId, rmName, branchCode, region',
    });
    
    // Version 2 adds error_codes, processed_leads, lead_communications, lead_workflow_states
    // and updates processed_leads with the smartfin fields
    this.version(2).stores({
      anchor_master: 'id, anchorname, programname',
      hierarchy_master: 'id, employeeName',
      holiday_master: 'id, Date, HolidayType',
      pincode_branch: 'id, pincode, branchCode, branchName, city, state',
      rm_branch: 'id, rmId, rmName, branchCode, region',
      error_codes: 'id, errorCode, module',
      processed_leads: 'id, uploadBatchId, assignedRmAdid, assignmentStatus, smartfinUploadStatus',
      lead_communications: 'id, processedLeadId, communicationType, timestamp',
      lead_workflow_states: 'id, processedLeadId, currentStage, currentAssigneeAdid, psmAdid'
    });

    // Version 3: Add error_codes and processed_leads tables
    this.version(3).stores({
      error_codes: '++id, errorCode, module, severity',
      processed_leads: 'id, uploadBatchId, processedTimestamp, anchorNameSelected, programNameSelected, assignedRmAdid, assignmentStatus, errorCode'
    });

    // Version 4: Add lead_communications table
    this.version(4).stores({
      lead_communications: 'id, leadId, rmEmail, messageType, timestamp, sender, recipient',
      // Carry forward all table definitions from previous versions
      anchor_master: 'id, anchorname, programname, anchoruuid, programuuid, segment, PSMName, PSMADID',
      hierarchy_master: 'id, employeeName, empAdid, fullName, rblAdid, rblName, region, zhAdid, zhName',
      holiday_master: 'id, Date, HolidayType, date, name, type, description',
      pincode_branch: 'id, pincode, branchCode, branchName, city, state, region, active',
      rm_branch: 'id, rmId, rmName, branchCode, branchName, region, role, active',
      error_codes: '++id, errorCode, module, severity',
      processed_leads: 'id, uploadBatchId, processedTimestamp, anchorNameSelected, programNameSelected, assignedRmAdid, assignmentStatus, errorCode'
    });
    
    // Version 5: Add lead_workflow_states and update lead_communications tables
    this.version(5).stores({
      lead_workflow_states: 'id, processedLeadId, currentStage, currentAssigneeAdid, currentAssigneeType, nextFollowUpTimestamp, updatedAt',
      lead_communications: 'id, processedLeadId, timestamp, communicationType, senderType, senderAdidOrEmail',
      // Carry forward all table definitions from previous versions
      anchor_master: 'id, anchorname, programname, anchoruuid, programuuid, segment, PSMName, PSMADID',
      hierarchy_master: 'id, employeeName, empAdid, fullName, rblAdid, rblName, region, zhAdid, zhName',
      holiday_master: 'id, Date, HolidayType, date, name, type, description',
      pincode_branch: 'id, pincode, branchCode, branchName, city, state, region, active',
      rm_branch: 'id, rmId, rmName, branchCode, branchName, region, role, active',
      error_codes: '++id, errorCode, module, severity',
      processed_leads: 'id, uploadBatchId, processedTimestamp, anchorNameSelected, programNameSelected, assignedRmAdid, assignmentStatus, errorCode'
    });

    // Version 6: Add ai_prompts_master table and update lead_communications table
    this.version(6).stores({
      ai_prompts_master: 'id, name, category, prompt, systemPrompt, modelType',
      lead_communications: 'id, processedLeadId, timestamp, communicationType, senderType, senderAdidOrEmail, aiTokensConsumed',
      // Carry forward all table definitions from previous versions
      lead_workflow_states: 'id, processedLeadId, currentStage, currentAssigneeAdid, currentAssigneeType, nextFollowUpTimestamp, updatedAt',
      anchor_master: 'id, anchorname, programname, anchoruuid, programuuid, segment, PSMName, PSMADID',
      hierarchy_master: 'id, employeeName, empAdid, fullName, rblAdid, rblName, region, zhAdid, zhName',
      holiday_master: 'id, Date, HolidayType, date, name, type, description',
      pincode_branch: 'id, pincode, branchCode, branchName, city, state, region, active',
      rm_branch: 'id, rmId, rmName, branchCode, branchName, region, role, active',
      error_codes: '++id, errorCode, module, severity',
      processed_leads: 'id, uploadBatchId, processedTimestamp, anchorNameSelected, programNameSelected, assignedRmAdid, assignmentStatus, errorCode'
    });
    
    // Version 7: Update lead_workflow_states to include psmAdid in the index
    this.version(7).stores({
      lead_workflow_states: 'id, processedLeadId, currentStage, currentAssigneeAdid, psmAdid, currentAssigneeType, nextFollowUpTimestamp, updatedAt',
      ai_prompts_master: 'id, name, category, prompt, systemPrompt, modelType',
      lead_communications: 'id, processedLeadId, timestamp, communicationType, senderType, senderAdidOrEmail, aiTokensConsumed',
      anchor_master: 'id, anchorname, programname, anchoruuid, programuuid, segment, PSMName, PSMADID',
      hierarchy_master: 'id, employeeName, empAdid, fullName, rblAdid, rblName, region, zhAdid, zhName',
      holiday_master: 'id, Date, HolidayType, date, name, type, description',
      pincode_branch: 'id, pincode, branchCode, branchName, city, state, region, active',
      rm_branch: 'id, rmId, rmName, branchCode, branchName, region, role, active',
      error_codes: '++id, errorCode, module, severity',
      processed_leads: 'id, uploadBatchId, processedTimestamp, anchorNameSelected, programNameSelected, assignedRmAdid, assignmentStatus, errorCode'
    });

    // Version 8: Update PincodeBranch and HierarchyMaster schemas with new fields
    this.version(8).stores({
      pincode_branch: 'id, Pincode, BranchCode, BranchName, Cluster, Region',
      hierarchy_master: 'id, EmpADID, FullName, Role, Team, Region, Zone',
      
      // Carry forward all other table definitions
      lead_workflow_states: 'id, processedLeadId, currentStage, currentAssigneeAdid, psmAdid, currentAssigneeType, nextFollowUpTimestamp, updatedAt',
      ai_prompts_master: 'id, name, category, prompt, systemPrompt, modelType',
      lead_communications: 'id, processedLeadId, timestamp, communicationType, senderType, senderAdidOrEmail, aiTokensConsumed',
      anchor_master: 'id, anchorname, programname, anchoruuid, programuuid, segment, PSMName, PSMADID',
      holiday_master: 'id, Date, HolidayType, date, name, type, description',
      rm_branch: 'id, rmId, rmName, branchCode, branchName, region, role, active',
      error_codes: '++id, errorCode, module, severity',
      processed_leads: 'id, uploadBatchId, processedTimestamp, anchorNameSelected, programNameSelected, assignedRmAdid, assignmentStatus, errorCode'
    });

    // Version 8: Add upgrade function to migrate old data
    this.version(8).upgrade(async tx => {
      console.log('Running database upgrade to version 8...');
      
      // Migrate PincodeBranch records
      try {
        const pincodeBranches = await tx.table('pincode_branch').toArray();
        console.log(`Migrating ${pincodeBranches.length} pincode branch records...`);
        
        for (const pb of pincodeBranches) {
          const updates: Partial<PincodeBranch> = {};
          
          // Map old fields to new fields if new fields don't exist
          if (pb.pincode && !pb.Pincode) updates.Pincode = pb.pincode;
          if (pb.branchCode && !pb.BranchCode) updates.BranchCode = pb.branchCode;
          if (pb.branchName && !pb.BranchName) updates.BranchName = pb.branchName;
          if (pb.region && !pb.Region) updates.Region = pb.region;
          
          // Set Cluster if it doesn't exist
          if (!pb.Cluster) updates.Cluster = pb.region || 'Default'; // Use region as default cluster if available
          
          // Only update if we have changes
          if (Object.keys(updates).length > 0) {
            await tx.table('pincode_branch').update(pb.id, updates);
          }
        }
        
        console.log('Pincode branch migration completed');
      } catch (error) {
        console.error('Error migrating pincode branches:', error);
      }
      
      // Migrate HierarchyMaster records
      try {
        const hierarchyRecords = await tx.table('hierarchy_master').toArray();
        console.log(`Migrating ${hierarchyRecords.length} hierarchy records...`);
        
        for (const hr of hierarchyRecords) {
          const updates: Partial<HierarchyMaster> = {};
          
          // Map old fields to new fields if new fields don't exist
          if (hr.empAdid && !hr.EmpADID) updates.EmpADID = hr.empAdid;
          if ((hr.fullName || hr.employeeName) && !hr.FullName) {
            updates.FullName = hr.fullName || hr.employeeName || '';
          }
          if (hr.rblAdid && !hr.RBLADIDCode) updates.RBLADIDCode = hr.rblAdid;
          if (hr.rblName && !hr.RBLName) updates.RBLName = hr.rblName;
          if (hr.region && !hr.Region) updates.Region = hr.region;
          if (hr.zhAdid && !hr.ZHADID) updates.ZHADID = hr.zhAdid;
          if (hr.zhName && !hr.ZHName) updates.ZHName = hr.zhName;
          if (hr.yesEmail && !hr.YesEmail) updates.YesEmail = hr.yesEmail;
          if (hr.mobile && !hr.Mobile) updates.Mobile = hr.mobile;
          
          // Initialize required new fields with empty values if they don't exist
          if (!hr.EmpNo) updates.EmpNo = hr.empAdid || '';
          
          // Only update if we have changes
          if (Object.keys(updates).length > 0) {
            await tx.table('hierarchy_master').update(hr.id, updates);
          }
        }
        
        console.log('Hierarchy master migration completed');
      } catch (error) {
        console.error('Error migrating hierarchy records:', error);
      }
    });

    // Version 9: Add Smartfin fields to processed_leads
    this.version(9).stores({
      // Keep the same schema and add smartfinUploadStatus index
      processed_leads: 'id, uploadBatchId, processedTimestamp, anchorNameSelected, programNameSelected, assignedRmAdid, assignmentStatus, errorCode, smartfinUploadStatus',
      
      // Carry forward all other table definitions
      pincode_branch: 'id, Pincode, BranchCode, BranchName, Cluster, Region',
      hierarchy_master: 'id, EmpADID, FullName, Role, Team, Region, Zone',
      lead_workflow_states: 'id, processedLeadId, currentStage, currentAssigneeAdid, psmAdid, currentAssigneeType, nextFollowUpTimestamp, updatedAt',
      ai_prompts_master: 'id, name, category, prompt, systemPrompt, modelType',
      lead_communications: 'id, processedLeadId, timestamp, communicationType, senderType, senderAdidOrEmail, aiTokensConsumed',
      anchor_master: 'id, anchorname, programname, anchoruuid, programuuid, segment, PSMName, PSMADID',
      holiday_master: 'id, Date, HolidayType, date, name, type, description',
      rm_branch: 'id, rmId, rmName, branchCode, branchName, region, role, active',
      error_codes: '++id, errorCode, module, severity'
    });

    // Version 10: Add missing indexes for backward compatibility
    this.version(10).stores({
      // Add indexes for backward compatibility fields
      hierarchy_master: 'id, EmpADID, empAdid, FullName, fullName, employeeName, Role, Team, Region, region, Zone, RBLADIDCode, rblAdid, ZHADID, zhAdid, YesEmail, yesEmail',
      
      // Carry forward all other table definitions
      processed_leads: 'id, uploadBatchId, processedTimestamp, anchorNameSelected, programNameSelected, assignedRmAdid, assignmentStatus, errorCode, smartfinUploadStatus',
      pincode_branch: 'id, Pincode, BranchCode, BranchName, Cluster, Region',
      lead_workflow_states: 'id, processedLeadId, currentStage, currentAssigneeAdid, psmAdid, currentAssigneeType, nextFollowUpTimestamp, updatedAt',
      ai_prompts_master: 'id, name, category, prompt, systemPrompt, modelType',
      lead_communications: 'id, processedLeadId, timestamp, communicationType, senderType, senderAdidOrEmail, aiTokensConsumed',
      anchor_master: 'id, anchorname, programname, anchoruuid, programuuid, segment, PSMName, PSMADID',
      holiday_master: 'id, Date, HolidayType, date, name, type, description',
      rm_branch: 'id, rmId, rmName, branchCode, branchName, region, role, active',
      error_codes: '++id, errorCode, module, severity'
    });
    
    // Version 10: Add upgrade function to migrate any needed field mappings
    this.version(10).upgrade(async tx => {
      console.log('Running database upgrade to version 10...');
      
      // Migrate HierarchyMaster records to ensure compatibility fields are filled
      try {
        const hierarchyRecords = await tx.table('hierarchy_master').toArray();
        console.log(`Ensuring compatibility fields for ${hierarchyRecords.length} hierarchy records...`);
        
        for (const hr of hierarchyRecords) {
          const updates: Partial<HierarchyMaster> = {};
          
          // Map new fields to old fields for compatibility
          if (hr.EmpADID && !hr.empAdid) updates.empAdid = hr.EmpADID;
          if (hr.FullName && !hr.fullName) updates.fullName = hr.FullName;
          if (hr.FullName && !hr.employeeName) updates.employeeName = hr.FullName;
          if (hr.RBLADIDCode && !hr.rblAdid) updates.rblAdid = hr.RBLADIDCode;
          if (hr.RBLName && !hr.rblName) updates.rblName = hr.RBLName;
          if (hr.Region && !hr.region) updates.region = hr.Region;
          if (hr.ZHADID && !hr.zhAdid) updates.zhAdid = hr.ZHADID;
          if (hr.ZHName && !hr.zhName) updates.zhName = hr.ZHName;
          if (hr.YesEmail && !hr.yesEmail) updates.yesEmail = hr.YesEmail;
          if (hr.Mobile && !hr.mobile) updates.mobile = hr.Mobile;
          
          // Map old fields to new fields if new fields don't exist
          if (hr.empAdid && !hr.EmpADID) updates.EmpADID = hr.empAdid;
          if ((hr.fullName || hr.employeeName) && !hr.FullName) {
            updates.FullName = hr.fullName || hr.employeeName || '';
          }
          if (hr.rblAdid && !hr.RBLADIDCode) updates.RBLADIDCode = hr.rblAdid;
          if (hr.rblName && !hr.RBLName) updates.RBLName = hr.rblName;
          if (hr.region && !hr.Region) updates.Region = hr.region;
          if (hr.zhAdid && !hr.ZHADID) updates.ZHADID = hr.zhAdid;
          if (hr.zhName && !hr.ZHName) updates.ZHName = hr.zhName;
          if (hr.yesEmail && !hr.YesEmail) updates.YesEmail = hr.yesEmail;
          if (hr.mobile && !hr.Mobile) updates.Mobile = hr.mobile;
          
          // Only update if we have changes
          if (Object.keys(updates).length > 0) {
            await tx.table('hierarchy_master').update(hr.id, updates);
          }
        }
        
        console.log('Hierarchy master compatibility fields updated');
      } catch (error) {
        console.error('Error updating hierarchy compatibility fields:', error);
      }
    });

    // Version 11: Add smartfin_status_updates table
    this.version(11).stores({
      // New table for Smartfin Status Updates
      smartfin_status_updates: '&applicationNo, createdDate, status, rmName, firmName',
      
      // Carry forward all other table definitions
      hierarchy_master: 'id, EmpADID, empAdid, FullName, fullName, employeeName, Role, Team, Region, region, Zone, RBLADIDCode, rblAdid, ZHADID, zhAdid, YesEmail, yesEmail',
      processed_leads: 'id, uploadBatchId, processedTimestamp, anchorNameSelected, programNameSelected, assignedRmAdid, assignmentStatus, errorCode, smartfinUploadStatus',
      pincode_branch: 'id, Pincode, BranchCode, BranchName, Cluster, Region',
      lead_workflow_states: 'id, processedLeadId, currentStage, currentAssigneeAdid, psmAdid, currentAssigneeType, nextFollowUpTimestamp, updatedAt',
      ai_prompts_master: 'id, name, category, prompt, systemPrompt, modelType',
      lead_communications: 'id, processedLeadId, timestamp, communicationType, senderType, senderAdidOrEmail, aiTokensConsumed',
      anchor_master: 'id, anchorname, programname, anchoruuid, programuuid, segment, PSMName, PSMADID',
      holiday_master: 'id, Date, HolidayType, date, name, type, description',
      rm_branch: 'id, rmId, rmName, branchCode, branchName, region, role, active',
      error_codes: '++id, errorCode, module, severity'
    });

    // Version 12: Add email_template_master table
    this.version(12).stores({
      // Define a completely new table with a clear primary key
      email_template_master: 'id, templateName, category, isActive',
      
      // Keep existing tables with their original primary keys - don't modify them
      anchor_master: 'id, anchorname, programname, segment',
      hierarchy_master: 'id, EmpADID, FullName, YesEmail, RBLADIDCode, RBLName, ZHADID, ZHName, CBLCodeADID',
      holiday_master: 'id, date, Date, type, HolidayType',
      pincode_branch: 'id, Pincode, BranchCode, BranchName, Region',
      rm_branch: 'id, rmId, rmName, branchCode, region, active',
      error_codes: 'id, errorCode, module, severity',
      processed_leads: 'id, uploadBatchId, processedTimestamp, anchorNameSelected, programNameSelected, assignedRmAdid, assignmentStatus',
      lead_communications: 'id, processedLeadId, timestamp, communicationType, senderType, senderAdidOrEmail, recipientAdidOrEmail, leadId, rmEmail, messageType',
      lead_workflow_states: 'id, processedLeadId, currentStage, currentAssigneeType, currentAssigneeAdid, psmAdid, updatedAt',
      smartfin_status_updates: 'applicationNo, firmName, status, rmName, createdDate',
    });
  }
}

// Add minimal logging to avoid TypeScript errors
const db = new SCFLeadManagementDB();

// Log database schema version on object initialization
console.log(`Database schema version defined: ${db.verno}`);

// --- Utility: Store fields for Excel templates/validation ---
const STORE_FIELDS: Record<StoreName, string[]> = {
  anchor_master: ['id', 'anchorname', 'programname', 'anchoruuid', 'programuuid', 'segment', 'PSMName', 'PSMADID', 'PSMEmail', 'UDF1', 'UDF2'],
  hierarchy_master: ['id', 'Old No', 'Emp No', 'Emp ADID', 'Full Name', 'Gender', 'Emp Status', 'Functional Designation', 'Cat', 'Role', 'Team', 'CBL Code', 'CBL Code ADID', 'CBL Name', 'Cluster', 'RBL Code', 'RBL ADID Code', 'RBL Name', 'Region', 'ZH Code', 'ZH ADID', 'ZH Name', 'Zone', 'Vertical', 'Branch Code', 'Office Location Code', 'Location', 'City', 'State', 'Date Of Joining', 'Yes Email', 'Mobile', 'Exit Month/Resign date', 'Remarks', 'Segment'],
  holiday_master: ['id', 'Date', 'HolidayType', 'date', 'name', 'type', 'description'],
  pincode_branch: ['id', 'Pincode', 'Branch Code', 'Branch Name', 'Cluster', 'Region'],
  rm_branch: ['id', 'rmId', 'rmName', 'branchCode', 'branchName', 'region', 'role', 'active'],
  error_codes: ['id', 'errorCode', 'description', 'module', 'severity'],
  processed_leads: [],  // No direct upload via master UI, populated programmatically
  lead_communications: ['id', 'leadId', 'rmEmail', 'messageType', 'content', 'timestamp', 'sender', 'recipient', 'processedLeadId', 'communicationType', 'title', 'description', 'senderType', 'senderAdidOrEmail', 'recipientAdidOrEmail', 'ccEmails', 'aiSummary', 'aiDecision', 'aiTokensConsumed', 'attachments', 'relatedWorkflowStateId'],
  lead_workflow_states: ['id', 'processedLeadId', 'currentStage', 'currentAssigneeType', 'currentAssigneeAdid', 'psmAdid', 'lastStageChangeTimestamp', 'lastCommunicationTimestamp', 'nextFollowUpTimestamp', 'escalationLevel', 'droppedReason', 'updatedAt', 'createdAt'],
  smartfin_status_updates: ['applicationNo', 'createdDate', 'firmName', 'applicationType', 'status', 'branch', 'requestedAmount', 'sanctionedAmount', 'sanctionDate', 'programMappedDate', 'rmName', 'rmTAT', 'cpaName', 'cpaTAT', 'cmName', 'cmTAT', 'approvalRequestedDate', 'approvalTAT', 'totalTAT', 'uploadTimestamp'],
  email_template_master: ['id', 'templateName', 'category', 'isActive', 'description', 'subject', 'body', 'toRecipients', 'ccRecipients', 'createdAt', 'updatedAt'],
};

// --- MasterService Class ---
export class MasterService {
  // Add a single record
  static async createRecord<T extends StoreName>(storeName: T, record: Partial<StoreTableMap[T]>) {
    try {
      await db[storeName].add(record as any);
      return { success: true };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }

  // Get total records count
  static async getTotalRecords<T extends StoreName>(storeName: T): Promise<{ success: boolean, count?: number, error?: string }> {
    try {
      const count = await db[storeName].count();
      return { success: true, count };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }

  // Get records with optional filters and sorting
  static async getRecords<T extends StoreName>(storeName: T, filters: Partial<StoreTableMap[T]> = {}, sortBy?: keyof StoreTableMap[T], limit = 20, offset = 0) {
    try {
      let collection = db[storeName].toCollection();
      for (const key in filters) {
        // @ts-ignore
        collection = collection.filter((item) => item[key] === filters[key]);
      }
      let results = await collection.toArray();
      if (sortBy) {
        results = results.sort((a: any, b: any) => (a[sortBy] > b[sortBy] ? 1 : -1));
      }
      return { success: true, data: results.slice(offset, offset + limit) };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }

  // Update a record by id
  static async updateRecord<T extends StoreName>(storeName: T, id: string, updates: Partial<StoreTableMap[T]>) {
    try {
      await db[storeName].update(id, updates);
      return { success: true };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }

  // Delete a record by id
  static async deleteRecord<T extends StoreName>(storeName: T, id: string) {
    try {
      await db[storeName].delete(id);
      return { success: true };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }

  // Search records by indexed field
  static async searchRecords<T extends StoreName>(storeName: T, field: keyof StoreTableMap[T], value: any, limit = 20, offset = 0) {
    try {
      // @ts-ignore
      let collection = db[storeName].where(field).equals(value);
      const results = await collection.offset(offset).limit(limit).toArray();
      return { success: true, data: results };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }

  // Upload Excel: Parse, validate, and store records
  static async uploadExcel<T extends StoreName>(storeName: T, file: File) {
    try {
      const arrayBuffer = await file.arrayBuffer();
      const workbook = XLSX.read(arrayBuffer, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const json: any[] = XLSX.utils.sheet_to_json(worksheet, { defval: '' });
      const expectedFields = STORE_FIELDS[storeName];
      const errors: string[] = [];
      
      // Process and map the data according to store type
      let processedData: any[] = [];
      
      if (storeName === 'smartfin_status_updates') {
        // Use the mapping function for Smartfin Status Updates
        processedData = json.map(row => mapSmartfinStatusUpdateUIToDB(row));
      } else {
        // For other stores, perform standard processing
        for (let i = 0; i < json.length; i++) {
          const row = json[i];
          // Validate required fields
          const missing = expectedFields.filter((f) => !(f in row));
          if (missing.length) {
            errors.push(`Row ${i + 2}: Missing fields: ${missing.join(', ')}`);
            continue;
          }
          
          // Type conversions and field mappings
          if ('active' in row) {
            row.active = row.active === true || row.active === 'true' || row.active === 1 || row.active === '1';
          }
          
          // Ensure pincode is always a string in pincode_branch
          if (storeName === 'pincode_branch' && 'pincode' in row) {
            row.pincode = String(row.pincode);
          }
          
          // Ensure all ID and code fields are strings
          if ('id' in row) row.id = String(row.id);
          if ('branchCode' in row) row.branchCode = String(row.branchCode);
          if ('rmId' in row) row.rmId = String(row.rmId);
          
          // Handle field mappings for backward compatibility
          if (storeName === 'holiday_master') {
            // Format Excel dates to ISO format
            if (row.date) {
              if (typeof row.date === 'number' || !isNaN(Number(row.date))) {
                try {
                  const excelDate = typeof row.date === 'number' ? row.date : Number(row.date);
                  const jsDate = new Date(Math.round((excelDate - 25569) * 86400 * 1000));
                  row.date = jsDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD
                } catch (e) {
                  console.error("Error converting date:", e);
                }
              }
            }
            
            if (row.Date) {
              if (typeof row.Date === 'number' || !isNaN(Number(row.Date))) {
                try {
                  const excelDate = typeof row.Date === 'number' ? row.Date : Number(row.Date);
                  const jsDate = new Date(Math.round((excelDate - 25569) * 86400 * 1000));
                  row.Date = jsDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD
                } catch (e) {
                  console.error("Error converting Date:", e);
                }
              }
            }
            
            // If new fields are present but old fields aren't, copy values
            if (row.date && !row.Date) row.Date = row.date;
            if (row.type && !row.HolidayType) row.HolidayType = row.type;
          }
          
          // Handle field mappings for Pincode Branch - map new fields to our interface properties
          if (storeName === 'pincode_branch') {
            // Map Excel headers to interface properties
            if (row['Pincode']) row.Pincode = String(row['Pincode']);
            if (row['Branch Code']) row.BranchCode = String(row['Branch Code']);
            if (row['Branch Name']) row.BranchName = String(row['Branch Name']);
            if (row['Cluster']) row.Cluster = String(row['Cluster']);
            if (row['Region']) row.Region = String(row['Region']);
            
            // Handle backward compatibility with old field names
            if (!row.Pincode && row.pincode) row.Pincode = row.pincode;
            if (!row.BranchCode && row.branchCode) row.BranchCode = row.branchCode;
            if (!row.BranchName && row.branchName) row.BranchName = row.branchName;
            if (!row.Region && row.region) row.Region = row.region;
          }
          
          // Handle field mappings for Hierarchy Master - map new fields to our interface properties
          if (storeName === 'hierarchy_master') {
            // Map Excel headers to interface properties
            if (row['Old No']) row.OldNo = String(row['Old No']);
            if (row['Emp No']) row.EmpNo = String(row['Emp No']);
            if (row['Emp ADID']) row.EmpADID = String(row['Emp ADID']);
            if (row['Full Name']) row.FullName = String(row['Full Name']);
            if (row['Gender']) row.Gender = String(row['Gender']);
            if (row['Emp Status']) row.EmpStatus = String(row['Emp Status']);
            if (row['Functional Designation']) row.FunctionalDesignation = String(row['Functional Designation']);
            if (row['Cat']) row.Cat = String(row['Cat']);
            if (row['Role']) row.Role = String(row['Role']);
            if (row['Team']) row.Team = String(row['Team']);
            if (row['CBL Code']) row.CBLCode = String(row['CBL Code']);
            if (row['CBL Code ADID']) row.CBLCodeADID = String(row['CBL Code ADID']);
            if (row['CBL Name']) row.CBLName = String(row['CBL Name']);
            if (row['Cluster']) row.Cluster = String(row['Cluster']);
            if (row['RBL Code']) row.RBLCode = String(row['RBL Code']);
            if (row['RBL ADID Code']) row.RBLADIDCode = String(row['RBL ADID Code']);
            if (row['RBL Name']) row.RBLName = String(row['RBL Name']);
            if (row['Region']) row.Region = String(row['Region']);
            if (row['ZH Code']) row.ZHCode = String(row['ZH Code']);
            if (row['ZH ADID']) row.ZHADID = String(row['ZH ADID']);
            if (row['ZH Name']) row.ZHName = String(row['ZH Name']);
            if (row['Zone']) row.Zone = String(row['Zone']);
            if (row['Vertical']) row.Vertical = String(row['Vertical']);
            if (row['Branch Code']) row.BranchCode = String(row['Branch Code']);
            if (row['Office Location Code']) row.OfficeLocationCode = String(row['Office Location Code']);
            if (row['Location']) row.Location = String(row['Location']);
            if (row['City']) row.City = String(row['City']);
            if (row['State']) row.State = String(row['State']);
            if (row['Date Of Joining']) row.DateOfJoining = String(row['Date Of Joining']);
            if (row['Yes Email']) row.YesEmail = String(row['Yes Email']);
            if (row['Mobile']) row.Mobile = String(row['Mobile']);
            if (row['Exit Month/Resign date']) row.ExitMonthResignDate = String(row['Exit Month/Resign date']);
            if (row['Remarks']) row.Remarks = String(row['Remarks']);
            if (row['Segment']) row.Segment = String(row['Segment']);
            
            // Handle backward compatibility with old field names
            if (!row.EmpADID && row.empAdid) row.EmpADID = row.empAdid;
            if (!row.FullName && row.fullName) row.FullName = row.fullName;
            if (!row.FullName && row.employeeName) row.FullName = row.employeeName;
            if (!row.RBLADIDCode && row.rblAdid) row.RBLADIDCode = row.rblAdid;
            if (!row.RBLName && row.rblName) row.RBLName = row.rblName;
            if (!row.Region && row.region) row.Region = row.region;
            if (!row.ZHADID && row.zhAdid) row.ZHADID = row.zhAdid;
            if (!row.ZHName && row.zhName) row.ZHName = row.zhName;
            if (!row.YesEmail && row.yesEmail) row.YesEmail = row.yesEmail;
            if (!row.Mobile && row.mobile) row.Mobile = row.mobile;
            
            // Make sure EmpADID is used as id if available
            if (row.EmpADID && !row.id) row.id = row.EmpADID;
          }
          
          processedData.push(row);
        }
      }
      
      // Use the database's specific table method to avoid type issues
      if (storeName === 'anchor_master') {
        // Process 100 records at a time to avoid overwhelming the database
        for (let i = 0; i < processedData.length; i += 100) {
          await db.anchor_master.bulkPut(processedData.slice(i, i + 100));
        }
      } else if (storeName === 'hierarchy_master') {
        for (let i = 0; i < processedData.length; i += 100) {
          await db.hierarchy_master.bulkPut(processedData.slice(i, i + 100));
        }
      } else if (storeName === 'holiday_master') {
        for (let i = 0; i < processedData.length; i += 100) {
          await db.holiday_master.bulkPut(processedData.slice(i, i + 100));
        }
      } else if (storeName === 'pincode_branch') {
        for (let i = 0; i < processedData.length; i += 100) {
          await db.pincode_branch.bulkPut(processedData.slice(i, i + 100));
        }
      } else if (storeName === 'rm_branch') {
        for (let i = 0; i < processedData.length; i += 100) {
          await db.rm_branch.bulkPut(processedData.slice(i, i + 100));
        }
      } else if (storeName === 'smartfin_status_updates') {
        for (let i = 0; i < processedData.length; i += 100) {
          await db.smartfin_status_updates.bulkPut(processedData.slice(i, i + 100));
        }
      } else if (storeName === 'email_template_master') {
        for (let i = 0; i < processedData.length; i += 100) {
          await db.email_template_master.bulkPut(processedData.slice(i, i + 100));
        }
      }
      
      return { success: errors.length === 0, errors };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }

  // Download Excel template for a store
  static downloadTemplate<T extends StoreName>(storeName: T) {
    const workbook = XLSX.utils.book_new();
    let data = [];
    
    // Create header row based on store
    if (storeName === 'smartfin_status_updates') {
      data.push(SMARTFIN_UPDATE_TEMPLATE_HEADERS);
    } else {
      data.push(STORE_FIELDS[storeName]);
    }
    
    // Add a sample row
    data.push(Array(data[0].length).fill(''));
    
    const worksheet = XLSX.utils.aoa_to_sheet(data);
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Template');
    
    // Generate file name
    const fileName = `${storeName}_template.xlsx`;
    
    // Create Excel file and trigger download
    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    saveAs(blob, fileName);
  }

  // Get unique anchor names from anchor_master
  static async getUniqueAnchorNames() {
    try {
      // Simplify implementation to avoid TypeScript issues
      const anchors = await db.anchor_master.toArray();
      const anchorNames: string[] = [];
      
      anchors.forEach(anchor => {
        if (anchor.anchorname && !anchorNames.includes(anchor.anchorname)) {
          anchorNames.push(anchor.anchorname);
        }
      });
      
      return { success: true, data: anchorNames };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }

  // Get unique program names from anchor_master
  static async getUniqueProgramNames() {
    try {
      // Simplify implementation to avoid TypeScript issues
      const programs = await db.anchor_master.toArray();
      const programNames: string[] = [];
      
      programs.forEach(program => {
        if (program.programname && !programNames.includes(program.programname)) {
          programNames.push(program.programname);
        }
      });
      
      return { success: true, data: programNames };
    } catch (error: any) {
      return { success: false, error: error.message };
    }
  }

  // Custom lead template download
  static downloadLeadTemplate() {
    const headers = LEAD_TEMPLATE_HEADERS;
    const ws = XLSX.utils.aoa_to_sheet([headers]);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Template');
    const wbout = XLSX.write(wb, { type: 'array', bookType: 'xlsx' });
    const blob = new Blob([wbout], { type: 'application/octet-stream' });
    saveAs(blob, `lead_upload_template.xlsx`);
  }
}

export default db;
</file>

<file path="components/SCFleadmanagement/sidebar.tsx">
"use client"

import type React from "react"

import { Menu, UserPlus, Users, FileBarChart, Database, ChevronDown, ChevronRight, LogOut, Settings, Sparkles, BarChart } from "lucide-react"

import { Home } from "lucide-react"
import Link from "next/link"
import { useState } from "react"
import Image from "next/image"
import { useAuth } from "@/components/auth-provider"
import { usePathname } from "next/navigation"

export default function Sidebar() {
  const { userEmail, userRole, logout, hasAccess } = useAuth()
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)
  const [isMastersExpanded, setIsMastersExpanded] = useState(false)
  const pathname = usePathname()

  function handleNavigation() {
    setIsMobileMenuOpen(false)
  }

  function NavItem({
    href,
    icon: Icon,
    children,
  }: {
    href: string
    icon: any
    children: React.ReactNode
  }) {
    // Skip rendering if user doesn't have access to this page
    if (!hasAccess(href)) return null

    const isActive = pathname === href || pathname.startsWith(`${href}/`)

    return (
      <Link
        href={href}
        onClick={handleNavigation}
        className={`flex items-center px-3 py-2 text-sm rounded-md transition-colors ${
          isActive
            ? "bg-gray-100 text-gray-900 dark:bg-[#1F1F23] dark:text-white"
            : "text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-50 dark:hover:bg-[#1F1F23]"
        }`}
      >
        <Icon className="h-4 w-4 mr-3 flex-shrink-0" />
        {children}
      </Link>
    )
  }

  return (
    <>
      <button
        type="button"
        className="fixed top-4 left-4 z-[70] p-2 rounded-lg bg-white dark:bg-[#0F0F12] shadow-md"
        onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
      >
        <Menu className="h-5 w-5 text-gray-600 dark:text-gray-300" />
      </button>
      <nav
        className={`
                fixed inset-y-0 left-0 z-[70] w-64 bg-white dark:bg-[#0F0F12] transform transition-transform duration-200 ease-in-out
                border-r border-gray-200 dark:border-[#1F1F23]
                ${isMobileMenuOpen ? "translate-x-0" : "-translate-x-full"}
            `}
      >
        <div className="h-full flex flex-col">
          <div className="h-16 px-6 flex items-center border-b border-gray-200 dark:border-[#1F1F23]">
            <div className="flex items-center gap-3">
              <span className="text-lg font-semibold hover:cursor-pointer text-gray-900 dark:text-white">
                SCF Lead Management
              </span>
            </div>
          </div>

          <div className="flex-1 overflow-y-auto py-4 px-4">
            <div className="space-y-6">
              {/* Show role indicator */}
              <div className="px-3 py-2 bg-blue-50 dark:bg-blue-900/30 rounded-md">
                <div className="text-xs text-blue-500 dark:text-blue-400 font-medium">
                  {userRole === "admin" 
                    ? "Admin User" 
                    : userRole === "rm"
                      ? "RM User"
                      : userRole === "psm"
                        ? "PSM User"
                      : "RM Inbox User"}
                </div>
              </div>

              <div>
                <div className="px-3 mb-2 text-xs font-semibold uppercase tracking-wider text-gray-500 dark:text-gray-400">
                  Overview
                </div>
                <div className="space-y-1">
                  <NavItem href="/dashboard" icon={Home}>
                    Dashboard
                  </NavItem>
                  <NavItem href="/reports" icon={FileBarChart}>
                    Reports
                  </NavItem>
                </div>
              </div>

              <div>
                <div className="px-3 mb-2 text-xs font-semibold uppercase tracking-wider text-gray-500 dark:text-gray-400">
                  Leads
                </div>
                <div className="space-y-1">
                  <NavItem href="/new-leads" icon={UserPlus}>
                    New Leads
                  </NavItem>
                  <NavItem href="/rm-leads" icon={Users}>
                    RM Leads
                  </NavItem>
                  <NavItem href="/rm-inbox" icon={Users}>
                    RM Inbox
                  </NavItem>
                  <NavItem href="/psm-leads" icon={Users}>
                    PSM Leads
                  </NavItem>
                  <NavItem href="/program-review" icon={Users}>
                    Program Review
                  </NavItem>
                  <NavItem href="/smartfin-update" icon={BarChart}>
                    Smartfin Status Update
                  </NavItem>
                </div>
              </div>

              {/* Configuration section */}
              {userRole === "admin" && (
                <div>
                  <div className="px-3 mb-2 text-xs font-semibold uppercase tracking-wider text-gray-500 dark:text-gray-400">
                    Configuration
                  </div>
                  <div className="space-y-1">
                    <NavItem href="/configuration/escalation-rules" icon={Settings}>
                      Escalation Rules
                    </NavItem>
                    <NavItem href="/configuration/ai-rules" icon={Sparkles}>
                      AI Rules
                    </NavItem>
                  </div>
                </div>
              )}

              {/* Only show Masters section to admin users */}
              {userRole === "admin" && (
                <div>
                  <div className="px-3 mb-2 text-xs font-semibold uppercase tracking-wider text-gray-500 dark:text-gray-400">
                    Masters
                  </div>
                  <button
                    className="flex items-center justify-between w-full px-3 py-2 text-sm rounded-md transition-colors text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-50 dark:hover:bg-[#1F1F23]"
                    onClick={() => setIsMastersExpanded(!isMastersExpanded)}
                  >
                    <div className="flex items-center">
                      <Database className="h-4 w-4 mr-3 flex-shrink-0" />
                      <span>Masters</span>
                    </div>
                    {isMastersExpanded ? (
                      <ChevronDown className="h-4 w-4" />
                    ) : (
                      <ChevronRight className="h-4 w-4" />
                    )}
                  </button>
                  {isMastersExpanded && (
                    <div className="ml-6 mt-1 space-y-1 border-l border-gray-200 dark:border-[#1F1F23] pl-3">
                      <Link
                        href="/masters/pincode-branch"
                        onClick={handleNavigation}
                        className="flex items-center py-2 text-sm transition-colors text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                      >
                        Pincode Branch Master
                      </Link>
                      <Link
                        href="/masters/rm-branch"
                        onClick={handleNavigation}
                        className="flex items-center py-2 text-sm transition-colors text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                      >
                        RM Branch Master
                      </Link>
                      <Link
                        href="/masters/hierarchy"
                        onClick={handleNavigation}
                        className="flex items-center py-2 text-sm transition-colors text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                      >
                        Hierarchy Master
                      </Link>
                      <Link
                        href="/masters/holiday-master"
                        onClick={handleNavigation}
                        className="flex items-center py-2 text-sm transition-colors text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                      >
                        Holiday Master
                      </Link>
                      <Link
                        href="/masters/anchor-master"
                        onClick={handleNavigation}
                        className="flex items-center py-2 text-sm transition-colors text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                      >
                        Anchor Master
                      </Link>
                      <Link
                        href="/masters/error-code-master"
                        onClick={handleNavigation}
                        className="flex items-center py-2 text-sm transition-colors text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                      >
                        Error Code Master
                      </Link>
                      <Link
                        href="/masters/email-template-master"
                        onClick={handleNavigation}
                        className="flex items-center py-2 text-sm transition-colors text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                      >
                        Email Template Master
                      </Link>
                      <Link
                        href="/masters/ai-prompts"
                        onClick={handleNavigation}
                        className="flex items-center py-2 text-sm transition-colors text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                      >
                        AI Prompts Master
                      </Link>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>

          <div className="px-4 py-4 border-t border-gray-200 dark:border-[#1F1F23]">
            {userEmail && (
              <div className="mb-4 px-3 py-2 bg-gray-50 dark:bg-[#1F1F23] rounded-md">
                <p className="text-xs text-gray-500 dark:text-gray-400">Logged in as</p>
                <p className="text-sm font-medium truncate text-gray-900 dark:text-white">{userEmail}</p>
              </div>
            )}
            <div className="space-y-1">
              <button 
                onClick={logout}
                className="flex w-full items-center px-3 py-2 text-sm rounded-md transition-colors text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-50 dark:hover:bg-[#1F1F23]"
              >
                <LogOut className="h-4 w-4 mr-3 flex-shrink-0" />
                Logout
              </button>
            </div>
          </div>
        </div>
      </nav>

      {isMobileMenuOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-[65]"
          onClick={() => setIsMobileMenuOpen(false)}
        />
      )}
    </>
  )
}
</file>

</files>
